
TransmitterCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002f0  00000384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  00800102  00800102  00000386  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000386  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010a0  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000acb  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b7c  00000000  00000000  000020c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  00002c40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f6  00000000  00000000  00002fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cd8  00000000  00000000  000035aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004282  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_14>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_17>
  48:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ef       	ldi	r30, 0xF0	; 240
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 39       	cpi	r26, 0x90	; 144
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
	}
	
	char msg[] = "abcdefghijk";
	*/
	
	MotorInit();
  a6:	0e 94 e5 00 	call	0x1ca	; 0x1ca <MotorInit>
	sei();
  aa:	78 94       	sei
  ac:	ff cf       	rjmp	.-2      	; 0xac <main+0x6>

000000ae <__vector_15>:
#include <avr/io.h>

volatile static int factor;
volatile static int nextFactor;
ISR (TIMER0_COMPB_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	3f 93       	push	r19
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
	static int counter = 0;
	counter++;
  c0:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <counter.1611>
  c4:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <counter.1611+0x1>
  c8:	2f 5f       	subi	r18, 0xFF	; 255
  ca:	3f 4f       	sbci	r19, 0xFF	; 255
  cc:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <counter.1611+0x1>
  d0:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <counter.1611>

	uint8_t high = PORTD & (1<<DDD5);
	
	uint8_t realFactor = (high) ? factor : 256 -  factor;
  d4:	5d 99       	sbic	0x0b, 5	; 11
  d6:	06 c0       	rjmp	.+12     	; 0xe4 <__vector_15+0x36>
  d8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <factor>
  dc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <factor+0x1>
  e0:	81 95       	neg	r24
  e2:	04 c0       	rjmp	.+8      	; 0xec <__vector_15+0x3e>
  e4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <factor>
  e8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <factor+0x1>
	if(counter == realFactor)
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	28 17       	cp	r18, r24
  f0:	39 07       	cpc	r19, r25
  f2:	d9 f4       	brne	.+54     	; 0x12a <__vector_15+0x7c>
	{
		if(factor != nextFactor)
  f4:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <factor>
  f8:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <factor+0x1>
  fc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <nextFactor>
 100:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <nextFactor+0x1>
 104:	28 17       	cp	r18, r24
 106:	39 07       	cpc	r19, r25
 108:	41 f0       	breq	.+16     	; 0x11a <__vector_15+0x6c>
		{
			factor = nextFactor;
 10a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <nextFactor>
 10e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <nextFactor+0x1>
 112:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <factor+0x1>
 116:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <factor>
		}
		PORTD ^= (1<<DDD5);
 11a:	9b b1       	in	r25, 0x0b	; 11
 11c:	80 e2       	ldi	r24, 0x20	; 32
 11e:	89 27       	eor	r24, r25
 120:	8b b9       	out	0x0b, r24	; 11
		counter = 0;
 122:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <counter.1611+0x1>
 126:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <counter.1611>
	}
}
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	3f 91       	pop	r19
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <__vector_14>:
ISR (TIMER0_COMPA_vect)
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	2f 93       	push	r18
 148:	3f 93       	push	r19
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
	static int counter = 0;
	counter++;
 14e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 152:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
 156:	2f 5f       	subi	r18, 0xFF	; 255
 158:	3f 4f       	sbci	r19, 0xFF	; 255
 15a:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <__data_end+0x1>
 15e:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__data_end>

	uint8_t high = PORTD & (1<<DDD6);
	
	uint8_t realFactor = (high) ? factor : 256 -  factor;
 162:	5e 99       	sbic	0x0b, 6	; 11
 164:	06 c0       	rjmp	.+12     	; 0x172 <__vector_14+0x36>
 166:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <factor>
 16a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <factor+0x1>
 16e:	81 95       	neg	r24
 170:	04 c0       	rjmp	.+8      	; 0x17a <__vector_14+0x3e>
 172:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <factor>
 176:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <factor+0x1>
	if(counter == realFactor)
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	28 17       	cp	r18, r24
 17e:	39 07       	cpc	r19, r25
 180:	d9 f4       	brne	.+54     	; 0x1b8 <__vector_14+0x7c>
	{
		if(factor != nextFactor)
 182:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <factor>
 186:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <factor+0x1>
 18a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <nextFactor>
 18e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <nextFactor+0x1>
 192:	28 17       	cp	r18, r24
 194:	39 07       	cpc	r19, r25
 196:	41 f0       	breq	.+16     	; 0x1a8 <__vector_14+0x6c>
		{
			factor = nextFactor;
 198:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <nextFactor>
 19c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <nextFactor+0x1>
 1a0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <factor+0x1>
 1a4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <factor>
		}
		PORTD ^= (1<<DDD6);
 1a8:	9b b1       	in	r25, 0x0b	; 11
 1aa:	80 e4       	ldi	r24, 0x40	; 64
 1ac:	89 27       	eor	r24, r25
 1ae:	8b b9       	out	0x0b, r24	; 11
		counter = 0;
 1b0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 1b4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	}
}
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	3f 91       	pop	r19
 1be:	2f 91       	pop	r18
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <MotorInit>:

void MotorInit()
{
	TCCR0A = (1<<WGM01);
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS00) | (1<<CS01);
 1ce:	93 e0       	ldi	r25, 0x03	; 3
 1d0:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1<<OCIE0A);
 1d2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	OCR0A = 5;
 1d6:	85 e0       	ldi	r24, 0x05	; 5
 1d8:	87 bd       	out	0x27, r24	; 39
	OCR0B = 5;
 1da:	88 bd       	out	0x28, r24	; 40
	DDRD |= (1<<DDD6) | (1<<DDD5);
 1dc:	8a b1       	in	r24, 0x0a	; 10
 1de:	80 66       	ori	r24, 0x60	; 96
 1e0:	8a b9       	out	0x0a, r24	; 10


	factor = 255;
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <factor+0x1>
 1ea:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <factor>
	nextFactor = factor;
 1ee:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <factor>
 1f2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <factor+0x1>
 1f6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <nextFactor+0x1>
 1fa:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <nextFactor>
 1fe:	08 95       	ret

00000200 <__vector_17>:

volatile uint8_t spiRxData = 0;
volatile uint8_t spiTxRxDone = 0;

ISR(SPI_STC_vect)
{
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	8f 93       	push	r24
	if(SPSR & (1<<SPIF))
 20c:	0d b4       	in	r0, 0x2d	; 45
 20e:	07 fe       	sbrs	r0, 7
 210:	09 c0       	rjmp	.+18     	; 0x224 <__vector_17+0x24>
	{
		spiRxData = SPDR;
 212:	8e b5       	in	r24, 0x2e	; 46
 214:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <spiRxData>
		spiRxData = 0;
 218:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <spiRxData>
		spiTxRxDone = 1;
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <spiTxRxDone>
 222:	06 c0       	rjmp	.+12     	; 0x230 <__vector_17+0x30>
	}
	else
	{
		spiRxData = SPDR;
 224:	8e b5       	in	r24, 0x2e	; 46
 226:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <spiRxData>
		spiTxRxDone = 1;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <spiTxRxDone>
	}
}
 230:	8f 91       	pop	r24
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <__vector_24>:
#include <avr/interrupt.h>

volatile uint8_t status = TWI_NONE;

ISR(TWI_vect)
{
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	11 24       	eor	r1, r1
 246:	8f 93       	push	r24
	status = (TWSR & TWI_NONE);
 248:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 24c:	88 7f       	andi	r24, 0xF8	; 248
 24e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 252:	8f 91       	pop	r24
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <__vector_18>:
volatile static uint8_t rxBuffer[RXBUFFERSIZE] = {0};
volatile static uint16_t rxCount = 0;
volatile static uint8_t uartTxBusy = 1;

ISR(USART_RX_vect)
{
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
 26c:	ef 93       	push	r30
 26e:	ff 93       	push	r31
	volatile static uint16_t rxWritePos = 0;
	
	rxBuffer[rxWritePos] = UDR0;
 270:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <rxWritePos.1621>
 274:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <rxWritePos.1621+0x1>
 278:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 27c:	e0 5f       	subi	r30, 0xF0	; 240
 27e:	fe 4f       	sbci	r31, 0xFE	; 254
 280:	80 83       	st	Z, r24
	rxCount++;
 282:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <rxCount>
 286:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <rxCount+0x1>
 28a:	01 96       	adiw	r24, 0x01	; 1
 28c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <rxCount+0x1>
 290:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <rxCount>
	rxWritePos++;
 294:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <rxWritePos.1621>
 298:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <rxWritePos.1621+0x1>
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <rxWritePos.1621+0x1>
 2a2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <rxWritePos.1621>
	if(rxWritePos >= RXBUFFERSIZE)
 2a6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <rxWritePos.1621>
 2aa:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <rxWritePos.1621+0x1>
 2ae:	80 38       	cpi	r24, 0x80	; 128
 2b0:	91 05       	cpc	r25, r1
 2b2:	20 f0       	brcs	.+8      	; 0x2bc <__vector_18+0x5e>
	{
		rxWritePos = 0;
 2b4:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <rxWritePos.1621+0x1>
 2b8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <rxWritePos.1621>
	}
}
 2bc:	ff 91       	pop	r31
 2be:	ef 91       	pop	r30
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <__vector_20>:

ISR(USART_TX_vect)
{
 2ce:	1f 92       	push	r1
 2d0:	0f 92       	push	r0
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	0f 92       	push	r0
 2d6:	11 24       	eor	r1, r1
 2d8:	8f 93       	push	r24
	uartTxBusy = 1;
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <uartTxBusy>
}
 2e0:	8f 91       	pop	r24
 2e2:	0f 90       	pop	r0
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti

000002ec <_exit>:
 2ec:	f8 94       	cli

000002ee <__stop_program>:
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <__stop_program>
