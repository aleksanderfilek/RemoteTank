
TransmitterCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000009c2  00000a56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000098  00800108  00800108  00000a5e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a5e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000137d  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b81  00000000  00000000  00001f75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000092c  00000000  00000000  00002af6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000308  00000000  00000000  00003424  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000768  00000000  00000000  0000372c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000989  00000000  00000000  00003e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000481d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_14>
  3c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 40 01 	jmp	0x280	; 0x280 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 3a       	cpi	r26, 0xA0	; 160
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  9e:	0c 94 df 04 	jmp	0x9be	; 0x9be <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <AudioInit>:
#include <avr/io.h>
#include <util/delay.h>

void AudioInit()
{
	DDRC |= (1<<DDC4);
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	80 61       	ori	r24, 0x10	; 16
  aa:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1<<DDC4);
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	8f 7e       	andi	r24, 0xEF	; 239
  b0:	88 b9       	out	0x08, r24	; 8
  b2:	08 95       	ret

000000b4 <AudioBeep>:
}

void AudioBeep(int times)
{
  b4:	ac 01       	movw	r20, r24
	for(int i = 0; i < times; i++)
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	1a c0       	rjmp	.+52     	; 0xf0 <AudioBeep+0x3c>
	{
		PORTC |= (1<<DDC4);
  bc:	98 b1       	in	r25, 0x08	; 8
  be:	90 61       	ori	r25, 0x10	; 16
  c0:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	6f ef       	ldi	r22, 0xFF	; 255
  c4:	83 ec       	ldi	r24, 0xC3	; 195
  c6:	99 e0       	ldi	r25, 0x09	; 9
  c8:	61 50       	subi	r22, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <AudioBeep+0x14>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <AudioBeep+0x1e>
  d2:	00 00       	nop
		_delay_ms(200);
		PORTC &= ~(1<<DDC4);
  d4:	98 b1       	in	r25, 0x08	; 8
  d6:	9f 7e       	andi	r25, 0xEF	; 239
  d8:	98 b9       	out	0x08, r25	; 8
  da:	6f ef       	ldi	r22, 0xFF	; 255
  dc:	81 ee       	ldi	r24, 0xE1	; 225
  de:	94 e0       	ldi	r25, 0x04	; 4
  e0:	61 50       	subi	r22, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <AudioBeep+0x2c>
  e8:	00 c0       	rjmp	.+0      	; 0xea <AudioBeep+0x36>
  ea:	00 00       	nop
	PORTC &= ~(1<<DDC4);
}

void AudioBeep(int times)
{
	for(int i = 0; i < times; i++)
  ec:	2f 5f       	subi	r18, 0xFF	; 255
  ee:	3f 4f       	sbci	r19, 0xFF	; 255
  f0:	24 17       	cp	r18, r20
  f2:	35 07       	cpc	r19, r21
  f4:	1c f3       	brlt	.-58     	; 0xbc <AudioBeep+0x8>
		PORTC |= (1<<DDC4);
		_delay_ms(200);
		PORTC &= ~(1<<DDC4);
		_delay_ms(100);
	}
  f6:	08 95       	ret

000000f8 <CallbackUart>:
//}

CommandManager* commandManagerRef;

void CallbackUart(uint8_t* data, uint16_t length)
{
  f8:	ab 01       	movw	r20, r22
	CommandProcess(commandManagerRef, data, length);
  fa:	bc 01       	movw	r22, r24
  fc:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <commandManagerRef>
 100:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <commandManagerRef+0x1>
 104:	0e 94 52 02 	call	0x4a4	; 0x4a4 <CommandProcess>
 108:	08 95       	ret

0000010a <OnConnect>:
}

void OnConnect(CommandType Type, CommandStatus Status, uint8_t* data)
{
	AudioBeep(2);
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 5a 00 	call	0xb4	; 0xb4 <AudioBeep>
 112:	08 95       	ret

00000114 <main>:
}

int main(void)
{		
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	00 d0       	rcall	.+0      	; 0x11a <main+0x6>
 11a:	1f 92       	push	r1
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
	//Nrf24Radio radio;
	//radioRef = &radio;
	//Nrf24Init(radioRef);
	
	CommandManager commandManager;
	commandManagerRef = &commandManager;
 120:	ce 01       	movw	r24, r28
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <commandManagerRef+0x1>
 128:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <commandManagerRef>
	CommandInit(commandManagerRef);
 12c:	0e 94 21 02 	call	0x442	; 0x442 <CommandInit>
	CommandRegisterFunc(commandManagerRef, CMD_CONNECT, OnConnect);
 130:	45 e8       	ldi	r20, 0x85	; 133
 132:	50 e0       	ldi	r21, 0x00	; 0
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <commandManagerRef>
 13a:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <commandManagerRef+0x1>
 13e:	0e 94 26 02 	call	0x44c	; 0x44c <CommandRegisterFunc>
	
	UartInit(9600, 0);
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	60 e8       	ldi	r22, 0x80	; 128
 146:	75 e2       	ldi	r23, 0x25	; 37
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <UartInit>
	UartCallbackSet(CallbackUart, COMMAND_LENGTH);
 150:	60 e2       	ldi	r22, 0x20	; 32
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	8c e7       	ldi	r24, 0x7C	; 124
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 18 02 	call	0x430	; 0x430 <UartCallbackSet>
	//
	//SpiMasterInit();
	sei();
 15c:	78 94       	sei
		//UartByteSend(ERR_RADIO_NOT_STARTED); // jakies zbieranie errrorowy by sie przydalo
		//return 0;
	//}
	//
	//Nrf24OpenWritingPipe(radioRef, pipe);
	AudioInit();
 15e:	0e 94 53 00 	call	0xa6	; 0xa6 <AudioInit>
 162:	ff cf       	rjmp	.-2      	; 0x162 <main+0x4e>

00000164 <__vector_15>:
#include <avr/io.h>

volatile static int factor;
volatile static int nextFactor;
ISR (TIMER0_COMPB_vect)
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	2f 93       	push	r18
 170:	3f 93       	push	r19
 172:	8f 93       	push	r24
 174:	9f 93       	push	r25
	static int counter = 0;
	counter++;
 176:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <counter.1611>
 17a:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <counter.1611+0x1>
 17e:	2f 5f       	subi	r18, 0xFF	; 255
 180:	3f 4f       	sbci	r19, 0xFF	; 255
 182:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <counter.1611+0x1>
 186:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <counter.1611>

	uint8_t high = PORTD & (1<<DDD5);
	
	uint8_t realFactor = (high) ? factor : 256 -  factor;
 18a:	5d 99       	sbic	0x0b, 5	; 11
 18c:	06 c0       	rjmp	.+12     	; 0x19a <__vector_15+0x36>
 18e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <factor>
 192:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <factor+0x1>
 196:	81 95       	neg	r24
 198:	04 c0       	rjmp	.+8      	; 0x1a2 <__vector_15+0x3e>
 19a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <factor>
 19e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <factor+0x1>
	if(counter == realFactor)
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	28 17       	cp	r18, r24
 1a6:	39 07       	cpc	r19, r25
 1a8:	d9 f4       	brne	.+54     	; 0x1e0 <__vector_15+0x7c>
	{
		if(factor != nextFactor)
 1aa:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <factor>
 1ae:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <factor+0x1>
 1b2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <nextFactor>
 1b6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <nextFactor+0x1>
 1ba:	28 17       	cp	r18, r24
 1bc:	39 07       	cpc	r19, r25
 1be:	41 f0       	breq	.+16     	; 0x1d0 <__vector_15+0x6c>
		{
			factor = nextFactor;
 1c0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <nextFactor>
 1c4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <nextFactor+0x1>
 1c8:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <factor+0x1>
 1cc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <factor>
		}
		PORTD ^= (1<<DDD5);
 1d0:	9b b1       	in	r25, 0x0b	; 11
 1d2:	80 e2       	ldi	r24, 0x20	; 32
 1d4:	89 27       	eor	r24, r25
 1d6:	8b b9       	out	0x0b, r24	; 11
		counter = 0;
 1d8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <counter.1611+0x1>
 1dc:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <counter.1611>
	}
}
 1e0:	9f 91       	pop	r25
 1e2:	8f 91       	pop	r24
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <__vector_14>:
ISR (TIMER0_COMPA_vect)
{
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	2f 93       	push	r18
 1fe:	3f 93       	push	r19
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
	static int counter = 0;
	counter++;
 204:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
 208:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
 20c:	2f 5f       	subi	r18, 0xFF	; 255
 20e:	3f 4f       	sbci	r19, 0xFF	; 255
 210:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <__data_end+0x1>
 214:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__data_end>

	uint8_t high = PORTD & (1<<DDD6);
	
	uint8_t realFactor = (high) ? factor : 256 -  factor;
 218:	5e 99       	sbic	0x0b, 6	; 11
 21a:	06 c0       	rjmp	.+12     	; 0x228 <__vector_14+0x36>
 21c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <factor>
 220:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <factor+0x1>
 224:	81 95       	neg	r24
 226:	04 c0       	rjmp	.+8      	; 0x230 <__vector_14+0x3e>
 228:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <factor>
 22c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <factor+0x1>
	if(counter == realFactor)
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	28 17       	cp	r18, r24
 234:	39 07       	cpc	r19, r25
 236:	d9 f4       	brne	.+54     	; 0x26e <__vector_14+0x7c>
	{
		if(factor != nextFactor)
 238:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <factor>
 23c:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <factor+0x1>
 240:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <nextFactor>
 244:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <nextFactor+0x1>
 248:	28 17       	cp	r18, r24
 24a:	39 07       	cpc	r19, r25
 24c:	41 f0       	breq	.+16     	; 0x25e <__vector_14+0x6c>
		{
			factor = nextFactor;
 24e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <nextFactor>
 252:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <nextFactor+0x1>
 256:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <factor+0x1>
 25a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <factor>
		}
		PORTD ^= (1<<DDD6);
 25e:	9b b1       	in	r25, 0x0b	; 11
 260:	80 e4       	ldi	r24, 0x40	; 64
 262:	89 27       	eor	r24, r25
 264:	8b b9       	out	0x0b, r24	; 11
		counter = 0;
 266:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
 26a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
	}
}
 26e:	9f 91       	pop	r25
 270:	8f 91       	pop	r24
 272:	3f 91       	pop	r19
 274:	2f 91       	pop	r18
 276:	0f 90       	pop	r0
 278:	0f be       	out	0x3f, r0	; 63
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <__vector_18>:
volatile static uint8_t uartTxBusy = 1;
static uint16_t desiredLength = 0;
static UartCallback callback;

ISR(USART_RX_vect)
{
 280:	1f 92       	push	r1
 282:	0f 92       	push	r0
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	0f 92       	push	r0
 288:	11 24       	eor	r1, r1
 28a:	af 92       	push	r10
 28c:	bf 92       	push	r11
 28e:	cf 92       	push	r12
 290:	df 92       	push	r13
 292:	ef 92       	push	r14
 294:	ff 92       	push	r15
 296:	0f 93       	push	r16
 298:	1f 93       	push	r17
 29a:	2f 93       	push	r18
 29c:	3f 93       	push	r19
 29e:	4f 93       	push	r20
 2a0:	5f 93       	push	r21
 2a2:	6f 93       	push	r22
 2a4:	7f 93       	push	r23
 2a6:	8f 93       	push	r24
 2a8:	9f 93       	push	r25
 2aa:	af 93       	push	r26
 2ac:	bf 93       	push	r27
 2ae:	ef 93       	push	r30
 2b0:	ff 93       	push	r31
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	cd b7       	in	r28, 0x3d	; 61
 2b8:	de b7       	in	r29, 0x3e	; 62
	
	if(rxWritePos >= RXBUFFERSIZE)
	{
		rxWritePos = 0;
	}
}
 2ba:	0d b7       	in	r16, 0x3d	; 61
 2bc:	1e b7       	in	r17, 0x3e	; 62

ISR(USART_RX_vect)
{
	volatile static uint16_t rxWritePos = 0;
	
	rxBuffer[rxWritePos] = UDR0;
 2be:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <rxWritePos.1762>
 2c2:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <rxWritePos.1762+0x1>
 2c6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2ca:	e8 5e       	subi	r30, 0xE8	; 232
 2cc:	fe 4f       	sbci	r31, 0xFE	; 254
 2ce:	80 83       	st	Z, r24
	rxCount++;
 2d0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <rxCount>
 2d4:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <rxCount+0x1>
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <rxCount+0x1>
 2de:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <rxCount>
	rxWritePos++;
 2e2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rxWritePos.1762>
 2e6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rxWritePos.1762+0x1>
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rxWritePos.1762+0x1>
 2f0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rxWritePos.1762>
	
	if(desiredLength > 0 && rxCount == desiredLength)
 2f4:	e0 90 14 01 	lds	r14, 0x0114	; 0x800114 <desiredLength>
 2f8:	f0 90 15 01 	lds	r15, 0x0115	; 0x800115 <desiredLength+0x1>
 2fc:	e1 14       	cp	r14, r1
 2fe:	f1 04       	cpc	r15, r1
 300:	61 f1       	breq	.+88     	; 0x35a <__vector_18+0xda>
 302:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <rxCount>
 306:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <rxCount+0x1>
 30a:	e8 16       	cp	r14, r24
 30c:	f9 06       	cpc	r15, r25
 30e:	29 f5       	brne	.+74     	; 0x35a <__vector_18+0xda>
	{
		uint8_t message[desiredLength];
 310:	8d b7       	in	r24, 0x3d	; 61
 312:	9e b7       	in	r25, 0x3e	; 62
 314:	8e 19       	sub	r24, r14
 316:	9f 09       	sbc	r25, r15
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	9e bf       	out	0x3e, r25	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	8d bf       	out	0x3d, r24	; 61
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	6c 01       	movw	r12, r24
		memcpy(message, rxBuffer, desiredLength);
 326:	a7 01       	movw	r20, r14
 328:	68 e1       	ldi	r22, 0x18	; 24
 32a:	71 e0       	ldi	r23, 0x01	; 1
 32c:	0e 94 9f 04 	call	0x93e	; 0x93e <memcpy>
		callback(message, desiredLength);
 330:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <callback>
 334:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <callback+0x1>
 338:	b7 01       	movw	r22, r14
 33a:	c6 01       	movw	r24, r12
 33c:	09 95       	icall
		rxWritePos = 0;
 33e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <rxWritePos.1762+0x1>
 342:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <rxWritePos.1762>
		rxCount= 0;
 346:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <rxCount+0x1>
 34a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <rxCount>
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	f8 94       	cli
 352:	1e bf       	out	0x3e, r17	; 62
 354:	0f be       	out	0x3f, r0	; 63
 356:	0d bf       	out	0x3d, r16	; 61
 358:	0b c0       	rjmp	.+22     	; 0x370 <__vector_18+0xf0>
		return;
	}
	
	if(rxWritePos >= RXBUFFERSIZE)
 35a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rxWritePos.1762>
 35e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rxWritePos.1762+0x1>
 362:	80 38       	cpi	r24, 0x80	; 128
 364:	91 05       	cpc	r25, r1
 366:	20 f0       	brcs	.+8      	; 0x370 <__vector_18+0xf0>
	{
		rxWritePos = 0;
 368:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <rxWritePos.1762+0x1>
 36c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <rxWritePos.1762>
	}
}
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	f8 94       	cli
 374:	1e bf       	out	0x3e, r17	; 62
 376:	0f be       	out	0x3f, r0	; 63
 378:	0d bf       	out	0x3d, r16	; 61
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	ff 91       	pop	r31
 380:	ef 91       	pop	r30
 382:	bf 91       	pop	r27
 384:	af 91       	pop	r26
 386:	9f 91       	pop	r25
 388:	8f 91       	pop	r24
 38a:	7f 91       	pop	r23
 38c:	6f 91       	pop	r22
 38e:	5f 91       	pop	r21
 390:	4f 91       	pop	r20
 392:	3f 91       	pop	r19
 394:	2f 91       	pop	r18
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	ff 90       	pop	r15
 39c:	ef 90       	pop	r14
 39e:	df 90       	pop	r13
 3a0:	cf 90       	pop	r12
 3a2:	bf 90       	pop	r11
 3a4:	af 90       	pop	r10
 3a6:	0f 90       	pop	r0
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	0f 90       	pop	r0
 3ac:	1f 90       	pop	r1
 3ae:	18 95       	reti

000003b0 <__vector_20>:

ISR(USART_TX_vect)
{
 3b0:	1f 92       	push	r1
 3b2:	0f 92       	push	r0
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	0f 92       	push	r0
 3b8:	11 24       	eor	r1, r1
 3ba:	8f 93       	push	r24
	uartTxBusy = 1;
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <uartTxBusy>
}
 3c2:	8f 91       	pop	r24
 3c4:	0f 90       	pop	r0
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	0f 90       	pop	r0
 3ca:	1f 90       	pop	r1
 3cc:	18 95       	reti

000003ce <UartInit>:

void UartInit(uint32_t baud, uint8_t highSpeed)
{
	uint8_t speed = 16;
	
	if(highSpeed != 0)
 3ce:	44 23       	and	r20, r20
 3d0:	39 f0       	breq	.+14     	; 0x3e0 <UartInit+0x12>
	{
		speed = 8;
		UCSR0A |= 1 << U2X0;
 3d2:	e0 ec       	ldi	r30, 0xC0	; 192
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	20 81       	ld	r18, Z
 3d8:	22 60       	ori	r18, 0x02	; 2
 3da:	20 83       	st	Z, r18
{
	uint8_t speed = 16;
	
	if(highSpeed != 0)
	{
		speed = 8;
 3dc:	a8 e0       	ldi	r26, 0x08	; 8
 3de:	01 c0       	rjmp	.+2      	; 0x3e2 <UartInit+0x14>
	uartTxBusy = 1;
}

void UartInit(uint32_t baud, uint8_t highSpeed)
{
	uint8_t speed = 16;
 3e0:	a0 e1       	ldi	r26, 0x10	; 16
	{
		speed = 8;
		UCSR0A |= 1 << U2X0;
	}
	
	baud = (F_CPU/(speed*baud)) - 1;
 3e2:	b0 e0       	ldi	r27, 0x00	; 0
 3e4:	9b 01       	movw	r18, r22
 3e6:	ac 01       	movw	r20, r24
 3e8:	0e 94 9e 02 	call	0x53c	; 0x53c <__muluhisi3>
 3ec:	9b 01       	movw	r18, r22
 3ee:	ac 01       	movw	r20, r24
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	74 e2       	ldi	r23, 0x24	; 36
 3f4:	84 ef       	ldi	r24, 0xF4	; 244
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <__udivmodsi4>
 3fc:	ba 01       	movw	r22, r20
 3fe:	a9 01       	movw	r20, r18
 400:	41 50       	subi	r20, 0x01	; 1
 402:	51 09       	sbc	r21, r1
 404:	61 09       	sbc	r22, r1
 406:	71 09       	sbc	r23, r1
	
	UBRR0H = (baud & 0xF00) >> 8;
 408:	db 01       	movw	r26, r22
 40a:	ca 01       	movw	r24, r20
 40c:	88 27       	eor	r24, r24
 40e:	9f 70       	andi	r25, 0x0F	; 15
 410:	aa 27       	eor	r26, r26
 412:	bb 27       	eor	r27, r27
 414:	89 2f       	mov	r24, r25
 416:	9a 2f       	mov	r25, r26
 418:	ab 2f       	mov	r26, r27
 41a:	bb 27       	eor	r27, r27
 41c:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (baud & 0x00FF);
 420:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0) | (1 << TXCIE0);
 424:	e1 ec       	ldi	r30, 0xC1	; 193
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	88 6d       	ori	r24, 0xD8	; 216
 42c:	80 83       	st	Z, r24
 42e:	08 95       	ret

00000430 <UartCallbackSet>:
}

void UartCallbackSet(UartCallback CallbackFunc, uint16_t DesiredLength)
{
	callback = CallbackFunc;
 430:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <callback+0x1>
 434:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <callback>
	desiredLength = DesiredLength;
 438:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <desiredLength+0x1>
 43c:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <desiredLength>
 440:	08 95       	ret

00000442 <CommandInit>:
	{
		free(Manager->funcs);
		Manager->funcs = NULL;
	}
	Manager->count = 0;	
}
 442:	fc 01       	movw	r30, r24
 444:	11 82       	std	Z+1, r1	; 0x01
 446:	10 82       	st	Z, r1
 448:	12 82       	std	Z+2, r1	; 0x02
 44a:	08 95       	ret

0000044c <CommandRegisterFunc>:

void CommandRegisterFunc(CommandManager* Manager, CommandType Type, CommandFunc Func)
{
 44c:	ef 92       	push	r14
 44e:	ff 92       	push	r15
 450:	1f 93       	push	r17
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	ec 01       	movw	r28, r24
 458:	16 2f       	mov	r17, r22
 45a:	7a 01       	movw	r14, r20
	Manager->count++;
 45c:	6a 81       	ldd	r22, Y+2	; 0x02
 45e:	6f 5f       	subi	r22, 0xFF	; 255
 460:	6a 83       	std	Y+2, r22	; 0x02
	Manager->funcs = (CommandRow*)realloc(Manager->funcs, Manager->count * sizeof(CommandRow));
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	cb 01       	movw	r24, r22
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	68 0f       	add	r22, r24
 46c:	79 1f       	adc	r23, r25
 46e:	88 81       	ld	r24, Y
 470:	99 81       	ldd	r25, Y+1	; 0x01
 472:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <realloc>
 476:	99 83       	std	Y+1, r25	; 0x01
 478:	88 83       	st	Y, r24
	Manager->funcs[Manager->count - 1] = (CommandRow){ Type, Func };
 47a:	2a 81       	ldd	r18, Y+2	; 0x02
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	f9 01       	movw	r30, r18
 480:	ee 0f       	add	r30, r30
 482:	ff 1f       	adc	r31, r31
 484:	2e 0f       	add	r18, r30
 486:	3f 1f       	adc	r19, r31
 488:	23 50       	subi	r18, 0x03	; 3
 48a:	31 09       	sbc	r19, r1
 48c:	fc 01       	movw	r30, r24
 48e:	e2 0f       	add	r30, r18
 490:	f3 1f       	adc	r31, r19
 492:	10 83       	st	Z, r17
 494:	f2 82       	std	Z+2, r15	; 0x02
 496:	e1 82       	std	Z+1, r14	; 0x01
}
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	1f 91       	pop	r17
 49e:	ff 90       	pop	r15
 4a0:	ef 90       	pop	r14
 4a2:	08 95       	ret

000004a4 <CommandProcess>:

void CommandProcess(CommandManager* Manager, uint8_t* data, uint16_t length)
{
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	dc 01       	movw	r26, r24
 4aa:	eb 01       	movw	r28, r22
	for(int i = 0; i < Manager->count; i++)
 4ac:	20 e0       	ldi	r18, 0x00	; 0
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	19 c0       	rjmp	.+50     	; 0x4e4 <CommandProcess+0x40>
	{
		if(Manager->funcs[i].Type == data[0])
 4b2:	8d 91       	ld	r24, X+
 4b4:	9c 91       	ld	r25, X
 4b6:	11 97       	sbiw	r26, 0x01	; 1
 4b8:	f9 01       	movw	r30, r18
 4ba:	ee 0f       	add	r30, r30
 4bc:	ff 1f       	adc	r31, r31
 4be:	e2 0f       	add	r30, r18
 4c0:	f3 1f       	adc	r31, r19
 4c2:	e8 0f       	add	r30, r24
 4c4:	f9 1f       	adc	r31, r25
 4c6:	90 81       	ld	r25, Z
 4c8:	88 81       	ld	r24, Y
 4ca:	98 13       	cpse	r25, r24
 4cc:	09 c0       	rjmp	.+18     	; 0x4e0 <CommandProcess+0x3c>
		{
			Manager->funcs[i].Func(data[0], data[1], &data[2]);
 4ce:	01 80       	ldd	r0, Z+1	; 0x01
 4d0:	f2 81       	ldd	r31, Z+2	; 0x02
 4d2:	e0 2d       	mov	r30, r0
 4d4:	ae 01       	movw	r20, r28
 4d6:	4e 5f       	subi	r20, 0xFE	; 254
 4d8:	5f 4f       	sbci	r21, 0xFF	; 255
 4da:	69 81       	ldd	r22, Y+1	; 0x01
 4dc:	09 95       	icall
			return;
 4de:	09 c0       	rjmp	.+18     	; 0x4f2 <CommandProcess+0x4e>
	Manager->funcs[Manager->count - 1] = (CommandRow){ Type, Func };
}

void CommandProcess(CommandManager* Manager, uint8_t* data, uint16_t length)
{
	for(int i = 0; i < Manager->count; i++)
 4e0:	2f 5f       	subi	r18, 0xFF	; 255
 4e2:	3f 4f       	sbci	r19, 0xFF	; 255
 4e4:	12 96       	adiw	r26, 0x02	; 2
 4e6:	4c 91       	ld	r20, X
 4e8:	12 97       	sbiw	r26, 0x02	; 2
 4ea:	50 e0       	ldi	r21, 0x00	; 0
 4ec:	24 17       	cp	r18, r20
 4ee:	35 07       	cpc	r19, r21
 4f0:	04 f3       	brlt	.-64     	; 0x4b2 <CommandProcess+0xe>
		{
			Manager->funcs[i].Func(data[0], data[1], &data[2]);
			return;
		}
	}
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <__udivmodsi4>:
 4f8:	a1 e2       	ldi	r26, 0x21	; 33
 4fa:	1a 2e       	mov	r1, r26
 4fc:	aa 1b       	sub	r26, r26
 4fe:	bb 1b       	sub	r27, r27
 500:	fd 01       	movw	r30, r26
 502:	0d c0       	rjmp	.+26     	; 0x51e <__udivmodsi4_ep>

00000504 <__udivmodsi4_loop>:
 504:	aa 1f       	adc	r26, r26
 506:	bb 1f       	adc	r27, r27
 508:	ee 1f       	adc	r30, r30
 50a:	ff 1f       	adc	r31, r31
 50c:	a2 17       	cp	r26, r18
 50e:	b3 07       	cpc	r27, r19
 510:	e4 07       	cpc	r30, r20
 512:	f5 07       	cpc	r31, r21
 514:	20 f0       	brcs	.+8      	; 0x51e <__udivmodsi4_ep>
 516:	a2 1b       	sub	r26, r18
 518:	b3 0b       	sbc	r27, r19
 51a:	e4 0b       	sbc	r30, r20
 51c:	f5 0b       	sbc	r31, r21

0000051e <__udivmodsi4_ep>:
 51e:	66 1f       	adc	r22, r22
 520:	77 1f       	adc	r23, r23
 522:	88 1f       	adc	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	1a 94       	dec	r1
 528:	69 f7       	brne	.-38     	; 0x504 <__udivmodsi4_loop>
 52a:	60 95       	com	r22
 52c:	70 95       	com	r23
 52e:	80 95       	com	r24
 530:	90 95       	com	r25
 532:	9b 01       	movw	r18, r22
 534:	ac 01       	movw	r20, r24
 536:	bd 01       	movw	r22, r26
 538:	cf 01       	movw	r24, r30
 53a:	08 95       	ret

0000053c <__muluhisi3>:
 53c:	0e 94 a9 02 	call	0x552	; 0x552 <__umulhisi3>
 540:	a5 9f       	mul	r26, r21
 542:	90 0d       	add	r25, r0
 544:	b4 9f       	mul	r27, r20
 546:	90 0d       	add	r25, r0
 548:	a4 9f       	mul	r26, r20
 54a:	80 0d       	add	r24, r0
 54c:	91 1d       	adc	r25, r1
 54e:	11 24       	eor	r1, r1
 550:	08 95       	ret

00000552 <__umulhisi3>:
 552:	a2 9f       	mul	r26, r18
 554:	b0 01       	movw	r22, r0
 556:	b3 9f       	mul	r27, r19
 558:	c0 01       	movw	r24, r0
 55a:	a3 9f       	mul	r26, r19
 55c:	70 0d       	add	r23, r0
 55e:	81 1d       	adc	r24, r1
 560:	11 24       	eor	r1, r1
 562:	91 1d       	adc	r25, r1
 564:	b2 9f       	mul	r27, r18
 566:	70 0d       	add	r23, r0
 568:	81 1d       	adc	r24, r1
 56a:	11 24       	eor	r1, r1
 56c:	91 1d       	adc	r25, r1
 56e:	08 95       	ret

00000570 <malloc>:
 570:	0f 93       	push	r16
 572:	1f 93       	push	r17
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	82 30       	cpi	r24, 0x02	; 2
 57a:	91 05       	cpc	r25, r1
 57c:	10 f4       	brcc	.+4      	; 0x582 <malloc+0x12>
 57e:	82 e0       	ldi	r24, 0x02	; 2
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <__flp>
 586:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <__flp+0x1>
 58a:	20 e0       	ldi	r18, 0x00	; 0
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	a0 e0       	ldi	r26, 0x00	; 0
 590:	b0 e0       	ldi	r27, 0x00	; 0
 592:	30 97       	sbiw	r30, 0x00	; 0
 594:	19 f1       	breq	.+70     	; 0x5dc <malloc+0x6c>
 596:	40 81       	ld	r20, Z
 598:	51 81       	ldd	r21, Z+1	; 0x01
 59a:	02 81       	ldd	r16, Z+2	; 0x02
 59c:	13 81       	ldd	r17, Z+3	; 0x03
 59e:	48 17       	cp	r20, r24
 5a0:	59 07       	cpc	r21, r25
 5a2:	c8 f0       	brcs	.+50     	; 0x5d6 <malloc+0x66>
 5a4:	84 17       	cp	r24, r20
 5a6:	95 07       	cpc	r25, r21
 5a8:	69 f4       	brne	.+26     	; 0x5c4 <malloc+0x54>
 5aa:	10 97       	sbiw	r26, 0x00	; 0
 5ac:	31 f0       	breq	.+12     	; 0x5ba <malloc+0x4a>
 5ae:	12 96       	adiw	r26, 0x02	; 2
 5b0:	0c 93       	st	X, r16
 5b2:	12 97       	sbiw	r26, 0x02	; 2
 5b4:	13 96       	adiw	r26, 0x03	; 3
 5b6:	1c 93       	st	X, r17
 5b8:	27 c0       	rjmp	.+78     	; 0x608 <malloc+0x98>
 5ba:	00 93 9e 01 	sts	0x019E, r16	; 0x80019e <__flp>
 5be:	10 93 9f 01 	sts	0x019F, r17	; 0x80019f <__flp+0x1>
 5c2:	22 c0       	rjmp	.+68     	; 0x608 <malloc+0x98>
 5c4:	21 15       	cp	r18, r1
 5c6:	31 05       	cpc	r19, r1
 5c8:	19 f0       	breq	.+6      	; 0x5d0 <malloc+0x60>
 5ca:	42 17       	cp	r20, r18
 5cc:	53 07       	cpc	r21, r19
 5ce:	18 f4       	brcc	.+6      	; 0x5d6 <malloc+0x66>
 5d0:	9a 01       	movw	r18, r20
 5d2:	bd 01       	movw	r22, r26
 5d4:	ef 01       	movw	r28, r30
 5d6:	df 01       	movw	r26, r30
 5d8:	f8 01       	movw	r30, r16
 5da:	db cf       	rjmp	.-74     	; 0x592 <malloc+0x22>
 5dc:	21 15       	cp	r18, r1
 5de:	31 05       	cpc	r19, r1
 5e0:	f9 f0       	breq	.+62     	; 0x620 <malloc+0xb0>
 5e2:	28 1b       	sub	r18, r24
 5e4:	39 0b       	sbc	r19, r25
 5e6:	24 30       	cpi	r18, 0x04	; 4
 5e8:	31 05       	cpc	r19, r1
 5ea:	80 f4       	brcc	.+32     	; 0x60c <malloc+0x9c>
 5ec:	8a 81       	ldd	r24, Y+2	; 0x02
 5ee:	9b 81       	ldd	r25, Y+3	; 0x03
 5f0:	61 15       	cp	r22, r1
 5f2:	71 05       	cpc	r23, r1
 5f4:	21 f0       	breq	.+8      	; 0x5fe <malloc+0x8e>
 5f6:	fb 01       	movw	r30, r22
 5f8:	93 83       	std	Z+3, r25	; 0x03
 5fa:	82 83       	std	Z+2, r24	; 0x02
 5fc:	04 c0       	rjmp	.+8      	; 0x606 <malloc+0x96>
 5fe:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <__flp+0x1>
 602:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <__flp>
 606:	fe 01       	movw	r30, r28
 608:	32 96       	adiw	r30, 0x02	; 2
 60a:	44 c0       	rjmp	.+136    	; 0x694 <malloc+0x124>
 60c:	fe 01       	movw	r30, r28
 60e:	e2 0f       	add	r30, r18
 610:	f3 1f       	adc	r31, r19
 612:	81 93       	st	Z+, r24
 614:	91 93       	st	Z+, r25
 616:	22 50       	subi	r18, 0x02	; 2
 618:	31 09       	sbc	r19, r1
 61a:	39 83       	std	Y+1, r19	; 0x01
 61c:	28 83       	st	Y, r18
 61e:	3a c0       	rjmp	.+116    	; 0x694 <malloc+0x124>
 620:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <__brkval>
 624:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <__brkval+0x1>
 628:	23 2b       	or	r18, r19
 62a:	41 f4       	brne	.+16     	; 0x63c <malloc+0xcc>
 62c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 630:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 634:	30 93 9d 01 	sts	0x019D, r19	; 0x80019d <__brkval+0x1>
 638:	20 93 9c 01 	sts	0x019C, r18	; 0x80019c <__brkval>
 63c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 640:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 644:	21 15       	cp	r18, r1
 646:	31 05       	cpc	r19, r1
 648:	41 f4       	brne	.+16     	; 0x65a <malloc+0xea>
 64a:	2d b7       	in	r18, 0x3d	; 61
 64c:	3e b7       	in	r19, 0x3e	; 62
 64e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 652:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 656:	24 1b       	sub	r18, r20
 658:	35 0b       	sbc	r19, r21
 65a:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <__brkval>
 65e:	f0 91 9d 01 	lds	r31, 0x019D	; 0x80019d <__brkval+0x1>
 662:	e2 17       	cp	r30, r18
 664:	f3 07       	cpc	r31, r19
 666:	a0 f4       	brcc	.+40     	; 0x690 <malloc+0x120>
 668:	2e 1b       	sub	r18, r30
 66a:	3f 0b       	sbc	r19, r31
 66c:	28 17       	cp	r18, r24
 66e:	39 07       	cpc	r19, r25
 670:	78 f0       	brcs	.+30     	; 0x690 <malloc+0x120>
 672:	ac 01       	movw	r20, r24
 674:	4e 5f       	subi	r20, 0xFE	; 254
 676:	5f 4f       	sbci	r21, 0xFF	; 255
 678:	24 17       	cp	r18, r20
 67a:	35 07       	cpc	r19, r21
 67c:	48 f0       	brcs	.+18     	; 0x690 <malloc+0x120>
 67e:	4e 0f       	add	r20, r30
 680:	5f 1f       	adc	r21, r31
 682:	50 93 9d 01 	sts	0x019D, r21	; 0x80019d <__brkval+0x1>
 686:	40 93 9c 01 	sts	0x019C, r20	; 0x80019c <__brkval>
 68a:	81 93       	st	Z+, r24
 68c:	91 93       	st	Z+, r25
 68e:	02 c0       	rjmp	.+4      	; 0x694 <malloc+0x124>
 690:	e0 e0       	ldi	r30, 0x00	; 0
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	cf 01       	movw	r24, r30
 696:	df 91       	pop	r29
 698:	cf 91       	pop	r28
 69a:	1f 91       	pop	r17
 69c:	0f 91       	pop	r16
 69e:	08 95       	ret

000006a0 <free>:
 6a0:	cf 93       	push	r28
 6a2:	df 93       	push	r29
 6a4:	00 97       	sbiw	r24, 0x00	; 0
 6a6:	09 f4       	brne	.+2      	; 0x6aa <free+0xa>
 6a8:	81 c0       	rjmp	.+258    	; 0x7ac <free+0x10c>
 6aa:	fc 01       	movw	r30, r24
 6ac:	32 97       	sbiw	r30, 0x02	; 2
 6ae:	13 82       	std	Z+3, r1	; 0x03
 6b0:	12 82       	std	Z+2, r1	; 0x02
 6b2:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <__flp>
 6b6:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <__flp+0x1>
 6ba:	10 97       	sbiw	r26, 0x00	; 0
 6bc:	81 f4       	brne	.+32     	; 0x6de <free+0x3e>
 6be:	20 81       	ld	r18, Z
 6c0:	31 81       	ldd	r19, Z+1	; 0x01
 6c2:	82 0f       	add	r24, r18
 6c4:	93 1f       	adc	r25, r19
 6c6:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <__brkval>
 6ca:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <__brkval+0x1>
 6ce:	28 17       	cp	r18, r24
 6d0:	39 07       	cpc	r19, r25
 6d2:	51 f5       	brne	.+84     	; 0x728 <free+0x88>
 6d4:	f0 93 9d 01 	sts	0x019D, r31	; 0x80019d <__brkval+0x1>
 6d8:	e0 93 9c 01 	sts	0x019C, r30	; 0x80019c <__brkval>
 6dc:	67 c0       	rjmp	.+206    	; 0x7ac <free+0x10c>
 6de:	ed 01       	movw	r28, r26
 6e0:	20 e0       	ldi	r18, 0x00	; 0
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	ce 17       	cp	r28, r30
 6e6:	df 07       	cpc	r29, r31
 6e8:	40 f4       	brcc	.+16     	; 0x6fa <free+0x5a>
 6ea:	4a 81       	ldd	r20, Y+2	; 0x02
 6ec:	5b 81       	ldd	r21, Y+3	; 0x03
 6ee:	9e 01       	movw	r18, r28
 6f0:	41 15       	cp	r20, r1
 6f2:	51 05       	cpc	r21, r1
 6f4:	f1 f0       	breq	.+60     	; 0x732 <free+0x92>
 6f6:	ea 01       	movw	r28, r20
 6f8:	f5 cf       	rjmp	.-22     	; 0x6e4 <free+0x44>
 6fa:	d3 83       	std	Z+3, r29	; 0x03
 6fc:	c2 83       	std	Z+2, r28	; 0x02
 6fe:	40 81       	ld	r20, Z
 700:	51 81       	ldd	r21, Z+1	; 0x01
 702:	84 0f       	add	r24, r20
 704:	95 1f       	adc	r25, r21
 706:	c8 17       	cp	r28, r24
 708:	d9 07       	cpc	r29, r25
 70a:	59 f4       	brne	.+22     	; 0x722 <free+0x82>
 70c:	88 81       	ld	r24, Y
 70e:	99 81       	ldd	r25, Y+1	; 0x01
 710:	84 0f       	add	r24, r20
 712:	95 1f       	adc	r25, r21
 714:	02 96       	adiw	r24, 0x02	; 2
 716:	91 83       	std	Z+1, r25	; 0x01
 718:	80 83       	st	Z, r24
 71a:	8a 81       	ldd	r24, Y+2	; 0x02
 71c:	9b 81       	ldd	r25, Y+3	; 0x03
 71e:	93 83       	std	Z+3, r25	; 0x03
 720:	82 83       	std	Z+2, r24	; 0x02
 722:	21 15       	cp	r18, r1
 724:	31 05       	cpc	r19, r1
 726:	29 f4       	brne	.+10     	; 0x732 <free+0x92>
 728:	f0 93 9f 01 	sts	0x019F, r31	; 0x80019f <__flp+0x1>
 72c:	e0 93 9e 01 	sts	0x019E, r30	; 0x80019e <__flp>
 730:	3d c0       	rjmp	.+122    	; 0x7ac <free+0x10c>
 732:	e9 01       	movw	r28, r18
 734:	fb 83       	std	Y+3, r31	; 0x03
 736:	ea 83       	std	Y+2, r30	; 0x02
 738:	49 91       	ld	r20, Y+
 73a:	59 91       	ld	r21, Y+
 73c:	c4 0f       	add	r28, r20
 73e:	d5 1f       	adc	r29, r21
 740:	ec 17       	cp	r30, r28
 742:	fd 07       	cpc	r31, r29
 744:	61 f4       	brne	.+24     	; 0x75e <free+0xbe>
 746:	80 81       	ld	r24, Z
 748:	91 81       	ldd	r25, Z+1	; 0x01
 74a:	84 0f       	add	r24, r20
 74c:	95 1f       	adc	r25, r21
 74e:	02 96       	adiw	r24, 0x02	; 2
 750:	e9 01       	movw	r28, r18
 752:	99 83       	std	Y+1, r25	; 0x01
 754:	88 83       	st	Y, r24
 756:	82 81       	ldd	r24, Z+2	; 0x02
 758:	93 81       	ldd	r25, Z+3	; 0x03
 75a:	9b 83       	std	Y+3, r25	; 0x03
 75c:	8a 83       	std	Y+2, r24	; 0x02
 75e:	e0 e0       	ldi	r30, 0x00	; 0
 760:	f0 e0       	ldi	r31, 0x00	; 0
 762:	12 96       	adiw	r26, 0x02	; 2
 764:	8d 91       	ld	r24, X+
 766:	9c 91       	ld	r25, X
 768:	13 97       	sbiw	r26, 0x03	; 3
 76a:	00 97       	sbiw	r24, 0x00	; 0
 76c:	19 f0       	breq	.+6      	; 0x774 <free+0xd4>
 76e:	fd 01       	movw	r30, r26
 770:	dc 01       	movw	r26, r24
 772:	f7 cf       	rjmp	.-18     	; 0x762 <free+0xc2>
 774:	8d 91       	ld	r24, X+
 776:	9c 91       	ld	r25, X
 778:	11 97       	sbiw	r26, 0x01	; 1
 77a:	9d 01       	movw	r18, r26
 77c:	2e 5f       	subi	r18, 0xFE	; 254
 77e:	3f 4f       	sbci	r19, 0xFF	; 255
 780:	82 0f       	add	r24, r18
 782:	93 1f       	adc	r25, r19
 784:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <__brkval>
 788:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <__brkval+0x1>
 78c:	28 17       	cp	r18, r24
 78e:	39 07       	cpc	r19, r25
 790:	69 f4       	brne	.+26     	; 0x7ac <free+0x10c>
 792:	30 97       	sbiw	r30, 0x00	; 0
 794:	29 f4       	brne	.+10     	; 0x7a0 <free+0x100>
 796:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <__flp+0x1>
 79a:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <__flp>
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <free+0x104>
 7a0:	13 82       	std	Z+3, r1	; 0x03
 7a2:	12 82       	std	Z+2, r1	; 0x02
 7a4:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <__brkval+0x1>
 7a8:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <__brkval>
 7ac:	df 91       	pop	r29
 7ae:	cf 91       	pop	r28
 7b0:	08 95       	ret

000007b2 <realloc>:
 7b2:	a0 e0       	ldi	r26, 0x00	; 0
 7b4:	b0 e0       	ldi	r27, 0x00	; 0
 7b6:	ef ed       	ldi	r30, 0xDF	; 223
 7b8:	f3 e0       	ldi	r31, 0x03	; 3
 7ba:	0c 94 ac 04 	jmp	0x958	; 0x958 <__prologue_saves__+0x8>
 7be:	ec 01       	movw	r28, r24
 7c0:	00 97       	sbiw	r24, 0x00	; 0
 7c2:	21 f4       	brne	.+8      	; 0x7cc <realloc+0x1a>
 7c4:	cb 01       	movw	r24, r22
 7c6:	0e 94 b8 02 	call	0x570	; 0x570 <malloc>
 7ca:	b4 c0       	rjmp	.+360    	; 0x934 <__stack+0x35>
 7cc:	fc 01       	movw	r30, r24
 7ce:	e6 0f       	add	r30, r22
 7d0:	f7 1f       	adc	r31, r23
 7d2:	9c 01       	movw	r18, r24
 7d4:	22 50       	subi	r18, 0x02	; 2
 7d6:	31 09       	sbc	r19, r1
 7d8:	e2 17       	cp	r30, r18
 7da:	f3 07       	cpc	r31, r19
 7dc:	08 f4       	brcc	.+2      	; 0x7e0 <realloc+0x2e>
 7de:	a8 c0       	rjmp	.+336    	; 0x930 <__stack+0x31>
 7e0:	d9 01       	movw	r26, r18
 7e2:	0d 91       	ld	r16, X+
 7e4:	1c 91       	ld	r17, X
 7e6:	11 97       	sbiw	r26, 0x01	; 1
 7e8:	06 17       	cp	r16, r22
 7ea:	17 07       	cpc	r17, r23
 7ec:	b0 f0       	brcs	.+44     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7ee:	05 30       	cpi	r16, 0x05	; 5
 7f0:	11 05       	cpc	r17, r1
 7f2:	08 f4       	brcc	.+2      	; 0x7f6 <realloc+0x44>
 7f4:	9b c0       	rjmp	.+310    	; 0x92c <__stack+0x2d>
 7f6:	c8 01       	movw	r24, r16
 7f8:	04 97       	sbiw	r24, 0x04	; 4
 7fa:	86 17       	cp	r24, r22
 7fc:	97 07       	cpc	r25, r23
 7fe:	08 f4       	brcc	.+2      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 800:	95 c0       	rjmp	.+298    	; 0x92c <__stack+0x2d>
 802:	02 50       	subi	r16, 0x02	; 2
 804:	11 09       	sbc	r17, r1
 806:	06 1b       	sub	r16, r22
 808:	17 0b       	sbc	r17, r23
 80a:	01 93       	st	Z+, r16
 80c:	11 93       	st	Z+, r17
 80e:	6d 93       	st	X+, r22
 810:	7c 93       	st	X, r23
 812:	cf 01       	movw	r24, r30
 814:	0e 94 50 03 	call	0x6a0	; 0x6a0 <free>
 818:	89 c0       	rjmp	.+274    	; 0x92c <__stack+0x2d>
 81a:	5b 01       	movw	r10, r22
 81c:	a0 1a       	sub	r10, r16
 81e:	b1 0a       	sbc	r11, r17
 820:	4c 01       	movw	r8, r24
 822:	80 0e       	add	r8, r16
 824:	91 1e       	adc	r9, r17
 826:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <__flp>
 82a:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <__flp+0x1>
 82e:	61 2c       	mov	r6, r1
 830:	71 2c       	mov	r7, r1
 832:	e1 2c       	mov	r14, r1
 834:	f1 2c       	mov	r15, r1
 836:	10 97       	sbiw	r26, 0x00	; 0
 838:	09 f4       	brne	.+2      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 83a:	46 c0       	rjmp	.+140    	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 83c:	8d 91       	ld	r24, X+
 83e:	9c 91       	ld	r25, X
 840:	11 97       	sbiw	r26, 0x01	; 1
 842:	a8 15       	cp	r26, r8
 844:	b9 05       	cpc	r27, r9
 846:	b1 f5       	brne	.+108    	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
 848:	6c 01       	movw	r12, r24
 84a:	42 e0       	ldi	r20, 0x02	; 2
 84c:	c4 0e       	add	r12, r20
 84e:	d1 1c       	adc	r13, r1
 850:	ca 14       	cp	r12, r10
 852:	db 04       	cpc	r13, r11
 854:	78 f1       	brcs	.+94     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
 856:	4c 01       	movw	r8, r24
 858:	8a 18       	sub	r8, r10
 85a:	9b 08       	sbc	r9, r11
 85c:	64 01       	movw	r12, r8
 85e:	42 e0       	ldi	r20, 0x02	; 2
 860:	c4 0e       	add	r12, r20
 862:	d1 1c       	adc	r13, r1
 864:	12 96       	adiw	r26, 0x02	; 2
 866:	bc 90       	ld	r11, X
 868:	12 97       	sbiw	r26, 0x02	; 2
 86a:	13 96       	adiw	r26, 0x03	; 3
 86c:	ac 91       	ld	r26, X
 86e:	b5 e0       	ldi	r27, 0x05	; 5
 870:	cb 16       	cp	r12, r27
 872:	d1 04       	cpc	r13, r1
 874:	40 f0       	brcs	.+16     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
 876:	b2 82       	std	Z+2, r11	; 0x02
 878:	a3 83       	std	Z+3, r26	; 0x03
 87a:	91 82       	std	Z+1, r9	; 0x01
 87c:	80 82       	st	Z, r8
 87e:	d9 01       	movw	r26, r18
 880:	6d 93       	st	X+, r22
 882:	7c 93       	st	X, r23
 884:	09 c0       	rjmp	.+18     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 886:	0e 5f       	subi	r16, 0xFE	; 254
 888:	1f 4f       	sbci	r17, 0xFF	; 255
 88a:	80 0f       	add	r24, r16
 88c:	91 1f       	adc	r25, r17
 88e:	f9 01       	movw	r30, r18
 890:	91 83       	std	Z+1, r25	; 0x01
 892:	80 83       	st	Z, r24
 894:	eb 2d       	mov	r30, r11
 896:	fa 2f       	mov	r31, r26
 898:	e1 14       	cp	r14, r1
 89a:	f1 04       	cpc	r15, r1
 89c:	31 f0       	breq	.+12     	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
 89e:	d7 01       	movw	r26, r14
 8a0:	13 96       	adiw	r26, 0x03	; 3
 8a2:	fc 93       	st	X, r31
 8a4:	ee 93       	st	-X, r30
 8a6:	12 97       	sbiw	r26, 0x02	; 2
 8a8:	41 c0       	rjmp	.+130    	; 0x92c <__stack+0x2d>
 8aa:	f0 93 9f 01 	sts	0x019F, r31	; 0x80019f <__flp+0x1>
 8ae:	e0 93 9e 01 	sts	0x019E, r30	; 0x80019e <__flp>
 8b2:	3c c0       	rjmp	.+120    	; 0x92c <__stack+0x2d>
 8b4:	68 16       	cp	r6, r24
 8b6:	79 06       	cpc	r7, r25
 8b8:	08 f4       	brcc	.+2      	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
 8ba:	3c 01       	movw	r6, r24
 8bc:	7d 01       	movw	r14, r26
 8be:	12 96       	adiw	r26, 0x02	; 2
 8c0:	0d 90       	ld	r0, X+
 8c2:	bc 91       	ld	r27, X
 8c4:	a0 2d       	mov	r26, r0
 8c6:	b7 cf       	rjmp	.-146    	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 8c8:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <__brkval>
 8cc:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <__brkval+0x1>
 8d0:	88 16       	cp	r8, r24
 8d2:	99 06       	cpc	r9, r25
 8d4:	e1 f4       	brne	.+56     	; 0x90e <__stack+0xf>
 8d6:	66 16       	cp	r6, r22
 8d8:	77 06       	cpc	r7, r23
 8da:	c8 f4       	brcc	.+50     	; 0x90e <__stack+0xf>
 8dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 8e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 8e4:	00 97       	sbiw	r24, 0x00	; 0
 8e6:	41 f4       	brne	.+16     	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
 8e8:	8d b7       	in	r24, 0x3d	; 61
 8ea:	9e b7       	in	r25, 0x3e	; 62
 8ec:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 8f0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 8f4:	84 1b       	sub	r24, r20
 8f6:	95 0b       	sbc	r25, r21
 8f8:	e8 17       	cp	r30, r24
 8fa:	f9 07       	cpc	r31, r25
 8fc:	c8 f4       	brcc	.+50     	; 0x930 <__stack+0x31>
 8fe:	f0 93 9d 01 	sts	0x019D, r31	; 0x80019d <__brkval+0x1>
 902:	e0 93 9c 01 	sts	0x019C, r30	; 0x80019c <__brkval>
 906:	f9 01       	movw	r30, r18
 908:	71 83       	std	Z+1, r23	; 0x01
 90a:	60 83       	st	Z, r22
 90c:	0f c0       	rjmp	.+30     	; 0x92c <__stack+0x2d>
 90e:	cb 01       	movw	r24, r22
 910:	0e 94 b8 02 	call	0x570	; 0x570 <malloc>
 914:	7c 01       	movw	r14, r24
 916:	00 97       	sbiw	r24, 0x00	; 0
 918:	59 f0       	breq	.+22     	; 0x930 <__stack+0x31>
 91a:	a8 01       	movw	r20, r16
 91c:	be 01       	movw	r22, r28
 91e:	0e 94 9f 04 	call	0x93e	; 0x93e <memcpy>
 922:	ce 01       	movw	r24, r28
 924:	0e 94 50 03 	call	0x6a0	; 0x6a0 <free>
 928:	c7 01       	movw	r24, r14
 92a:	04 c0       	rjmp	.+8      	; 0x934 <__stack+0x35>
 92c:	ce 01       	movw	r24, r28
 92e:	02 c0       	rjmp	.+4      	; 0x934 <__stack+0x35>
 930:	80 e0       	ldi	r24, 0x00	; 0
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	cd b7       	in	r28, 0x3d	; 61
 936:	de b7       	in	r29, 0x3e	; 62
 938:	ee e0       	ldi	r30, 0x0E	; 14
 93a:	0c 94 c8 04 	jmp	0x990	; 0x990 <__epilogue_restores__+0x8>

0000093e <memcpy>:
 93e:	fb 01       	movw	r30, r22
 940:	dc 01       	movw	r26, r24
 942:	02 c0       	rjmp	.+4      	; 0x948 <memcpy+0xa>
 944:	01 90       	ld	r0, Z+
 946:	0d 92       	st	X+, r0
 948:	41 50       	subi	r20, 0x01	; 1
 94a:	50 40       	sbci	r21, 0x00	; 0
 94c:	d8 f7       	brcc	.-10     	; 0x944 <memcpy+0x6>
 94e:	08 95       	ret

00000950 <__prologue_saves__>:
 950:	2f 92       	push	r2
 952:	3f 92       	push	r3
 954:	4f 92       	push	r4
 956:	5f 92       	push	r5
 958:	6f 92       	push	r6
 95a:	7f 92       	push	r7
 95c:	8f 92       	push	r8
 95e:	9f 92       	push	r9
 960:	af 92       	push	r10
 962:	bf 92       	push	r11
 964:	cf 92       	push	r12
 966:	df 92       	push	r13
 968:	ef 92       	push	r14
 96a:	ff 92       	push	r15
 96c:	0f 93       	push	r16
 96e:	1f 93       	push	r17
 970:	cf 93       	push	r28
 972:	df 93       	push	r29
 974:	cd b7       	in	r28, 0x3d	; 61
 976:	de b7       	in	r29, 0x3e	; 62
 978:	ca 1b       	sub	r28, r26
 97a:	db 0b       	sbc	r29, r27
 97c:	0f b6       	in	r0, 0x3f	; 63
 97e:	f8 94       	cli
 980:	de bf       	out	0x3e, r29	; 62
 982:	0f be       	out	0x3f, r0	; 63
 984:	cd bf       	out	0x3d, r28	; 61
 986:	09 94       	ijmp

00000988 <__epilogue_restores__>:
 988:	2a 88       	ldd	r2, Y+18	; 0x12
 98a:	39 88       	ldd	r3, Y+17	; 0x11
 98c:	48 88       	ldd	r4, Y+16	; 0x10
 98e:	5f 84       	ldd	r5, Y+15	; 0x0f
 990:	6e 84       	ldd	r6, Y+14	; 0x0e
 992:	7d 84       	ldd	r7, Y+13	; 0x0d
 994:	8c 84       	ldd	r8, Y+12	; 0x0c
 996:	9b 84       	ldd	r9, Y+11	; 0x0b
 998:	aa 84       	ldd	r10, Y+10	; 0x0a
 99a:	b9 84       	ldd	r11, Y+9	; 0x09
 99c:	c8 84       	ldd	r12, Y+8	; 0x08
 99e:	df 80       	ldd	r13, Y+7	; 0x07
 9a0:	ee 80       	ldd	r14, Y+6	; 0x06
 9a2:	fd 80       	ldd	r15, Y+5	; 0x05
 9a4:	0c 81       	ldd	r16, Y+4	; 0x04
 9a6:	1b 81       	ldd	r17, Y+3	; 0x03
 9a8:	aa 81       	ldd	r26, Y+2	; 0x02
 9aa:	b9 81       	ldd	r27, Y+1	; 0x01
 9ac:	ce 0f       	add	r28, r30
 9ae:	d1 1d       	adc	r29, r1
 9b0:	0f b6       	in	r0, 0x3f	; 63
 9b2:	f8 94       	cli
 9b4:	de bf       	out	0x3e, r29	; 62
 9b6:	0f be       	out	0x3f, r0	; 63
 9b8:	cd bf       	out	0x3d, r28	; 61
 9ba:	ed 01       	movw	r28, r26
 9bc:	08 95       	ret

000009be <_exit>:
 9be:	f8 94       	cli

000009c0 <__stop_program>:
 9c0:	ff cf       	rjmp	.-2      	; 0x9c0 <__stop_program>
