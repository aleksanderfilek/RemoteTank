
TransmitterCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000012a8  0000133c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009e  00800108  00800108  00001344  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001344  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001374  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002aed  00000000  00000000  000015fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001015  00000000  00000000  000040e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012ae  00000000  00000000  000050fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d8  00000000  00000000  000063ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d7  00000000  00000000  00006a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d80  00000000  00000000  0000745b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  000091db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 26 02 	jmp	0x44c	; 0x44c <__vector_14>
      3c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__vector_15>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <__vector_17>
      48:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 05 03 	jmp	0x60a	; 0x60a <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ea       	ldi	r30, 0xA8	; 168
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 30       	cpi	r26, 0x08	; 8
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a8 e0       	ldi	r26, 0x08	; 8
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 3a       	cpi	r26, 0xA6	; 166
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 65 01 	call	0x2ca	; 0x2ca <main>
      9e:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <AudioInit>:
#include <avr/io.h>
#include <util/delay.h>

void AudioInit()
{
	DDRC |= (1<<DDC4);
      a6:	87 b1       	in	r24, 0x07	; 7
      a8:	80 61       	ori	r24, 0x10	; 16
      aa:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1<<DDC4);
      ac:	88 b1       	in	r24, 0x08	; 8
      ae:	8f 7e       	andi	r24, 0xEF	; 239
      b0:	88 b9       	out	0x08, r24	; 8
      b2:	08 95       	ret

000000b4 <AudioBeep>:
}

void AudioBeep(int number)
{
      b4:	ac 01       	movw	r20, r24
	for(int i = 0; i < number; i++)
      b6:	20 e0       	ldi	r18, 0x00	; 0
      b8:	30 e0       	ldi	r19, 0x00	; 0
      ba:	1f c0       	rjmp	.+62     	; 0xfa <AudioBeep+0x46>
	{
		PORTC |= (1<<DDC4);
      bc:	98 b1       	in	r25, 0x08	; 8
      be:	90 61       	ori	r25, 0x10	; 16
      c0:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      c2:	6f ef       	ldi	r22, 0xFF	; 255
      c4:	83 ec       	ldi	r24, 0xC3	; 195
      c6:	99 e0       	ldi	r25, 0x09	; 9
      c8:	61 50       	subi	r22, 0x01	; 1
      ca:	80 40       	sbci	r24, 0x00	; 0
      cc:	90 40       	sbci	r25, 0x00	; 0
      ce:	e1 f7       	brne	.-8      	; 0xc8 <AudioBeep+0x14>
      d0:	00 c0       	rjmp	.+0      	; 0xd2 <AudioBeep+0x1e>
      d2:	00 00       	nop
		_delay_ms(200);
		PORTC &= ~(1<<DDC4);
      d4:	98 b1       	in	r25, 0x08	; 8
      d6:	9f 7e       	andi	r25, 0xEF	; 239
      d8:	98 b9       	out	0x08, r25	; 8
		if(i < number - 1)
      da:	ca 01       	movw	r24, r20
      dc:	01 97       	sbiw	r24, 0x01	; 1
      de:	28 17       	cp	r18, r24
      e0:	39 07       	cpc	r19, r25
      e2:	4c f4       	brge	.+18     	; 0xf6 <AudioBeep+0x42>
      e4:	6f ef       	ldi	r22, 0xFF	; 255
      e6:	81 ee       	ldi	r24, 0xE1	; 225
      e8:	94 e0       	ldi	r25, 0x04	; 4
      ea:	61 50       	subi	r22, 0x01	; 1
      ec:	80 40       	sbci	r24, 0x00	; 0
      ee:	90 40       	sbci	r25, 0x00	; 0
      f0:	e1 f7       	brne	.-8      	; 0xea <AudioBeep+0x36>
      f2:	00 c0       	rjmp	.+0      	; 0xf4 <AudioBeep+0x40>
      f4:	00 00       	nop
	PORTC &= ~(1<<DDC4);
}

void AudioBeep(int number)
{
	for(int i = 0; i < number; i++)
      f6:	2f 5f       	subi	r18, 0xFF	; 255
      f8:	3f 4f       	sbci	r19, 0xFF	; 255
      fa:	24 17       	cp	r18, r20
      fc:	35 07       	cpc	r19, r21
      fe:	f4 f2       	brlt	.-68     	; 0xbc <AudioBeep+0x8>
		_delay_ms(200);
		PORTC &= ~(1<<DDC4);
		if(i < number - 1)
			_delay_ms(100);
	}
     100:	08 95       	ret

00000102 <CallbackUart>:
		
	CommandDestroy(commandManagerRef);
}

void CallbackUart(uint8_t* data, uint16_t length)
{
     102:	ab 01       	movw	r20, r22
	CommandProcess(commandManagerRef, data, length);
     104:	bc 01       	movw	r22, r24
     106:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <commandManagerRef>
     10a:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <commandManagerRef+0x1>
     10e:	0e 94 df 06 	call	0xdbe	; 0xdbe <CommandProcess>
     112:	08 95       	ret

00000114 <OnConnect>:
}

void OnConnect(CommandType Type, CommandStatus Status, uint8_t* data)
{
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
     118:	ea 01       	movw	r28, r20
	AudioBeep(1);
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <AudioBeep>
	if(Nrf24Write(radioRef, data, COMMAND_LENGTH) == 0)
     122:	40 e2       	ldi	r20, 0x20	; 32
     124:	be 01       	movw	r22, r28
     126:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <radioRef>
     12a:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <radioRef+0x1>
     12e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <Nrf24Write>
     132:	81 11       	cpse	r24, r1
     134:	08 c0       	rjmp	.+16     	; 0x146 <OnConnect+0x32>
	{
		data[1] = CMDS_FAILED;
     136:	82 e0       	ldi	r24, 0x02	; 2
     138:	89 83       	std	Y+1, r24	; 0x01
		UartArraySend(data, COMMAND_LENGTH);
     13a:	60 e2       	ldi	r22, 0x20	; 32
     13c:	70 e0       	ldi	r23, 0x00	; 0
     13e:	ce 01       	movw	r24, r28
     140:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <UartArraySend>
		return;
     144:	0b c0       	rjmp	.+22     	; 0x15c <OnConnect+0x48>
	}
	data[1] = CMDS_SUCCESS;
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	89 83       	std	Y+1, r24	; 0x01
	UartArraySend(data, COMMAND_LENGTH);
     14a:	60 e2       	ldi	r22, 0x20	; 32
     14c:	70 e0       	ldi	r23, 0x00	; 0
     14e:	ce 01       	movw	r24, r28
     150:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <UartArraySend>
	AudioBeep(1);
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	0e 94 5a 00 	call	0xb4	; 0xb4 <AudioBeep>
}
     15c:	df 91       	pop	r29
     15e:	cf 91       	pop	r28
     160:	08 95       	ret

00000162 <OnMotorControl>:

void OnMotorControl(CommandType Type, CommandStatus Status, uint8_t* data)
{
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
     166:	ea 01       	movw	r28, r20
	if(Nrf24Write(radioRef, data, COMMAND_LENGTH) == 0)
     168:	40 e2       	ldi	r20, 0x20	; 32
     16a:	be 01       	movw	r22, r28
     16c:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <radioRef>
     170:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <radioRef+0x1>
     174:	0e 94 d5 05 	call	0xbaa	; 0xbaa <Nrf24Write>
     178:	81 11       	cpse	r24, r1
     17a:	08 c0       	rjmp	.+16     	; 0x18c <OnMotorControl+0x2a>
	{
		data[1] = CMDS_FAILED;
     17c:	82 e0       	ldi	r24, 0x02	; 2
     17e:	89 83       	std	Y+1, r24	; 0x01
		UartArraySend(data, COMMAND_LENGTH);
     180:	60 e2       	ldi	r22, 0x20	; 32
     182:	70 e0       	ldi	r23, 0x00	; 0
     184:	ce 01       	movw	r24, r28
     186:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <UartArraySend>
		return;
     18a:	07 c0       	rjmp	.+14     	; 0x19a <OnMotorControl+0x38>
	}
	data[1] = CMDS_SUCCESS;
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	89 83       	std	Y+1, r24	; 0x01
	UartArraySend(data, COMMAND_LENGTH);
     190:	60 e2       	ldi	r22, 0x20	; 32
     192:	70 e0       	ldi	r23, 0x00	; 0
     194:	ce 01       	movw	r24, r28
     196:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <UartArraySend>
}
     19a:	df 91       	pop	r29
     19c:	cf 91       	pop	r28
     19e:	08 95       	ret

000001a0 <OnGetData>:

void OnGetData(CommandType Type, CommandStatus Status, uint8_t* data)
{
     1a0:	ef 92       	push	r14
     1a2:	ff 92       	push	r15
     1a4:	0f 93       	push	r16
     1a6:	1f 93       	push	r17
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
     1ac:	cd b7       	in	r28, 0x3d	; 61
     1ae:	de b7       	in	r29, 0x3e	; 62
     1b0:	a0 97       	sbiw	r28, 0x20	; 32
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	de bf       	out	0x3e, r29	; 62
     1b8:	0f be       	out	0x3f, r0	; 63
     1ba:	cd bf       	out	0x3d, r28	; 61
     1bc:	7a 01       	movw	r14, r20
	if(Nrf24Write(radioRef, data, COMMAND_LENGTH) == 0)
     1be:	40 e2       	ldi	r20, 0x20	; 32
     1c0:	b7 01       	movw	r22, r14
     1c2:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <radioRef>
     1c6:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <radioRef+0x1>
     1ca:	0e 94 d5 05 	call	0xbaa	; 0xbaa <Nrf24Write>
     1ce:	81 11       	cpse	r24, r1
     1d0:	09 c0       	rjmp	.+18     	; 0x1e4 <OnGetData+0x44>
	{
		data[1] = CMDS_FAILED;
     1d2:	82 e0       	ldi	r24, 0x02	; 2
     1d4:	f7 01       	movw	r30, r14
     1d6:	81 83       	std	Z+1, r24	; 0x01
		UartArraySend(data, COMMAND_LENGTH);
     1d8:	60 e2       	ldi	r22, 0x20	; 32
     1da:	70 e0       	ldi	r23, 0x00	; 0
     1dc:	c7 01       	movw	r24, r14
     1de:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <UartArraySend>
		return;
     1e2:	66 c0       	rjmp	.+204    	; 0x2b0 <OnGetData+0x110>
	}
	
	Nrf24OpenReadingPipe(radioRef, pipe);
     1e4:	01 ee       	ldi	r16, 0xE1	; 225
     1e6:	10 ef       	ldi	r17, 0xF0	; 240
     1e8:	20 ef       	ldi	r18, 0xF0	; 240
     1ea:	38 ee       	ldi	r19, 0xE8	; 232
     1ec:	48 ee       	ldi	r20, 0xE8	; 232
     1ee:	50 e0       	ldi	r21, 0x00	; 0
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	70 e0       	ldi	r23, 0x00	; 0
     1f4:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <radioRef>
     1f8:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <radioRef+0x1>
     1fc:	0e 94 49 05 	call	0xa92	; 0xa92 <Nrf24OpenReadingPipe>
	Nrf24StartListening(radioRef);
     200:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <radioRef>
     204:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <radioRef+0x1>
     208:	0e 94 7f 05 	call	0xafe	; 0xafe <Nrf24StartListening>
	
	uint16_t timeoutCounter = 0;
     20c:	00 e0       	ldi	r16, 0x00	; 0
     20e:	10 e0       	ldi	r17, 0x00	; 0
	while(Nrf24Available(radioRef) == 0)
     210:	23 c0       	rjmp	.+70     	; 0x258 <OnGetData+0xb8>
	{
		timeoutCounter++;
     212:	0f 5f       	subi	r16, 0xFF	; 255
     214:	1f 4f       	sbci	r17, 0xFF	; 255
		if(timeoutCounter >= 1600)
     216:	00 34       	cpi	r16, 0x40	; 64
     218:	f6 e0       	ldi	r31, 0x06	; 6
     21a:	1f 07       	cpc	r17, r31
     21c:	e8 f0       	brcs	.+58     	; 0x258 <OnGetData+0xb8>
		{
			data[1] = CMDS_FAILED;
     21e:	82 e0       	ldi	r24, 0x02	; 2
     220:	f7 01       	movw	r30, r14
     222:	81 83       	std	Z+1, r24	; 0x01
			Nrf24StopListening(radioRef);
     224:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <radioRef>
     228:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <radioRef+0x1>
     22c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <Nrf24StopListening>
			Nrf24OpenWritingPipe(radioRef, pipe);
     230:	01 ee       	ldi	r16, 0xE1	; 225
     232:	10 ef       	ldi	r17, 0xF0	; 240
     234:	20 ef       	ldi	r18, 0xF0	; 240
     236:	38 ee       	ldi	r19, 0xE8	; 232
     238:	48 ee       	ldi	r20, 0xE8	; 232
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	70 e0       	ldi	r23, 0x00	; 0
     240:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <radioRef>
     244:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <radioRef+0x1>
     248:	0e 94 14 05 	call	0xa28	; 0xa28 <Nrf24OpenWritingPipe>
			UartArraySend(data, COMMAND_LENGTH);
     24c:	60 e2       	ldi	r22, 0x20	; 32
     24e:	70 e0       	ldi	r23, 0x00	; 0
     250:	c7 01       	movw	r24, r14
     252:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <UartArraySend>
			return;
     256:	2c c0       	rjmp	.+88     	; 0x2b0 <OnGetData+0x110>
	
	Nrf24OpenReadingPipe(radioRef, pipe);
	Nrf24StartListening(radioRef);
	
	uint16_t timeoutCounter = 0;
	while(Nrf24Available(radioRef) == 0)
     258:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <radioRef>
     25c:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <radioRef+0x1>
     260:	0e 94 95 06 	call	0xd2a	; 0xd2a <Nrf24Available>
     264:	88 23       	and	r24, r24
     266:	a9 f2       	breq	.-86     	; 0x212 <OnGetData+0x72>
			UartArraySend(data, COMMAND_LENGTH);
			return;
		}
	}
	uint8_t receivedMsg[COMMAND_LENGTH];
	Nrf24Read(radioRef, receivedMsg, COMMAND_LENGTH);
     268:	40 e2       	ldi	r20, 0x20	; 32
     26a:	be 01       	movw	r22, r28
     26c:	6f 5f       	subi	r22, 0xFF	; 255
     26e:	7f 4f       	sbci	r23, 0xFF	; 255
     270:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <radioRef>
     274:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <radioRef+0x1>
     278:	0e 94 44 06 	call	0xc88	; 0xc88 <Nrf24Read>
	
	Nrf24StopListening(radioRef);
     27c:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <radioRef>
     280:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <radioRef+0x1>
     284:	0e 94 ae 05 	call	0xb5c	; 0xb5c <Nrf24StopListening>
	Nrf24OpenWritingPipe(radioRef, pipe);
     288:	01 ee       	ldi	r16, 0xE1	; 225
     28a:	10 ef       	ldi	r17, 0xF0	; 240
     28c:	20 ef       	ldi	r18, 0xF0	; 240
     28e:	38 ee       	ldi	r19, 0xE8	; 232
     290:	48 ee       	ldi	r20, 0xE8	; 232
     292:	50 e0       	ldi	r21, 0x00	; 0
     294:	60 e0       	ldi	r22, 0x00	; 0
     296:	70 e0       	ldi	r23, 0x00	; 0
     298:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <radioRef>
     29c:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <radioRef+0x1>
     2a0:	0e 94 14 05 	call	0xa28	; 0xa28 <Nrf24OpenWritingPipe>
	
	UartArraySend(receivedMsg, COMMAND_LENGTH);
     2a4:	60 e2       	ldi	r22, 0x20	; 32
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	ce 01       	movw	r24, r28
     2aa:	01 96       	adiw	r24, 0x01	; 1
     2ac:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <UartArraySend>
     2b0:	a0 96       	adiw	r28, 0x20	; 32
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	f8 94       	cli
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	cd bf       	out	0x3d, r28	; 61
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	1f 91       	pop	r17
     2c2:	0f 91       	pop	r16
     2c4:	ff 90       	pop	r15
     2c6:	ef 90       	pop	r14
     2c8:	08 95       	ret

000002ca <main>:
void OnConnect(CommandType Type, CommandStatus Status, uint8_t* data);
void OnMotorControl(CommandType Type, CommandStatus Status, uint8_t* data);
void OnGetData(CommandType Type, CommandStatus Status, uint8_t* data);

int main(void)
{		
     2ca:	ff 92       	push	r15
     2cc:	0f 93       	push	r16
     2ce:	1f 93       	push	r17
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
     2d8:	66 97       	sbiw	r28, 0x16	; 22
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	f8 94       	cli
     2de:	de bf       	out	0x3e, r29	; 62
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	cd bf       	out	0x3d, r28	; 61
	CommandManager commandManager;
	commandManagerRef = &commandManager;
     2e4:	ce 01       	movw	r24, r28
     2e6:	01 96       	adiw	r24, 0x01	; 1
     2e8:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <commandManagerRef+0x1>
     2ec:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <commandManagerRef>
	
	CommandInit(commandManagerRef);
     2f0:	0e 94 9f 06 	call	0xd3e	; 0xd3e <CommandInit>
	CommandRegisterFunc(commandManagerRef, CMD_CONNECT, OnConnect);
     2f4:	4a e8       	ldi	r20, 0x8A	; 138
     2f6:	50 e0       	ldi	r21, 0x00	; 0
     2f8:	61 e0       	ldi	r22, 0x01	; 1
     2fa:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <commandManagerRef>
     2fe:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <commandManagerRef+0x1>
     302:	0e 94 b3 06 	call	0xd66	; 0xd66 <CommandRegisterFunc>
	CommandRegisterFunc(commandManagerRef, CMD_MOTORCONTROL, OnMotorControl);
     306:	41 eb       	ldi	r20, 0xB1	; 177
     308:	50 e0       	ldi	r21, 0x00	; 0
     30a:	62 e0       	ldi	r22, 0x02	; 2
     30c:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <commandManagerRef>
     310:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <commandManagerRef+0x1>
     314:	0e 94 b3 06 	call	0xd66	; 0xd66 <CommandRegisterFunc>
	CommandRegisterFunc(commandManagerRef, CMD_GETDATA, OnGetData);
     318:	40 ed       	ldi	r20, 0xD0	; 208
     31a:	50 e0       	ldi	r21, 0x00	; 0
     31c:	63 e0       	ldi	r22, 0x03	; 3
     31e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <commandManagerRef>
     322:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <commandManagerRef+0x1>
     326:	0e 94 b3 06 	call	0xd66	; 0xd66 <CommandRegisterFunc>

	UartInit(9600, 0);
     32a:	40 e0       	ldi	r20, 0x00	; 0
     32c:	60 e8       	ldi	r22, 0x80	; 128
     32e:	75 e2       	ldi	r23, 0x25	; 37
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 14 03 	call	0x628	; 0x628 <UartInit>
	UartCallbackSet(CallbackUart, COMMAND_LENGTH);
     338:	60 e2       	ldi	r22, 0x20	; 32
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	81 e8       	ldi	r24, 0x81	; 129
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 48 03 	call	0x690	; 0x690 <UartCallbackSet>
	
	SpiMasterInit();
     344:	0e 94 92 03 	call	0x724	; 0x724 <SpiMasterInit>
	
	Nrf24Radio radio;
	radioRef = &radio;
     348:	ce 01       	movw	r24, r28
     34a:	04 96       	adiw	r24, 0x04	; 4
     34c:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <radioRef+0x1>
     350:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <radioRef>
	Nrf24Init(radioRef);
     354:	0e 94 66 04 	call	0x8cc	; 0x8cc <Nrf24Init>
	sei();
     358:	78 94       	sei
	
	uint8_t quit = 0;
	
	if(Nrf24Begin(radioRef) == 0)
     35a:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <radioRef>
     35e:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <radioRef+0x1>
     362:	0e 94 90 04 	call	0x920	; 0x920 <Nrf24Begin>
     366:	88 23       	and	r24, r24
     368:	11 f0       	breq	.+4      	; 0x36e <main+0xa4>
	Nrf24Radio radio;
	radioRef = &radio;
	Nrf24Init(radioRef);
	sei();
	
	uint8_t quit = 0;
     36a:	f1 2c       	mov	r15, r1
     36c:	02 c0       	rjmp	.+4      	; 0x372 <main+0xa8>
	
	if(Nrf24Begin(radioRef) == 0)
	{
		quit = 1;
     36e:	ff 24       	eor	r15, r15
     370:	f3 94       	inc	r15
	}
	
	Nrf24OpenWritingPipe(radioRef, pipe);
     372:	01 ee       	ldi	r16, 0xE1	; 225
     374:	10 ef       	ldi	r17, 0xF0	; 240
     376:	20 ef       	ldi	r18, 0xF0	; 240
     378:	38 ee       	ldi	r19, 0xE8	; 232
     37a:	48 ee       	ldi	r20, 0xE8	; 232
     37c:	50 e0       	ldi	r21, 0x00	; 0
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <radioRef>
     386:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <radioRef+0x1>
     38a:	0e 94 14 05 	call	0xa28	; 0xa28 <Nrf24OpenWritingPipe>
	AudioInit();
     38e:	0e 94 53 00 	call	0xa6	; 0xa6 <AudioInit>
	
    while (quit == 0)
     392:	ff 20       	and	r15, r15
     394:	f1 f3       	breq	.-4      	; 0x392 <main+0xc8>
    {
    }
		
	CommandDestroy(commandManagerRef);
     396:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <commandManagerRef>
     39a:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <commandManagerRef+0x1>
     39e:	0e 94 a4 06 	call	0xd48	; 0xd48 <CommandDestroy>
}
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	66 96       	adiw	r28, 0x16	; 22
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	de bf       	out	0x3e, r29	; 62
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	cd bf       	out	0x3d, r28	; 61
     3b2:	df 91       	pop	r29
     3b4:	cf 91       	pop	r28
     3b6:	1f 91       	pop	r17
     3b8:	0f 91       	pop	r16
     3ba:	ff 90       	pop	r15
     3bc:	08 95       	ret

000003be <__vector_15>:

volatile static int factor[2];
volatile static int nextFactor[2];

ISR (TIMER0_COMPB_vect)
{
     3be:	1f 92       	push	r1
     3c0:	0f 92       	push	r0
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	0f 92       	push	r0
     3c6:	11 24       	eor	r1, r1
     3c8:	2f 93       	push	r18
     3ca:	3f 93       	push	r19
     3cc:	8f 93       	push	r24
     3ce:	9f 93       	push	r25
	static int counter = 0;
	counter++;
     3d0:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <counter.1620>
     3d4:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <counter.1620+0x1>
     3d8:	2f 5f       	subi	r18, 0xFF	; 255
     3da:	3f 4f       	sbci	r19, 0xFF	; 255
     3dc:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <counter.1620+0x1>
     3e0:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <counter.1620>

	uint8_t high = PORTD & (1<<DDD5);
	
	uint8_t realFactor = (high) ? factor[1] : 256 -  factor[1];
     3e4:	5d 9b       	sbis	0x0b, 5	; 11
     3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <__vector_15+0x34>
     3e8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <factor+0x2>
     3ec:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <factor+0x3>
     3f0:	05 c0       	rjmp	.+10     	; 0x3fc <__vector_15+0x3e>
     3f2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <factor+0x2>
     3f6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <factor+0x3>
     3fa:	81 95       	neg	r24
	if(counter == realFactor)
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	28 17       	cp	r18, r24
     400:	39 07       	cpc	r19, r25
     402:	d9 f4       	brne	.+54     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
	{
		if(factor[1] != nextFactor[1])
     404:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <factor+0x2>
     408:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <factor+0x3>
     40c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <nextFactor+0x2>
     410:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <nextFactor+0x3>
     414:	28 17       	cp	r18, r24
     416:	39 07       	cpc	r19, r25
     418:	41 f0       	breq	.+16     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
		{
			factor[1] = nextFactor[1];
     41a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <nextFactor+0x2>
     41e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <nextFactor+0x3>
     422:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <factor+0x3>
     426:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <factor+0x2>
		}
		PORTD ^= (1<<DDD5);
     42a:	9b b1       	in	r25, 0x0b	; 11
     42c:	80 e2       	ldi	r24, 0x20	; 32
     42e:	89 27       	eor	r24, r25
     430:	8b b9       	out	0x0b, r24	; 11
		counter = 0;
     432:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <counter.1620+0x1>
     436:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <counter.1620>
	}
}
     43a:	9f 91       	pop	r25
     43c:	8f 91       	pop	r24
     43e:	3f 91       	pop	r19
     440:	2f 91       	pop	r18
     442:	0f 90       	pop	r0
     444:	0f be       	out	0x3f, r0	; 63
     446:	0f 90       	pop	r0
     448:	1f 90       	pop	r1
     44a:	18 95       	reti

0000044c <__vector_14>:
ISR (TIMER0_COMPA_vect)
{
     44c:	1f 92       	push	r1
     44e:	0f 92       	push	r0
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	0f 92       	push	r0
     454:	11 24       	eor	r1, r1
     456:	2f 93       	push	r18
     458:	3f 93       	push	r19
     45a:	8f 93       	push	r24
     45c:	9f 93       	push	r25
	static int counter = 0;
	counter++;
     45e:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
     462:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
     466:	2f 5f       	subi	r18, 0xFF	; 255
     468:	3f 4f       	sbci	r19, 0xFF	; 255
     46a:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <__data_end+0x1>
     46e:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__data_end>

	uint8_t high = PORTD & (1<<DDD6);
	
	uint8_t realFactor = (high) ? factor[0] : 256 -  factor[0];
     472:	5e 9b       	sbis	0x0b, 6	; 11
     474:	05 c0       	rjmp	.+10     	; 0x480 <__vector_14+0x34>
     476:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <factor>
     47a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <factor+0x1>
     47e:	05 c0       	rjmp	.+10     	; 0x48a <__vector_14+0x3e>
     480:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <factor>
     484:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <factor+0x1>
     488:	81 95       	neg	r24
	if(counter == realFactor)
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	28 17       	cp	r18, r24
     48e:	39 07       	cpc	r19, r25
     490:	d9 f4       	brne	.+54     	; 0x4c8 <__vector_14+0x7c>
	{
		if(factor[0] != nextFactor[0])
     492:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <factor>
     496:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <factor+0x1>
     49a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <nextFactor>
     49e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <nextFactor+0x1>
     4a2:	28 17       	cp	r18, r24
     4a4:	39 07       	cpc	r19, r25
     4a6:	41 f0       	breq	.+16     	; 0x4b8 <__vector_14+0x6c>
		{
			factor[0] = nextFactor[0];
     4a8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <nextFactor>
     4ac:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <nextFactor+0x1>
     4b0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <factor+0x1>
     4b4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <factor>
		}
		PORTD ^= (1<<DDD6);
     4b8:	9b b1       	in	r25, 0x0b	; 11
     4ba:	80 e4       	ldi	r24, 0x40	; 64
     4bc:	89 27       	eor	r24, r25
     4be:	8b b9       	out	0x0b, r24	; 11
		counter = 0;
     4c0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
     4c4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
	}
}
     4c8:	9f 91       	pop	r25
     4ca:	8f 91       	pop	r24
     4cc:	3f 91       	pop	r19
     4ce:	2f 91       	pop	r18
     4d0:	0f 90       	pop	r0
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	0f 90       	pop	r0
     4d6:	1f 90       	pop	r1
     4d8:	18 95       	reti

000004da <__vector_18>:
volatile static uint8_t uartTxBusy = 1;
static uint16_t desiredLength = 0;
static UartCallback callback;

ISR(USART_RX_vect)
{
     4da:	1f 92       	push	r1
     4dc:	0f 92       	push	r0
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	0f 92       	push	r0
     4e2:	11 24       	eor	r1, r1
     4e4:	af 92       	push	r10
     4e6:	bf 92       	push	r11
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	2f 93       	push	r18
     4f6:	3f 93       	push	r19
     4f8:	4f 93       	push	r20
     4fa:	5f 93       	push	r21
     4fc:	6f 93       	push	r22
     4fe:	7f 93       	push	r23
     500:	8f 93       	push	r24
     502:	9f 93       	push	r25
     504:	af 93       	push	r26
     506:	bf 93       	push	r27
     508:	ef 93       	push	r30
     50a:	ff 93       	push	r31
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
	
	if(rxWritePos >= RXBUFFERSIZE)
	{
		rxWritePos = 0;
	}
}
     514:	0d b7       	in	r16, 0x3d	; 61
     516:	1e b7       	in	r17, 0x3e	; 62

ISR(USART_RX_vect)
{
	volatile static uint16_t rxWritePos = 0;
	
	rxBuffer[rxWritePos] = UDR0;
     518:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <rxWritePos.1761>
     51c:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <rxWritePos.1761+0x1>
     520:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     524:	e4 5e       	subi	r30, 0xE4	; 228
     526:	fe 4f       	sbci	r31, 0xFE	; 254
     528:	80 83       	st	Z, r24
	rxCount++;
     52a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <rxCount>
     52e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <rxCount+0x1>
     532:	01 96       	adiw	r24, 0x01	; 1
     534:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <rxCount+0x1>
     538:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <rxCount>
	rxWritePos++;
     53c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <rxWritePos.1761>
     540:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <rxWritePos.1761+0x1>
     544:	01 96       	adiw	r24, 0x01	; 1
     546:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <rxWritePos.1761+0x1>
     54a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <rxWritePos.1761>
	
	if(desiredLength > 0 && rxCount == desiredLength)
     54e:	e0 90 18 01 	lds	r14, 0x0118	; 0x800118 <desiredLength>
     552:	f0 90 19 01 	lds	r15, 0x0119	; 0x800119 <desiredLength+0x1>
     556:	e1 14       	cp	r14, r1
     558:	f1 04       	cpc	r15, r1
     55a:	61 f1       	breq	.+88     	; 0x5b4 <__vector_18+0xda>
     55c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <rxCount>
     560:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <rxCount+0x1>
     564:	e8 16       	cp	r14, r24
     566:	f9 06       	cpc	r15, r25
     568:	29 f5       	brne	.+74     	; 0x5b4 <__vector_18+0xda>
	{
		uint8_t message[desiredLength];
     56a:	8d b7       	in	r24, 0x3d	; 61
     56c:	9e b7       	in	r25, 0x3e	; 62
     56e:	8e 19       	sub	r24, r14
     570:	9f 09       	sbc	r25, r15
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	f8 94       	cli
     576:	9e bf       	out	0x3e, r25	; 62
     578:	0f be       	out	0x3f, r0	; 63
     57a:	8d bf       	out	0x3d, r24	; 61
     57c:	01 96       	adiw	r24, 0x01	; 1
     57e:	6c 01       	movw	r12, r24
		memcpy(message, rxBuffer, desiredLength);
     580:	a7 01       	movw	r20, r14
     582:	6c e1       	ldi	r22, 0x1C	; 28
     584:	71 e0       	ldi	r23, 0x01	; 1
     586:	0e 94 12 09 	call	0x1224	; 0x1224 <memcpy>
		callback(message, desiredLength);
     58a:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <callback>
     58e:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <callback+0x1>
     592:	b7 01       	movw	r22, r14
     594:	c6 01       	movw	r24, r12
     596:	09 95       	icall
		rxWritePos = 0;
     598:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <rxWritePos.1761+0x1>
     59c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <rxWritePos.1761>
		rxCount= 0;
     5a0:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <rxCount+0x1>
     5a4:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <rxCount>
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	f8 94       	cli
     5ac:	1e bf       	out	0x3e, r17	; 62
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	0d bf       	out	0x3d, r16	; 61
     5b2:	0b c0       	rjmp	.+22     	; 0x5ca <__vector_18+0xf0>
		return;
	}
	
	if(rxWritePos >= RXBUFFERSIZE)
     5b4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <rxWritePos.1761>
     5b8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <rxWritePos.1761+0x1>
     5bc:	80 38       	cpi	r24, 0x80	; 128
     5be:	91 05       	cpc	r25, r1
     5c0:	20 f0       	brcs	.+8      	; 0x5ca <__vector_18+0xf0>
	{
		rxWritePos = 0;
     5c2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <rxWritePos.1761+0x1>
     5c6:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <rxWritePos.1761>
	}
}
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	f8 94       	cli
     5ce:	1e bf       	out	0x3e, r17	; 62
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	0d bf       	out	0x3d, r16	; 61
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	ff 91       	pop	r31
     5da:	ef 91       	pop	r30
     5dc:	bf 91       	pop	r27
     5de:	af 91       	pop	r26
     5e0:	9f 91       	pop	r25
     5e2:	8f 91       	pop	r24
     5e4:	7f 91       	pop	r23
     5e6:	6f 91       	pop	r22
     5e8:	5f 91       	pop	r21
     5ea:	4f 91       	pop	r20
     5ec:	3f 91       	pop	r19
     5ee:	2f 91       	pop	r18
     5f0:	1f 91       	pop	r17
     5f2:	0f 91       	pop	r16
     5f4:	ff 90       	pop	r15
     5f6:	ef 90       	pop	r14
     5f8:	df 90       	pop	r13
     5fa:	cf 90       	pop	r12
     5fc:	bf 90       	pop	r11
     5fe:	af 90       	pop	r10
     600:	0f 90       	pop	r0
     602:	0f be       	out	0x3f, r0	; 63
     604:	0f 90       	pop	r0
     606:	1f 90       	pop	r1
     608:	18 95       	reti

0000060a <__vector_20>:

ISR(USART_TX_vect)
{
     60a:	1f 92       	push	r1
     60c:	0f 92       	push	r0
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	0f 92       	push	r0
     612:	11 24       	eor	r1, r1
     614:	8f 93       	push	r24
	uartTxBusy = 1;
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <uartTxBusy>
}
     61c:	8f 91       	pop	r24
     61e:	0f 90       	pop	r0
     620:	0f be       	out	0x3f, r0	; 63
     622:	0f 90       	pop	r0
     624:	1f 90       	pop	r1
     626:	18 95       	reti

00000628 <UartInit>:

void UartInit(uint32_t baud)
{
	uint8_t speed = 16;
	baud = (F_CPU/(speed*baud)) - 1;
     628:	dc 01       	movw	r26, r24
     62a:	cb 01       	movw	r24, r22
     62c:	88 0f       	add	r24, r24
     62e:	99 1f       	adc	r25, r25
     630:	aa 1f       	adc	r26, r26
     632:	bb 1f       	adc	r27, r27
     634:	88 0f       	add	r24, r24
     636:	99 1f       	adc	r25, r25
     638:	aa 1f       	adc	r26, r26
     63a:	bb 1f       	adc	r27, r27
     63c:	9c 01       	movw	r18, r24
     63e:	ad 01       	movw	r20, r26
     640:	22 0f       	add	r18, r18
     642:	33 1f       	adc	r19, r19
     644:	44 1f       	adc	r20, r20
     646:	55 1f       	adc	r21, r21
     648:	22 0f       	add	r18, r18
     64a:	33 1f       	adc	r19, r19
     64c:	44 1f       	adc	r20, r20
     64e:	55 1f       	adc	r21, r21
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	74 e2       	ldi	r23, 0x24	; 36
     654:	84 ef       	ldi	r24, 0xF4	; 244
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 09 07 	call	0xe12	; 0xe12 <__udivmodsi4>
     65c:	ba 01       	movw	r22, r20
     65e:	a9 01       	movw	r20, r18
     660:	41 50       	subi	r20, 0x01	; 1
     662:	51 09       	sbc	r21, r1
     664:	61 09       	sbc	r22, r1
     666:	71 09       	sbc	r23, r1
	
	UBRR0H = (baud & 0xF00) >> 8;
     668:	db 01       	movw	r26, r22
     66a:	ca 01       	movw	r24, r20
     66c:	88 27       	eor	r24, r24
     66e:	9f 70       	andi	r25, 0x0F	; 15
     670:	aa 27       	eor	r26, r26
     672:	bb 27       	eor	r27, r27
     674:	89 2f       	mov	r24, r25
     676:	9a 2f       	mov	r25, r26
     678:	ab 2f       	mov	r26, r27
     67a:	bb 27       	eor	r27, r27
     67c:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (baud & 0x00FF);
     680:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0) | (1 << TXCIE0);
     684:	e1 ec       	ldi	r30, 0xC1	; 193
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	80 81       	ld	r24, Z
     68a:	88 6d       	ori	r24, 0xD8	; 216
     68c:	80 83       	st	Z, r24
     68e:	08 95       	ret

00000690 <UartCallbackSet>:
}

void UartCallbackSet(UartCallback CallbackFunc, uint16_t DesiredLength)
{
	callback = CallbackFunc;
     690:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <callback+0x1>
     694:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <callback>
	desiredLength = DesiredLength;
     698:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <desiredLength+0x1>
     69c:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <desiredLength>
     6a0:	08 95       	ret

000006a2 <UartByteSend>:
}

void UartByteSend(uint8_t byte)
{
	while(uartTxBusy == 0);
     6a2:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <uartTxBusy>
     6a6:	99 23       	and	r25, r25
     6a8:	e1 f3       	breq	.-8      	; 0x6a2 <UartByteSend>
	uartTxBusy = 0;
     6aa:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <uartTxBusy>
	UDR0 = byte;
     6ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     6b2:	08 95       	ret

000006b4 <UartArraySend>:
}

void UartArraySend(uint8_t* byteArray, uint16_t length)
{
     6b4:	ef 92       	push	r14
     6b6:	ff 92       	push	r15
     6b8:	0f 93       	push	r16
     6ba:	1f 93       	push	r17
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	7c 01       	movw	r14, r24
     6c2:	8b 01       	movw	r16, r22
	for(uint16_t i = 0; i < length; i++)
     6c4:	c0 e0       	ldi	r28, 0x00	; 0
     6c6:	d0 e0       	ldi	r29, 0x00	; 0
     6c8:	07 c0       	rjmp	.+14     	; 0x6d8 <UartArraySend+0x24>
	{
		UartByteSend(byteArray[i]);
     6ca:	f7 01       	movw	r30, r14
     6cc:	ec 0f       	add	r30, r28
     6ce:	fd 1f       	adc	r31, r29
     6d0:	80 81       	ld	r24, Z
     6d2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <UartByteSend>
	UDR0 = byte;
}

void UartArraySend(uint8_t* byteArray, uint16_t length)
{
	for(uint16_t i = 0; i < length; i++)
     6d6:	21 96       	adiw	r28, 0x01	; 1
     6d8:	c0 17       	cp	r28, r16
     6da:	d1 07       	cpc	r29, r17
     6dc:	b0 f3       	brcs	.-20     	; 0x6ca <UartArraySend+0x16>
	{
		UartByteSend(byteArray[i]);
	}
}
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	1f 91       	pop	r17
     6e4:	0f 91       	pop	r16
     6e6:	ff 90       	pop	r15
     6e8:	ef 90       	pop	r14
     6ea:	08 95       	ret

000006ec <__vector_17>:

volatile uint8_t spiRxData = 0;
volatile uint8_t spiTxRxDone = 0;

ISR(SPI_STC_vect)
{
     6ec:	1f 92       	push	r1
     6ee:	0f 92       	push	r0
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	0f 92       	push	r0
     6f4:	11 24       	eor	r1, r1
     6f6:	8f 93       	push	r24
	if(SPSR & (1<<SPIF))
     6f8:	0d b4       	in	r0, 0x2d	; 45
     6fa:	07 fe       	sbrs	r0, 7
     6fc:	07 c0       	rjmp	.+14     	; 0x70c <__vector_17+0x20>
	{
		spiRxData = SPDR;
     6fe:	8e b5       	in	r24, 0x2e	; 46
     700:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <spiRxData>
		spiTxRxDone = 1;
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <spiTxRxDone>
		return;
     70a:	06 c0       	rjmp	.+12     	; 0x718 <__vector_17+0x2c>
	}

	spiRxData = SPDR;
     70c:	8e b5       	in	r24, 0x2e	; 46
     70e:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <spiRxData>
	spiTxRxDone = 255;
     712:	8f ef       	ldi	r24, 0xFF	; 255
     714:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <spiTxRxDone>
}
     718:	8f 91       	pop	r24
     71a:	0f 90       	pop	r0
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	0f 90       	pop	r0
     720:	1f 90       	pop	r1
     722:	18 95       	reti

00000724 <SpiMasterInit>:

void SpiMasterInit(void)
{
	DDRB |= (1 << DDB5) | (1 << DDB3);
     724:	84 b1       	in	r24, 0x04	; 4
     726:	88 62       	ori	r24, 0x28	; 40
     728:	84 b9       	out	0x04, r24	; 4
	
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0) | (1<<SPIE);
     72a:	81 ed       	ldi	r24, 0xD1	; 209
     72c:	8c bd       	out	0x2c, r24	; 44
     72e:	08 95       	ret

00000730 <SpiSend>:
}

uint8_t SpiSend(uint8_t data)
{
	spiTxRxDone = 0;
     730:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <spiTxRxDone>
	SPDR = data;
     734:	8e bd       	out	0x2e, r24	; 46
	
	while(spiTxRxDone == 0);
     736:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <spiTxRxDone>
     73a:	88 23       	and	r24, r24
     73c:	e1 f3       	breq	.-8      	; 0x736 <SpiSend+0x6>
	
	return spiRxData;
     73e:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <spiRxData>
}
     742:	08 95       	ret

00000744 <PinSet>:
	for(uint8_t i = 0; i < length; i++)
	{
		value[i] = SpiSend(NOP_CMD);
	}
	PinSet(Radio->csnPin, HIGH);
}
     744:	61 11       	cpse	r22, r1
     746:	0e c0       	rjmp	.+28     	; 0x764 <PinSet+0x20>
     748:	45 b1       	in	r20, 0x05	; 5
     74a:	21 e0       	ldi	r18, 0x01	; 1
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	b9 01       	movw	r22, r18
     750:	02 c0       	rjmp	.+4      	; 0x756 <PinSet+0x12>
     752:	66 0f       	add	r22, r22
     754:	77 1f       	adc	r23, r23
     756:	8a 95       	dec	r24
     758:	e2 f7       	brpl	.-8      	; 0x752 <PinSet+0xe>
     75a:	cb 01       	movw	r24, r22
     75c:	80 95       	com	r24
     75e:	84 23       	and	r24, r20
     760:	85 b9       	out	0x05, r24	; 5
     762:	08 95       	ret
     764:	45 b1       	in	r20, 0x05	; 5
     766:	21 e0       	ldi	r18, 0x01	; 1
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	b9 01       	movw	r22, r18
     76c:	02 c0       	rjmp	.+4      	; 0x772 <PinSet+0x2e>
     76e:	66 0f       	add	r22, r22
     770:	77 1f       	adc	r23, r23
     772:	8a 95       	dec	r24
     774:	e2 f7       	brpl	.-8      	; 0x76e <PinSet+0x2a>
     776:	cb 01       	movw	r24, r22
     778:	84 2b       	or	r24, r20
     77a:	85 b9       	out	0x05, r24	; 5
     77c:	08 95       	ret

0000077e <ToggleFeatures>:
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	ec 01       	movw	r28, r24
     784:	60 e0       	ldi	r22, 0x00	; 0
     786:	89 81       	ldd	r24, Y+1	; 0x01
     788:	0e 94 a2 03 	call	0x744	; 0x744 <PinSet>
     78c:	80 e5       	ldi	r24, 0x50	; 80
     78e:	0e 94 98 03 	call	0x730	; 0x730 <SpiSend>
     792:	83 e7       	ldi	r24, 0x73	; 115
     794:	0e 94 98 03 	call	0x730	; 0x730 <SpiSend>
     798:	61 e0       	ldi	r22, 0x01	; 1
     79a:	89 81       	ldd	r24, Y+1	; 0x01
     79c:	0e 94 a2 03 	call	0x744	; 0x744 <PinSet>
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	08 95       	ret

000007a6 <WriteCommand>:
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	ec 01       	movw	r28, r24
     7ae:	16 2f       	mov	r17, r22
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	89 81       	ldd	r24, Y+1	; 0x01
     7b4:	0e 94 a2 03 	call	0x744	; 0x744 <PinSet>
     7b8:	81 2f       	mov	r24, r17
     7ba:	80 62       	ori	r24, 0x20	; 32
     7bc:	0e 94 98 03 	call	0x730	; 0x730 <SpiSend>
     7c0:	18 2f       	mov	r17, r24
     7c2:	61 e0       	ldi	r22, 0x01	; 1
     7c4:	89 81       	ldd	r24, Y+1	; 0x01
     7c6:	0e 94 a2 03 	call	0x744	; 0x744 <PinSet>
     7ca:	81 2f       	mov	r24, r17
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	1f 91       	pop	r17
     7d2:	08 95       	ret

000007d4 <TxFlush>:
     7d4:	61 ee       	ldi	r22, 0xE1	; 225
     7d6:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <WriteCommand>
     7da:	08 95       	ret

000007dc <RxFlush>:
     7dc:	62 ee       	ldi	r22, 0xE2	; 226
     7de:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <WriteCommand>
     7e2:	08 95       	ret

000007e4 <GetStatus>:
     7e4:	6f ef       	ldi	r22, 0xFF	; 255
     7e6:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <WriteCommand>
     7ea:	08 95       	ret

000007ec <WriteRegister>:
     7ec:	0f 93       	push	r16
     7ee:	1f 93       	push	r17
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	ec 01       	movw	r28, r24
     7f6:	16 2f       	mov	r17, r22
     7f8:	04 2f       	mov	r16, r20
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	89 81       	ldd	r24, Y+1	; 0x01
     7fe:	0e 94 a2 03 	call	0x744	; 0x744 <PinSet>
     802:	81 2f       	mov	r24, r17
     804:	80 62       	ori	r24, 0x20	; 32
     806:	0e 94 98 03 	call	0x730	; 0x730 <SpiSend>
     80a:	18 2f       	mov	r17, r24
     80c:	80 2f       	mov	r24, r16
     80e:	0e 94 98 03 	call	0x730	; 0x730 <SpiSend>
     812:	61 e0       	ldi	r22, 0x01	; 1
     814:	89 81       	ldd	r24, Y+1	; 0x01
     816:	0e 94 a2 03 	call	0x744	; 0x744 <PinSet>
     81a:	81 2f       	mov	r24, r17
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	1f 91       	pop	r17
     822:	0f 91       	pop	r16
     824:	08 95       	ret

00000826 <ReadRegister>:
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	ec 01       	movw	r28, r24
     82e:	16 2f       	mov	r17, r22
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	89 81       	ldd	r24, Y+1	; 0x01
     834:	0e 94 a2 03 	call	0x744	; 0x744 <PinSet>
     838:	81 2f       	mov	r24, r17
     83a:	0e 94 98 03 	call	0x730	; 0x730 <SpiSend>
     83e:	8f ef       	ldi	r24, 0xFF	; 255
     840:	0e 94 98 03 	call	0x730	; 0x730 <SpiSend>
     844:	18 2f       	mov	r17, r24
     846:	61 e0       	ldi	r22, 0x01	; 1
     848:	89 81       	ldd	r24, Y+1	; 0x01
     84a:	0e 94 a2 03 	call	0x744	; 0x744 <PinSet>
     84e:	81 2f       	mov	r24, r17
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	1f 91       	pop	r17
     856:	08 95       	ret

00000858 <Write>:
     858:	ef 92       	push	r14
     85a:	ff 92       	push	r15
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	7c 01       	movw	r14, r24
     866:	c6 2f       	mov	r28, r22
     868:	8a 01       	movw	r16, r20
     86a:	d2 2f       	mov	r29, r18
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	fc 01       	movw	r30, r24
     870:	81 81       	ldd	r24, Z+1	; 0x01
     872:	0e 94 a2 03 	call	0x744	; 0x744 <PinSet>
     876:	8c 2f       	mov	r24, r28
     878:	80 62       	ori	r24, 0x20	; 32
     87a:	0e 94 98 03 	call	0x730	; 0x730 <SpiSend>
     87e:	c0 e0       	ldi	r28, 0x00	; 0
     880:	07 c0       	rjmp	.+14     	; 0x890 <Write+0x38>
     882:	f8 01       	movw	r30, r16
     884:	ec 0f       	add	r30, r28
     886:	f1 1d       	adc	r31, r1
     888:	80 81       	ld	r24, Z
     88a:	0e 94 98 03 	call	0x730	; 0x730 <SpiSend>
     88e:	cf 5f       	subi	r28, 0xFF	; 255
     890:	cd 17       	cp	r28, r29
     892:	b8 f3       	brcs	.-18     	; 0x882 <Write+0x2a>
     894:	61 e0       	ldi	r22, 0x01	; 1
     896:	f7 01       	movw	r30, r14
     898:	81 81       	ldd	r24, Z+1	; 0x01
     89a:	0e 94 a2 03 	call	0x744	; 0x744 <PinSet>
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	1f 91       	pop	r17
     8a4:	0f 91       	pop	r16
     8a6:	ff 90       	pop	r15
     8a8:	ef 90       	pop	r14
     8aa:	08 95       	ret

000008ac <PowerUp>:
     8ac:	fc 01       	movw	r30, r24
     8ae:	42 89       	ldd	r20, Z+18	; 0x12
     8b0:	41 fd       	sbrc	r20, 1
     8b2:	0b c0       	rjmp	.+22     	; 0x8ca <PowerUp+0x1e>
     8b4:	42 60       	ori	r20, 0x02	; 2
     8b6:	42 8b       	std	Z+18, r20	; 0x12
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	0e 94 f6 03 	call	0x7ec	; 0x7ec <WriteRegister>
     8be:	8f e1       	ldi	r24, 0x1F	; 31
     8c0:	9e e4       	ldi	r25, 0x4E	; 78
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	f1 f7       	brne	.-4      	; 0x8c2 <PowerUp+0x16>
     8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <PowerUp+0x1c>
     8c8:	00 00       	nop
     8ca:	08 95       	ret

000008cc <Nrf24Init>:
{
	WriteCommand(Radio, FLUSH_RX);
}

void Nrf24Init(Nrf24Radio* Radio)
{
     8cc:	fc 01       	movw	r30, r24
	Radio->cePin = DDB1;
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	90 83       	st	Z, r25
	Radio->csnPin = DDB2;
     8d2:	82 e0       	ldi	r24, 0x02	; 2
     8d4:	81 83       	std	Z+1, r24	; 0x01
	
	DDRB |= (1<<DDB1) | (1<<DDB2);
     8d6:	84 b1       	in	r24, 0x04	; 4
     8d8:	86 60       	ori	r24, 0x06	; 6
     8da:	84 b9       	out	0x04, r24	; 4
	
	Radio->speed = 10000000;
     8dc:	40 e8       	ldi	r20, 0x80	; 128
     8de:	56 e9       	ldi	r21, 0x96	; 150
     8e0:	68 e9       	ldi	r22, 0x98	; 152
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	42 83       	std	Z+2, r20	; 0x02
     8e6:	53 83       	std	Z+3, r21	; 0x03
     8e8:	64 83       	std	Z+4, r22	; 0x04
     8ea:	75 83       	std	Z+5, r23	; 0x05
	Radio->payloadSize = 32;
     8ec:	80 e2       	ldi	r24, 0x20	; 32
     8ee:	86 83       	std	Z+6, r24	; 0x06
	Radio->isPVariant = 0;
     8f0:	17 82       	std	Z+7, r1	; 0x07
	Radio->isP0Rx = 0;
     8f2:	10 86       	std	Z+8, r1	; 0x08
	Radio->addrWidth = 5;
     8f4:	85 e0       	ldi	r24, 0x05	; 5
     8f6:	81 87       	std	Z+9, r24	; 0x09
	Radio->dynamicPayloadsEnabled = 1;
     8f8:	92 87       	std	Z+10, r25	; 0x0a
	Radio->csDelay = 5;
     8fa:	83 87       	std	Z+11, r24	; 0x0b
	Radio->pipe0ReadingAddress[0] = 0;
     8fc:	14 86       	std	Z+12, r1	; 0x0c
	
	DDRB &= ~(1<<DDB0);
     8fe:	84 b1       	in	r24, 0x04	; 4
     900:	8e 7f       	andi	r24, 0xFE	; 254
     902:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<DDB0);
     904:	85 b1       	in	r24, 0x05	; 5
     906:	81 60       	ori	r24, 0x01	; 1
     908:	85 b9       	out	0x05, r24	; 5
	PCMSK0 |= (1<<DDB0);
     90a:	eb e6       	ldi	r30, 0x6B	; 107
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	80 81       	ld	r24, Z
     910:	81 60       	ori	r24, 0x01	; 1
     912:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE0);
     914:	e8 e6       	ldi	r30, 0x68	; 104
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	80 81       	ld	r24, Z
     91a:	81 60       	ori	r24, 0x01	; 1
     91c:	80 83       	st	Z, r24
     91e:	08 95       	ret

00000920 <Nrf24Begin>:
}

uint8_t Nrf24Begin(Nrf24Radio* Radio)
{
     920:	1f 93       	push	r17
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	ec 01       	movw	r28, r24
	PinSet(Radio->cePin, LOW);
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	88 81       	ld	r24, Y
     92c:	0e 94 a2 03 	call	0x744	; 0x744 <PinSet>
	PinSet(Radio->csnPin, HIGH);
     930:	61 e0       	ldi	r22, 0x01	; 1
     932:	89 81       	ldd	r24, Y+1	; 0x01
     934:	0e 94 a2 03 	call	0x744	; 0x744 <PinSet>
     938:	8f e1       	ldi	r24, 0x1F	; 31
     93a:	9e e4       	ldi	r25, 0x4E	; 78
     93c:	01 97       	sbiw	r24, 0x01	; 1
     93e:	f1 f7       	brne	.-4      	; 0x93c <Nrf24Begin+0x1c>
     940:	00 c0       	rjmp	.+0      	; 0x942 <Nrf24Begin+0x22>
     942:	00 00       	nop
	
	_delay_ms(5);
	
	// setup retransmition
	WriteRegister(Radio, SETUP_RETR_ADDRESS, (5 << ARD_0) | 15);
     944:	4f e5       	ldi	r20, 0x5F	; 95
     946:	64 e0       	ldi	r22, 0x04	; 4
     948:	ce 01       	movw	r24, r28
     94a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <WriteRegister>
	
	// setup rf
	uint8_t dataRate = ReadRegister(Radio, RF_SETUP_ADDRESS);
     94e:	66 e0       	ldi	r22, 0x06	; 6
     950:	ce 01       	movw	r24, r28
     952:	0e 94 13 04 	call	0x826	; 0x826 <ReadRegister>
	dataRate = dataRate & ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
     956:	48 2f       	mov	r20, r24
     958:	47 7d       	andi	r20, 0xD7	; 215
	WriteRegister(Radio, RF_SETUP_ADDRESS, dataRate);
     95a:	66 e0       	ldi	r22, 0x06	; 6
     95c:	ce 01       	movw	r24, r28
     95e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <WriteRegister>
	
	// toggle features command
	uint8_t beforeToggle = ReadRegister(Radio, FEATURE_ADDRESS);
     962:	6d e1       	ldi	r22, 0x1D	; 29
     964:	ce 01       	movw	r24, r28
     966:	0e 94 13 04 	call	0x826	; 0x826 <ReadRegister>
     96a:	18 2f       	mov	r17, r24
	ToggleFeatures(Radio);
     96c:	ce 01       	movw	r24, r28
     96e:	0e 94 bf 03 	call	0x77e	; 0x77e <ToggleFeatures>
	uint8_t afterToggle = ReadRegister(Radio, FEATURE_ADDRESS);
     972:	6d e1       	ldi	r22, 0x1D	; 29
     974:	ce 01       	movw	r24, r28
     976:	0e 94 13 04 	call	0x826	; 0x826 <ReadRegister>
	Radio->isPVariant = beforeToggle == afterToggle;
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	18 13       	cpse	r17, r24
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	9f 83       	std	Y+7, r25	; 0x07
	if(afterToggle)
     982:	88 23       	and	r24, r24
     984:	51 f0       	breq	.+20     	; 0x99a <Nrf24Begin+0x7a>
	{
		if(Radio->isPVariant)
     986:	99 23       	and	r25, r25
     988:	19 f0       	breq	.+6      	; 0x990 <Nrf24Begin+0x70>
		{
			ToggleFeatures(Radio);
     98a:	ce 01       	movw	r24, r28
     98c:	0e 94 bf 03 	call	0x77e	; 0x77e <ToggleFeatures>
		}
		
		WriteRegister(Radio, FEATURE_ADDRESS, 0);
     990:	40 e0       	ldi	r20, 0x00	; 0
     992:	6d e1       	ldi	r22, 0x1D	; 29
     994:	ce 01       	movw	r24, r28
     996:	0e 94 f6 03 	call	0x7ec	; 0x7ec <WriteRegister>
	}
	
	Radio->ackPayloadsEnabled = 0;
     99a:	19 8a       	std	Y+17, r1	; 0x11
	WriteRegister(Radio, DYNPD_ADDRESS, 0);
     99c:	40 e0       	ldi	r20, 0x00	; 0
     99e:	6c e1       	ldi	r22, 0x1C	; 28
     9a0:	ce 01       	movw	r24, r28
     9a2:	0e 94 f6 03 	call	0x7ec	; 0x7ec <WriteRegister>
	
	Radio->dynamicPayloadsEnabled = 0;
     9a6:	1a 86       	std	Y+10, r1	; 0x0a
	WriteRegister(Radio, EN_AA_ADDRESS, 0x3F);
     9a8:	4f e3       	ldi	r20, 0x3F	; 63
     9aa:	61 e0       	ldi	r22, 0x01	; 1
     9ac:	ce 01       	movw	r24, r28
     9ae:	0e 94 f6 03 	call	0x7ec	; 0x7ec <WriteRegister>
	WriteRegister(Radio, EN_RXADDR_ADDRESS, 3);
     9b2:	43 e0       	ldi	r20, 0x03	; 3
     9b4:	62 e0       	ldi	r22, 0x02	; 2
     9b6:	ce 01       	movw	r24, r28
     9b8:	0e 94 f6 03 	call	0x7ec	; 0x7ec <WriteRegister>

	for (uint8_t i = 0; i < 6; ++i) {
     9bc:	10 e0       	ldi	r17, 0x00	; 0
     9be:	07 c0       	rjmp	.+14     	; 0x9ce <Nrf24Begin+0xae>
		WriteRegister(Radio, RX_PW_P0_ADDRESS + i, Radio->payloadSize);
     9c0:	61 e1       	ldi	r22, 0x11	; 17
     9c2:	61 0f       	add	r22, r17
     9c4:	4e 81       	ldd	r20, Y+6	; 0x06
     9c6:	ce 01       	movw	r24, r28
     9c8:	0e 94 f6 03 	call	0x7ec	; 0x7ec <WriteRegister>
	
	Radio->dynamicPayloadsEnabled = 0;
	WriteRegister(Radio, EN_AA_ADDRESS, 0x3F);
	WriteRegister(Radio, EN_RXADDR_ADDRESS, 3);

	for (uint8_t i = 0; i < 6; ++i) {
     9cc:	1f 5f       	subi	r17, 0xFF	; 255
     9ce:	16 30       	cpi	r17, 0x06	; 6
     9d0:	b8 f3       	brcs	.-18     	; 0x9c0 <Nrf24Begin+0xa0>
		WriteRegister(Radio, RX_PW_P0_ADDRESS + i, Radio->payloadSize);
	}
	
	WriteRegister(Radio, SETUP_AW_ADDRESS, 3);
     9d2:	43 e0       	ldi	r20, 0x03	; 3
     9d4:	63 e0       	ldi	r22, 0x03	; 3
     9d6:	ce 01       	movw	r24, r28
     9d8:	0e 94 f6 03 	call	0x7ec	; 0x7ec <WriteRegister>

	WriteRegister(Radio, RF_CH_ADDRESS, 101);
     9dc:	45 e6       	ldi	r20, 0x65	; 101
     9de:	65 e0       	ldi	r22, 0x05	; 5
     9e0:	ce 01       	movw	r24, r28
     9e2:	0e 94 f6 03 	call	0x7ec	; 0x7ec <WriteRegister>

	WriteRegister(Radio, STATUS_ADDRESS, (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT));
     9e6:	40 e7       	ldi	r20, 0x70	; 112
     9e8:	67 e0       	ldi	r22, 0x07	; 7
     9ea:	ce 01       	movw	r24, r28
     9ec:	0e 94 f6 03 	call	0x7ec	; 0x7ec <WriteRegister>

	TxFlush(Radio);
     9f0:	ce 01       	movw	r24, r28
     9f2:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <TxFlush>
	RxFlush(Radio);
     9f6:	ce 01       	movw	r24, r28
     9f8:	0e 94 ee 03 	call	0x7dc	; 0x7dc <RxFlush>
	
	WriteRegister(Radio, CONFIG_ADDRESS, (1<<EN_CRC) | (1<<CRCO));
     9fc:	4c e0       	ldi	r20, 0x0C	; 12
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	ce 01       	movw	r24, r28
     a02:	0e 94 f6 03 	call	0x7ec	; 0x7ec <WriteRegister>
	Radio->configReg = ReadRegister(Radio, CONFIG_ADDRESS);
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	ce 01       	movw	r24, r28
     a0a:	0e 94 13 04 	call	0x826	; 0x826 <ReadRegister>
     a0e:	8a 8b       	std	Y+18, r24	; 0x12
	
	PowerUp(Radio);
     a10:	ce 01       	movw	r24, r28
     a12:	0e 94 56 04 	call	0x8ac	; 0x8ac <PowerUp>
	
	return Radio->configReg == ((1<<EN_CRC) | (1<<CRCO) | (1<<PWR_UP))?1:0;
     a16:	9a 89       	ldd	r25, Y+18	; 0x12
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	9e 30       	cpi	r25, 0x0E	; 14
     a1c:	09 f0       	breq	.+2      	; 0xa20 <Nrf24Begin+0x100>
     a1e:	80 e0       	ldi	r24, 0x00	; 0
}
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	1f 91       	pop	r17
     a26:	08 95       	ret

00000a28 <Nrf24OpenWritingPipe>:

void Nrf24OpenWritingPipe(Nrf24Radio* Radio, uint64_t Pipe)
{
     a28:	ef 92       	push	r14
     a2a:	ff 92       	push	r15
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
     a38:	28 97       	sbiw	r28, 0x08	; 8
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	de bf       	out	0x3e, r29	; 62
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	cd bf       	out	0x3d, r28	; 61
     a44:	7c 01       	movw	r14, r24
     a46:	09 83       	std	Y+1, r16	; 0x01
     a48:	1a 83       	std	Y+2, r17	; 0x02
     a4a:	2b 83       	std	Y+3, r18	; 0x03
     a4c:	3c 83       	std	Y+4, r19	; 0x04
     a4e:	4d 83       	std	Y+5, r20	; 0x05
     a50:	5e 83       	std	Y+6, r21	; 0x06
     a52:	6f 83       	std	Y+7, r22	; 0x07
     a54:	78 87       	std	Y+8, r23	; 0x08
	Write(Radio, RX_ADDR_P0_ADDRESS, (uint8_t*)&Pipe, Radio->addrWidth);
     a56:	fc 01       	movw	r30, r24
     a58:	21 85       	ldd	r18, Z+9	; 0x09
     a5a:	ae 01       	movw	r20, r28
     a5c:	4f 5f       	subi	r20, 0xFF	; 255
     a5e:	5f 4f       	sbci	r21, 0xFF	; 255
     a60:	6a e0       	ldi	r22, 0x0A	; 10
     a62:	0e 94 2c 04 	call	0x858	; 0x858 <Write>
	Write(Radio, TX_ADDR_ADDRESS, (uint8_t*)&Pipe, Radio->addrWidth);
     a66:	f7 01       	movw	r30, r14
     a68:	21 85       	ldd	r18, Z+9	; 0x09
     a6a:	ae 01       	movw	r20, r28
     a6c:	4f 5f       	subi	r20, 0xFF	; 255
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	60 e1       	ldi	r22, 0x10	; 16
     a72:	c7 01       	movw	r24, r14
     a74:	0e 94 2c 04 	call	0x858	; 0x858 <Write>
}
     a78:	28 96       	adiw	r28, 0x08	; 8
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	de bf       	out	0x3e, r29	; 62
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	cd bf       	out	0x3d, r28	; 61
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	ff 90       	pop	r15
     a8e:	ef 90       	pop	r14
     a90:	08 95       	ret

00000a92 <Nrf24OpenReadingPipe>:

void Nrf24OpenReadingPipe(Nrf24Radio* Radio, uint64_t Pipe)
{
     a92:	ef 92       	push	r14
     a94:	ff 92       	push	r15
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	cd b7       	in	r28, 0x3d	; 61
     aa0:	de b7       	in	r29, 0x3e	; 62
     aa2:	28 97       	sbiw	r28, 0x08	; 8
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	f8 94       	cli
     aa8:	de bf       	out	0x3e, r29	; 62
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	cd bf       	out	0x3d, r28	; 61
     aae:	7c 01       	movw	r14, r24
     ab0:	09 83       	std	Y+1, r16	; 0x01
     ab2:	1a 83       	std	Y+2, r17	; 0x02
     ab4:	2b 83       	std	Y+3, r18	; 0x03
     ab6:	3c 83       	std	Y+4, r19	; 0x04
     ab8:	4d 83       	std	Y+5, r20	; 0x05
     aba:	5e 83       	std	Y+6, r21	; 0x06
     abc:	6f 83       	std	Y+7, r22	; 0x07
     abe:	78 87       	std	Y+8, r23	; 0x08
	Write(Radio, RX_ADDR_P1_ADDRESS, (uint8_t*)&Pipe, Radio->addrWidth);
     ac0:	fc 01       	movw	r30, r24
     ac2:	21 85       	ldd	r18, Z+9	; 0x09
     ac4:	ae 01       	movw	r20, r28
     ac6:	4f 5f       	subi	r20, 0xFF	; 255
     ac8:	5f 4f       	sbci	r21, 0xFF	; 255
     aca:	6b e0       	ldi	r22, 0x0B	; 11
     acc:	0e 94 2c 04 	call	0x858	; 0x858 <Write>
	
	uint8_t enrx = ReadRegister(Radio, EN_RXADDR_ADDRESS);
     ad0:	62 e0       	ldi	r22, 0x02	; 2
     ad2:	c7 01       	movw	r24, r14
     ad4:	0e 94 13 04 	call	0x826	; 0x826 <ReadRegister>
	enrx |= (1<<ERX_P1);
     ad8:	48 2f       	mov	r20, r24
     ada:	42 60       	ori	r20, 0x02	; 2
	WriteRegister(Radio, EN_RXADDR_ADDRESS, enrx);
     adc:	62 e0       	ldi	r22, 0x02	; 2
     ade:	c7 01       	movw	r24, r14
     ae0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <WriteRegister>
}
     ae4:	28 96       	adiw	r28, 0x08	; 8
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	f8 94       	cli
     aea:	de bf       	out	0x3e, r29	; 62
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	cd bf       	out	0x3d, r28	; 61
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ff 90       	pop	r15
     afa:	ef 90       	pop	r14
     afc:	08 95       	ret

00000afe <Nrf24StartListening>:

void Nrf24StartListening(Nrf24Radio* Radio)
{
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	ec 01       	movw	r28, r24
	PowerUp(Radio);
     b04:	0e 94 56 04 	call	0x8ac	; 0x8ac <PowerUp>
	
	Radio->configReg |= (1<<PRIM_RX);
     b08:	4a 89       	ldd	r20, Y+18	; 0x12
     b0a:	41 60       	ori	r20, 0x01	; 1
     b0c:	4a 8b       	std	Y+18, r20	; 0x12
	WriteRegister(Radio, CONFIG_ADDRESS, Radio->configReg);
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	ce 01       	movw	r24, r28
     b12:	0e 94 f6 03 	call	0x7ec	; 0x7ec <WriteRegister>
	
	WriteRegister(Radio, STATUS_ADDRESS, (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT));
     b16:	40 e7       	ldi	r20, 0x70	; 112
     b18:	67 e0       	ldi	r22, 0x07	; 7
     b1a:	ce 01       	movw	r24, r28
     b1c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <WriteRegister>
	
	PinSet(Radio->cePin, HIGH);
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	88 81       	ld	r24, Y
     b24:	0e 94 a2 03 	call	0x744	; 0x744 <PinSet>
	
	if(Radio->isP0Rx)
     b28:	88 85       	ldd	r24, Y+8	; 0x08
     b2a:	88 23       	and	r24, r24
     b2c:	49 f0       	breq	.+18     	; 0xb40 <Nrf24StartListening+0x42>
	{
		Write(Radio, RX_ADDR_P0_ADDRESS, Radio->pipe0ReadingAddress, Radio->addrWidth);
     b2e:	ae 01       	movw	r20, r28
     b30:	44 5f       	subi	r20, 0xF4	; 244
     b32:	5f 4f       	sbci	r21, 0xFF	; 255
     b34:	29 85       	ldd	r18, Y+9	; 0x09
     b36:	6a e0       	ldi	r22, 0x0A	; 10
     b38:	ce 01       	movw	r24, r28
     b3a:	0e 94 2c 04 	call	0x858	; 0x858 <Write>
     b3e:	0b c0       	rjmp	.+22     	; 0xb56 <Nrf24StartListening+0x58>
	}
	else
	{
		uint8_t enrx = ReadRegister(Radio, EN_RXADDR_ADDRESS);
     b40:	62 e0       	ldi	r22, 0x02	; 2
     b42:	ce 01       	movw	r24, r28
     b44:	0e 94 13 04 	call	0x826	; 0x826 <ReadRegister>
		enrx &= ~(1<<ERX_P0);
     b48:	48 2f       	mov	r20, r24
     b4a:	4e 7f       	andi	r20, 0xFE	; 254
		WriteRegister(Radio, EN_RXADDR_ADDRESS, enrx);
     b4c:	62 e0       	ldi	r22, 0x02	; 2
     b4e:	ce 01       	movw	r24, r28
     b50:	0e 94 f6 03 	call	0x7ec	; 0x7ec <WriteRegister>
		Radio->isP0Rx = 0;
     b54:	18 86       	std	Y+8, r1	; 0x08
	}
}
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	08 95       	ret

00000b5c <Nrf24StopListening>:

void Nrf24StopListening(Nrf24Radio* Radio)
{
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	ec 01       	movw	r28, r24
	PinSet(Radio->cePin, LOW);
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	88 81       	ld	r24, Y
     b66:	0e 94 a2 03 	call	0x744	; 0x744 <PinSet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b6a:	83 e5       	ldi	r24, 0x53	; 83
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	f1 f7       	brne	.-4      	; 0xb6e <Nrf24StopListening+0x12>
     b72:	00 c0       	rjmp	.+0      	; 0xb74 <Nrf24StopListening+0x18>
     b74:	00 00       	nop
	
	_delay_us(TX_DELAY);
	if(Radio->ackPayloadsEnabled)
     b76:	89 89       	ldd	r24, Y+17	; 0x11
     b78:	88 23       	and	r24, r24
     b7a:	19 f0       	breq	.+6      	; 0xb82 <Nrf24StopListening+0x26>
	{
		TxFlush(Radio);
     b7c:	ce 01       	movw	r24, r28
     b7e:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <TxFlush>
	}
	
	Radio->configReg = Radio->configReg & ~(1<<PRIM_RX);
     b82:	4a 89       	ldd	r20, Y+18	; 0x12
     b84:	4e 7f       	andi	r20, 0xFE	; 254
     b86:	4a 8b       	std	Y+18, r20	; 0x12
	WriteRegister(Radio, CONFIG_ADDRESS, Radio->configReg);
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	ce 01       	movw	r24, r28
     b8c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <WriteRegister>
	
	WriteRegister(Radio, EN_RXADDR_ADDRESS, ReadRegister(Radio, EN_RXADDR_ADDRESS )| (1<<ERX_P0));
     b90:	62 e0       	ldi	r22, 0x02	; 2
     b92:	ce 01       	movw	r24, r28
     b94:	0e 94 13 04 	call	0x826	; 0x826 <ReadRegister>
     b98:	48 2f       	mov	r20, r24
     b9a:	41 60       	ori	r20, 0x01	; 1
     b9c:	62 e0       	ldi	r22, 0x02	; 2
     b9e:	ce 01       	movw	r24, r28
     ba0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <WriteRegister>
}
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	08 95       	ret

00000baa <Nrf24Write>:
{
	return WriteCommand(Radio, NOP_CMD);
}

uint8_t Nrf24Write(Nrf24Radio* Radio, const uint8_t* data, uint8_t length)
{
     baa:	af 92       	push	r10
     bac:	bf 92       	push	r11
     bae:	df 92       	push	r13
     bb0:	ef 92       	push	r14
     bb2:	ff 92       	push	r15
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	7c 01       	movw	r14, r24
     bbe:	8b 01       	movw	r16, r22
	uint8_t blankLen = !length ? 1 : 0;
     bc0:	d1 e0       	ldi	r29, 0x01	; 1
     bc2:	41 11       	cpse	r20, r1
     bc4:	d0 e0       	ldi	r29, 0x00	; 0
	if(Radio->dynamicPayloadsEnabled == 0)
     bc6:	f7 01       	movw	r30, r14
     bc8:	82 85       	ldd	r24, Z+10	; 0x0a
     bca:	81 11       	cpse	r24, r1
     bcc:	07 c0       	rjmp	.+14     	; 0xbdc <Nrf24Write+0x32>
	{
		length = min(length, Radio->payloadSize);
     bce:	d6 81       	ldd	r29, Z+6	; 0x06
     bd0:	c4 2f       	mov	r28, r20
     bd2:	d4 17       	cp	r29, r20
     bd4:	08 f4       	brcc	.+2      	; 0xbd8 <Nrf24Write+0x2e>
     bd6:	cd 2f       	mov	r28, r29
		blankLen = Radio->payloadSize - length;
     bd8:	dc 1b       	sub	r29, r28
     bda:	04 c0       	rjmp	.+8      	; 0xbe4 <Nrf24Write+0x3a>
	}
	else
	{
		length = min(length, 32);
     bdc:	c4 2f       	mov	r28, r20
     bde:	41 32       	cpi	r20, 0x21	; 33
     be0:	08 f0       	brcs	.+2      	; 0xbe4 <Nrf24Write+0x3a>
     be2:	c0 e2       	ldi	r28, 0x20	; 32
	}
	
	PinSet(Radio->csnPin, LOW);
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	f7 01       	movw	r30, r14
     be8:	81 81       	ldd	r24, Z+1	; 0x01
     bea:	0e 94 a2 03 	call	0x744	; 0x744 <PinSet>
	SpiSend(W_TX_PAYLOAD);
     bee:	80 ea       	ldi	r24, 0xA0	; 160
     bf0:	0e 94 98 03 	call	0x730	; 0x730 <SpiSend>
	while (length--) {
     bf4:	0a c0       	rjmp	.+20     	; 0xc0a <Nrf24Write+0x60>
		SpiSend(*data++);
     bf6:	58 01       	movw	r10, r16
     bf8:	ff ef       	ldi	r31, 0xFF	; 255
     bfa:	af 1a       	sub	r10, r31
     bfc:	bf 0a       	sbc	r11, r31
     bfe:	f8 01       	movw	r30, r16
     c00:	80 81       	ld	r24, Z
     c02:	0e 94 98 03 	call	0x730	; 0x730 <SpiSend>
		length = min(length, 32);
	}
	
	PinSet(Radio->csnPin, LOW);
	SpiSend(W_TX_PAYLOAD);
	while (length--) {
     c06:	cd 2d       	mov	r28, r13
		SpiSend(*data++);
     c08:	85 01       	movw	r16, r10
		length = min(length, 32);
	}
	
	PinSet(Radio->csnPin, LOW);
	SpiSend(W_TX_PAYLOAD);
	while (length--) {
     c0a:	dd 24       	eor	r13, r13
     c0c:	da 94       	dec	r13
     c0e:	dc 0e       	add	r13, r28
     c10:	c1 11       	cpse	r28, r1
     c12:	f1 cf       	rjmp	.-30     	; 0xbf6 <Nrf24Write+0x4c>
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <Nrf24Write+0x74>
		SpiSend(*data++);
	}

	while (blankLen--) {
		SpiSend(0);
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	0e 94 98 03 	call	0x730	; 0x730 <SpiSend>
	SpiSend(W_TX_PAYLOAD);
	while (length--) {
		SpiSend(*data++);
	}

	while (blankLen--) {
     c1c:	dc 2f       	mov	r29, r28
     c1e:	cf ef       	ldi	r28, 0xFF	; 255
     c20:	cd 0f       	add	r28, r29
     c22:	d1 11       	cpse	r29, r1
     c24:	f8 cf       	rjmp	.-16     	; 0xc16 <Nrf24Write+0x6c>
		SpiSend(0);
	}
	PinSet(Radio->csnPin, HIGH);
     c26:	61 e0       	ldi	r22, 0x01	; 1
     c28:	f7 01       	movw	r30, r14
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
     c2c:	0e 94 a2 03 	call	0x744	; 0x744 <PinSet>
	
	PinSet(Radio->cePin, HIGH);
     c30:	61 e0       	ldi	r22, 0x01	; 1
     c32:	f7 01       	movw	r30, r14
     c34:	80 81       	ld	r24, Z
     c36:	0e 94 a2 03 	call	0x744	; 0x744 <PinSet>
	PORTC |= (1 << DDC1);
     c3a:	88 b1       	in	r24, 0x08	; 8
     c3c:	82 60       	ori	r24, 0x02	; 2
     c3e:	88 b9       	out	0x08, r24	; 8
	while(!(GetStatus(Radio) & ((1<<TX_DS) | (1<<MAX_RT)))){}
     c40:	c7 01       	movw	r24, r14
     c42:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <GetStatus>
     c46:	80 73       	andi	r24, 0x30	; 48
     c48:	d9 f3       	breq	.-10     	; 0xc40 <Nrf24Write+0x96>
	PORTC &= ~(1 << DDC1);
     c4a:	88 b1       	in	r24, 0x08	; 8
     c4c:	8d 7f       	andi	r24, 0xFD	; 253
     c4e:	88 b9       	out	0x08, r24	; 8
	PinSet(Radio->cePin, LOW);
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	f7 01       	movw	r30, r14
     c54:	80 81       	ld	r24, Z
     c56:	0e 94 a2 03 	call	0x744	; 0x744 <PinSet>
	
	uint8_t status = WriteRegister(Radio, STATUS_ADDRESS, (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT));
     c5a:	40 e7       	ldi	r20, 0x70	; 112
     c5c:	67 e0       	ldi	r22, 0x07	; 7
     c5e:	c7 01       	movw	r24, r14
     c60:	0e 94 f6 03 	call	0x7ec	; 0x7ec <WriteRegister>

	if(status & (1<<MAX_RT))
     c64:	84 ff       	sbrs	r24, 4
     c66:	05 c0       	rjmp	.+10     	; 0xc72 <Nrf24Write+0xc8>
	{
		TxFlush(Radio);
     c68:	c7 01       	movw	r24, r14
     c6a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <TxFlush>
		return 0;
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	01 c0       	rjmp	.+2      	; 0xc74 <Nrf24Write+0xca>
	}
	
	return 1;
     c72:	81 e0       	ldi	r24, 0x01	; 1
}
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	df 90       	pop	r13
     c82:	bf 90       	pop	r11
     c84:	af 90       	pop	r10
     c86:	08 95       	ret

00000c88 <Nrf24Read>:

void Nrf24Read(Nrf24Radio* Radio, uint8_t* data, uint8_t length)
{
     c88:	af 92       	push	r10
     c8a:	bf 92       	push	r11
     c8c:	cf 92       	push	r12
     c8e:	df 92       	push	r13
     c90:	ff 92       	push	r15
     c92:	0f 93       	push	r16
     c94:	1f 93       	push	r17
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	6c 01       	movw	r12, r24
     c9c:	8b 01       	movw	r16, r22
	uint8_t blankLen = 0;
	if(Radio->dynamicPayloadsEnabled == 0)
     c9e:	fc 01       	movw	r30, r24
     ca0:	82 85       	ldd	r24, Z+10	; 0x0a
     ca2:	81 11       	cpse	r24, r1
     ca4:	07 c0       	rjmp	.+14     	; 0xcb4 <Nrf24Read+0x2c>
	{
		length = min(length, Radio->payloadSize);
     ca6:	c6 81       	ldd	r28, Z+6	; 0x06
     ca8:	dc 2f       	mov	r29, r28
     caa:	4c 17       	cp	r20, r28
     cac:	08 f4       	brcc	.+2      	; 0xcb0 <Nrf24Read+0x28>
     cae:	d4 2f       	mov	r29, r20
		blankLen = Radio->payloadSize - length;
     cb0:	cd 1b       	sub	r28, r29
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <Nrf24Read+0x36>
	}
	else
	{
		length = min(length, 32);
     cb4:	d4 2f       	mov	r29, r20
     cb6:	41 32       	cpi	r20, 0x21	; 33
     cb8:	08 f0       	brcs	.+2      	; 0xcbc <Nrf24Read+0x34>
     cba:	d0 e2       	ldi	r29, 0x20	; 32
	return 1;
}

void Nrf24Read(Nrf24Radio* Radio, uint8_t* data, uint8_t length)
{
	uint8_t blankLen = 0;
     cbc:	c0 e0       	ldi	r28, 0x00	; 0
	else
	{
		length = min(length, 32);
	}
	
	PinSet(Radio->csnPin, LOW);
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	f6 01       	movw	r30, r12
     cc2:	81 81       	ldd	r24, Z+1	; 0x01
     cc4:	0e 94 a2 03 	call	0x744	; 0x744 <PinSet>
	
	SpiSend(R_RX_PAYLOAD);
     cc8:	81 e6       	ldi	r24, 0x61	; 97
     cca:	0e 94 98 03 	call	0x730	; 0x730 <SpiSend>
	while(length--)
     cce:	0b c0       	rjmp	.+22     	; 0xce6 <Nrf24Read+0x5e>
	{
		*data++ = SpiSend(NOP_CMD);
     cd0:	58 01       	movw	r10, r16
     cd2:	ff ef       	ldi	r31, 0xFF	; 255
     cd4:	af 1a       	sub	r10, r31
     cd6:	bf 0a       	sbc	r11, r31
     cd8:	8f ef       	ldi	r24, 0xFF	; 255
     cda:	0e 94 98 03 	call	0x730	; 0x730 <SpiSend>
     cde:	f8 01       	movw	r30, r16
     ce0:	80 83       	st	Z, r24
	}
	
	PinSet(Radio->csnPin, LOW);
	
	SpiSend(R_RX_PAYLOAD);
	while(length--)
     ce2:	df 2d       	mov	r29, r15
	{
		*data++ = SpiSend(NOP_CMD);
     ce4:	85 01       	movw	r16, r10
	}
	
	PinSet(Radio->csnPin, LOW);
	
	SpiSend(R_RX_PAYLOAD);
	while(length--)
     ce6:	ff 24       	eor	r15, r15
     ce8:	fa 94       	dec	r15
     cea:	fd 0e       	add	r15, r29
     cec:	d1 11       	cpse	r29, r1
     cee:	f0 cf       	rjmp	.-32     	; 0xcd0 <Nrf24Read+0x48>
     cf0:	04 c0       	rjmp	.+8      	; 0xcfa <Nrf24Read+0x72>
		*data++ = SpiSend(NOP_CMD);
	}
	
	while(blankLen--)
	{
		SpiSend(NOP_CMD);
     cf2:	8f ef       	ldi	r24, 0xFF	; 255
     cf4:	0e 94 98 03 	call	0x730	; 0x730 <SpiSend>
	while(length--)
	{
		*data++ = SpiSend(NOP_CMD);
	}
	
	while(blankLen--)
     cf8:	cd 2f       	mov	r28, r29
     cfa:	df ef       	ldi	r29, 0xFF	; 255
     cfc:	dc 0f       	add	r29, r28
     cfe:	c1 11       	cpse	r28, r1
     d00:	f8 cf       	rjmp	.-16     	; 0xcf2 <Nrf24Read+0x6a>
	{
		SpiSend(NOP_CMD);
	}
	
	PinSet(Radio->csnPin, HIGH);
     d02:	61 e0       	ldi	r22, 0x01	; 1
     d04:	f6 01       	movw	r30, r12
     d06:	81 81       	ldd	r24, Z+1	; 0x01
     d08:	0e 94 a2 03 	call	0x744	; 0x744 <PinSet>
	
	WriteRegister(Radio, STATUS_ADDRESS, (1<<RX_DR));
     d0c:	40 e4       	ldi	r20, 0x40	; 64
     d0e:	67 e0       	ldi	r22, 0x07	; 7
     d10:	c6 01       	movw	r24, r12
     d12:	0e 94 f6 03 	call	0x7ec	; 0x7ec <WriteRegister>
}
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	ff 90       	pop	r15
     d20:	df 90       	pop	r13
     d22:	cf 90       	pop	r12
     d24:	bf 90       	pop	r11
     d26:	af 90       	pop	r10
     d28:	08 95       	ret

00000d2a <Nrf24Available>:

uint8_t Nrf24Available(Nrf24Radio* Radio)
{
	uint8_t pipe = (GetStatus(Radio) >> RX_P_NO_0) & 0x07;
     d2a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <GetStatus>
     d2e:	86 95       	lsr	r24
     d30:	98 2f       	mov	r25, r24
     d32:	97 70       	andi	r25, 0x07	; 7
	return (pipe > 5)? 0 : 1;
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	96 30       	cpi	r25, 0x06	; 6
     d38:	08 f0       	brcs	.+2      	; 0xd3c <Nrf24Available+0x12>
     d3a:	80 e0       	ldi	r24, 0x00	; 0
}
     d3c:	08 95       	ret

00000d3e <CommandInit>:
#include "commands.h"
#include <stdlib.h>

void CommandInit(CommandManager* Manager)
{
	Manager->funcs = NULL;
     d3e:	fc 01       	movw	r30, r24
     d40:	11 82       	std	Z+1, r1	; 0x01
     d42:	10 82       	st	Z, r1
	Manager->count = 0;
     d44:	12 82       	std	Z+2, r1	; 0x02
     d46:	08 95       	ret

00000d48 <CommandDestroy>:
}

void CommandDestroy(CommandManager* Manager)
{
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	ec 01       	movw	r28, r24
	if(Manager->funcs != NULL)
     d4e:	88 81       	ld	r24, Y
     d50:	99 81       	ldd	r25, Y+1	; 0x01
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	21 f0       	breq	.+8      	; 0xd5e <CommandDestroy+0x16>
	{
		free(Manager->funcs);
     d56:	0e 94 c3 07 	call	0xf86	; 0xf86 <free>
		Manager->funcs = NULL;
     d5a:	19 82       	std	Y+1, r1	; 0x01
     d5c:	18 82       	st	Y, r1
	}
	Manager->count = 0;	
     d5e:	1a 82       	std	Y+2, r1	; 0x02
}
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	08 95       	ret

00000d66 <CommandRegisterFunc>:

void CommandRegisterFunc(CommandManager* Manager, CommandType Type, CommandFunc Func)
{
     d66:	ef 92       	push	r14
     d68:	ff 92       	push	r15
     d6a:	1f 93       	push	r17
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	ec 01       	movw	r28, r24
     d72:	16 2f       	mov	r17, r22
     d74:	7a 01       	movw	r14, r20
	Manager->count++;
     d76:	6a 81       	ldd	r22, Y+2	; 0x02
     d78:	6f 5f       	subi	r22, 0xFF	; 255
     d7a:	6a 83       	std	Y+2, r22	; 0x02
	Manager->funcs = (CommandRow*)realloc(Manager->funcs, Manager->count * sizeof(CommandRow));
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	cb 01       	movw	r24, r22
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	68 0f       	add	r22, r24
     d86:	79 1f       	adc	r23, r25
     d88:	88 81       	ld	r24, Y
     d8a:	99 81       	ldd	r25, Y+1	; 0x01
     d8c:	0e 94 4c 08 	call	0x1098	; 0x1098 <realloc>
     d90:	99 83       	std	Y+1, r25	; 0x01
     d92:	88 83       	st	Y, r24
	Manager->funcs[Manager->count - 1] = (CommandRow){ Type, Func };
     d94:	2a 81       	ldd	r18, Y+2	; 0x02
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	f9 01       	movw	r30, r18
     d9a:	ee 0f       	add	r30, r30
     d9c:	ff 1f       	adc	r31, r31
     d9e:	2e 0f       	add	r18, r30
     da0:	3f 1f       	adc	r19, r31
     da2:	23 50       	subi	r18, 0x03	; 3
     da4:	31 09       	sbc	r19, r1
     da6:	fc 01       	movw	r30, r24
     da8:	e2 0f       	add	r30, r18
     daa:	f3 1f       	adc	r31, r19
     dac:	10 83       	st	Z, r17
     dae:	f2 82       	std	Z+2, r15	; 0x02
     db0:	e1 82       	std	Z+1, r14	; 0x01
}
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	1f 91       	pop	r17
     db8:	ff 90       	pop	r15
     dba:	ef 90       	pop	r14
     dbc:	08 95       	ret

00000dbe <CommandProcess>:

void CommandProcess(CommandManager* Manager, uint8_t* data, uint16_t length)
{
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	dc 01       	movw	r26, r24
     dc4:	eb 01       	movw	r28, r22
	for(int i = 0; i < Manager->count; i++)
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	19 c0       	rjmp	.+50     	; 0xdfe <CommandProcess+0x40>
	{
		if(Manager->funcs[i].Type == data[0])
     dcc:	8d 91       	ld	r24, X+
     dce:	9c 91       	ld	r25, X
     dd0:	11 97       	sbiw	r26, 0x01	; 1
     dd2:	f9 01       	movw	r30, r18
     dd4:	ee 0f       	add	r30, r30
     dd6:	ff 1f       	adc	r31, r31
     dd8:	e2 0f       	add	r30, r18
     dda:	f3 1f       	adc	r31, r19
     ddc:	e8 0f       	add	r30, r24
     dde:	f9 1f       	adc	r31, r25
     de0:	90 81       	ld	r25, Z
     de2:	88 81       	ld	r24, Y
     de4:	98 13       	cpse	r25, r24
     de6:	09 c0       	rjmp	.+18     	; 0xdfa <CommandProcess+0x3c>
		{
			Manager->funcs[i].Func(data[0], data[1], &data[2]);
     de8:	01 80       	ldd	r0, Z+1	; 0x01
     dea:	f2 81       	ldd	r31, Z+2	; 0x02
     dec:	e0 2d       	mov	r30, r0
     dee:	ae 01       	movw	r20, r28
     df0:	4e 5f       	subi	r20, 0xFE	; 254
     df2:	5f 4f       	sbci	r21, 0xFF	; 255
     df4:	69 81       	ldd	r22, Y+1	; 0x01
     df6:	09 95       	icall
			return;
     df8:	09 c0       	rjmp	.+18     	; 0xe0c <CommandProcess+0x4e>
	Manager->funcs[Manager->count - 1] = (CommandRow){ Type, Func };
}

void CommandProcess(CommandManager* Manager, uint8_t* data, uint16_t length)
{
	for(int i = 0; i < Manager->count; i++)
     dfa:	2f 5f       	subi	r18, 0xFF	; 255
     dfc:	3f 4f       	sbci	r19, 0xFF	; 255
     dfe:	12 96       	adiw	r26, 0x02	; 2
     e00:	4c 91       	ld	r20, X
     e02:	12 97       	sbiw	r26, 0x02	; 2
     e04:	50 e0       	ldi	r21, 0x00	; 0
     e06:	24 17       	cp	r18, r20
     e08:	35 07       	cpc	r19, r21
     e0a:	04 f3       	brlt	.-64     	; 0xdcc <CommandProcess+0xe>
		{
			Manager->funcs[i].Func(data[0], data[1], &data[2]);
			return;
		}
	}
}
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	08 95       	ret

00000e12 <__udivmodsi4>:
     e12:	a1 e2       	ldi	r26, 0x21	; 33
     e14:	1a 2e       	mov	r1, r26
     e16:	aa 1b       	sub	r26, r26
     e18:	bb 1b       	sub	r27, r27
     e1a:	fd 01       	movw	r30, r26
     e1c:	0d c0       	rjmp	.+26     	; 0xe38 <__udivmodsi4_ep>

00000e1e <__udivmodsi4_loop>:
     e1e:	aa 1f       	adc	r26, r26
     e20:	bb 1f       	adc	r27, r27
     e22:	ee 1f       	adc	r30, r30
     e24:	ff 1f       	adc	r31, r31
     e26:	a2 17       	cp	r26, r18
     e28:	b3 07       	cpc	r27, r19
     e2a:	e4 07       	cpc	r30, r20
     e2c:	f5 07       	cpc	r31, r21
     e2e:	20 f0       	brcs	.+8      	; 0xe38 <__udivmodsi4_ep>
     e30:	a2 1b       	sub	r26, r18
     e32:	b3 0b       	sbc	r27, r19
     e34:	e4 0b       	sbc	r30, r20
     e36:	f5 0b       	sbc	r31, r21

00000e38 <__udivmodsi4_ep>:
     e38:	66 1f       	adc	r22, r22
     e3a:	77 1f       	adc	r23, r23
     e3c:	88 1f       	adc	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	1a 94       	dec	r1
     e42:	69 f7       	brne	.-38     	; 0xe1e <__udivmodsi4_loop>
     e44:	60 95       	com	r22
     e46:	70 95       	com	r23
     e48:	80 95       	com	r24
     e4a:	90 95       	com	r25
     e4c:	9b 01       	movw	r18, r22
     e4e:	ac 01       	movw	r20, r24
     e50:	bd 01       	movw	r22, r26
     e52:	cf 01       	movw	r24, r30
     e54:	08 95       	ret

00000e56 <malloc>:
     e56:	0f 93       	push	r16
     e58:	1f 93       	push	r17
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	91 05       	cpc	r25, r1
     e62:	10 f4       	brcc	.+4      	; 0xe68 <malloc+0x12>
     e64:	82 e0       	ldi	r24, 0x02	; 2
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	e0 91 a4 01 	lds	r30, 0x01A4	; 0x8001a4 <__flp>
     e6c:	f0 91 a5 01 	lds	r31, 0x01A5	; 0x8001a5 <__flp+0x1>
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	a0 e0       	ldi	r26, 0x00	; 0
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	30 97       	sbiw	r30, 0x00	; 0
     e7a:	19 f1       	breq	.+70     	; 0xec2 <malloc+0x6c>
     e7c:	40 81       	ld	r20, Z
     e7e:	51 81       	ldd	r21, Z+1	; 0x01
     e80:	02 81       	ldd	r16, Z+2	; 0x02
     e82:	13 81       	ldd	r17, Z+3	; 0x03
     e84:	48 17       	cp	r20, r24
     e86:	59 07       	cpc	r21, r25
     e88:	c8 f0       	brcs	.+50     	; 0xebc <malloc+0x66>
     e8a:	84 17       	cp	r24, r20
     e8c:	95 07       	cpc	r25, r21
     e8e:	69 f4       	brne	.+26     	; 0xeaa <malloc+0x54>
     e90:	10 97       	sbiw	r26, 0x00	; 0
     e92:	31 f0       	breq	.+12     	; 0xea0 <malloc+0x4a>
     e94:	12 96       	adiw	r26, 0x02	; 2
     e96:	0c 93       	st	X, r16
     e98:	12 97       	sbiw	r26, 0x02	; 2
     e9a:	13 96       	adiw	r26, 0x03	; 3
     e9c:	1c 93       	st	X, r17
     e9e:	27 c0       	rjmp	.+78     	; 0xeee <malloc+0x98>
     ea0:	00 93 a4 01 	sts	0x01A4, r16	; 0x8001a4 <__flp>
     ea4:	10 93 a5 01 	sts	0x01A5, r17	; 0x8001a5 <__flp+0x1>
     ea8:	22 c0       	rjmp	.+68     	; 0xeee <malloc+0x98>
     eaa:	21 15       	cp	r18, r1
     eac:	31 05       	cpc	r19, r1
     eae:	19 f0       	breq	.+6      	; 0xeb6 <malloc+0x60>
     eb0:	42 17       	cp	r20, r18
     eb2:	53 07       	cpc	r21, r19
     eb4:	18 f4       	brcc	.+6      	; 0xebc <malloc+0x66>
     eb6:	9a 01       	movw	r18, r20
     eb8:	bd 01       	movw	r22, r26
     eba:	ef 01       	movw	r28, r30
     ebc:	df 01       	movw	r26, r30
     ebe:	f8 01       	movw	r30, r16
     ec0:	db cf       	rjmp	.-74     	; 0xe78 <malloc+0x22>
     ec2:	21 15       	cp	r18, r1
     ec4:	31 05       	cpc	r19, r1
     ec6:	f9 f0       	breq	.+62     	; 0xf06 <malloc+0xb0>
     ec8:	28 1b       	sub	r18, r24
     eca:	39 0b       	sbc	r19, r25
     ecc:	24 30       	cpi	r18, 0x04	; 4
     ece:	31 05       	cpc	r19, r1
     ed0:	80 f4       	brcc	.+32     	; 0xef2 <malloc+0x9c>
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	9b 81       	ldd	r25, Y+3	; 0x03
     ed6:	61 15       	cp	r22, r1
     ed8:	71 05       	cpc	r23, r1
     eda:	21 f0       	breq	.+8      	; 0xee4 <malloc+0x8e>
     edc:	fb 01       	movw	r30, r22
     ede:	93 83       	std	Z+3, r25	; 0x03
     ee0:	82 83       	std	Z+2, r24	; 0x02
     ee2:	04 c0       	rjmp	.+8      	; 0xeec <malloc+0x96>
     ee4:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <__flp+0x1>
     ee8:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <__flp>
     eec:	fe 01       	movw	r30, r28
     eee:	32 96       	adiw	r30, 0x02	; 2
     ef0:	44 c0       	rjmp	.+136    	; 0xf7a <malloc+0x124>
     ef2:	fe 01       	movw	r30, r28
     ef4:	e2 0f       	add	r30, r18
     ef6:	f3 1f       	adc	r31, r19
     ef8:	81 93       	st	Z+, r24
     efa:	91 93       	st	Z+, r25
     efc:	22 50       	subi	r18, 0x02	; 2
     efe:	31 09       	sbc	r19, r1
     f00:	39 83       	std	Y+1, r19	; 0x01
     f02:	28 83       	st	Y, r18
     f04:	3a c0       	rjmp	.+116    	; 0xf7a <malloc+0x124>
     f06:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <__brkval>
     f0a:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <__brkval+0x1>
     f0e:	23 2b       	or	r18, r19
     f10:	41 f4       	brne	.+16     	; 0xf22 <malloc+0xcc>
     f12:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     f16:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     f1a:	30 93 a3 01 	sts	0x01A3, r19	; 0x8001a3 <__brkval+0x1>
     f1e:	20 93 a2 01 	sts	0x01A2, r18	; 0x8001a2 <__brkval>
     f22:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     f26:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     f2a:	21 15       	cp	r18, r1
     f2c:	31 05       	cpc	r19, r1
     f2e:	41 f4       	brne	.+16     	; 0xf40 <malloc+0xea>
     f30:	2d b7       	in	r18, 0x3d	; 61
     f32:	3e b7       	in	r19, 0x3e	; 62
     f34:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     f38:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     f3c:	24 1b       	sub	r18, r20
     f3e:	35 0b       	sbc	r19, r21
     f40:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <__brkval>
     f44:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <__brkval+0x1>
     f48:	e2 17       	cp	r30, r18
     f4a:	f3 07       	cpc	r31, r19
     f4c:	a0 f4       	brcc	.+40     	; 0xf76 <malloc+0x120>
     f4e:	2e 1b       	sub	r18, r30
     f50:	3f 0b       	sbc	r19, r31
     f52:	28 17       	cp	r18, r24
     f54:	39 07       	cpc	r19, r25
     f56:	78 f0       	brcs	.+30     	; 0xf76 <malloc+0x120>
     f58:	ac 01       	movw	r20, r24
     f5a:	4e 5f       	subi	r20, 0xFE	; 254
     f5c:	5f 4f       	sbci	r21, 0xFF	; 255
     f5e:	24 17       	cp	r18, r20
     f60:	35 07       	cpc	r19, r21
     f62:	48 f0       	brcs	.+18     	; 0xf76 <malloc+0x120>
     f64:	4e 0f       	add	r20, r30
     f66:	5f 1f       	adc	r21, r31
     f68:	50 93 a3 01 	sts	0x01A3, r21	; 0x8001a3 <__brkval+0x1>
     f6c:	40 93 a2 01 	sts	0x01A2, r20	; 0x8001a2 <__brkval>
     f70:	81 93       	st	Z+, r24
     f72:	91 93       	st	Z+, r25
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <malloc+0x124>
     f76:	e0 e0       	ldi	r30, 0x00	; 0
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	cf 01       	movw	r24, r30
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	1f 91       	pop	r17
     f82:	0f 91       	pop	r16
     f84:	08 95       	ret

00000f86 <free>:
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	09 f4       	brne	.+2      	; 0xf90 <free+0xa>
     f8e:	81 c0       	rjmp	.+258    	; 0x1092 <free+0x10c>
     f90:	fc 01       	movw	r30, r24
     f92:	32 97       	sbiw	r30, 0x02	; 2
     f94:	13 82       	std	Z+3, r1	; 0x03
     f96:	12 82       	std	Z+2, r1	; 0x02
     f98:	a0 91 a4 01 	lds	r26, 0x01A4	; 0x8001a4 <__flp>
     f9c:	b0 91 a5 01 	lds	r27, 0x01A5	; 0x8001a5 <__flp+0x1>
     fa0:	10 97       	sbiw	r26, 0x00	; 0
     fa2:	81 f4       	brne	.+32     	; 0xfc4 <free+0x3e>
     fa4:	20 81       	ld	r18, Z
     fa6:	31 81       	ldd	r19, Z+1	; 0x01
     fa8:	82 0f       	add	r24, r18
     faa:	93 1f       	adc	r25, r19
     fac:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <__brkval>
     fb0:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <__brkval+0x1>
     fb4:	28 17       	cp	r18, r24
     fb6:	39 07       	cpc	r19, r25
     fb8:	51 f5       	brne	.+84     	; 0x100e <free+0x88>
     fba:	f0 93 a3 01 	sts	0x01A3, r31	; 0x8001a3 <__brkval+0x1>
     fbe:	e0 93 a2 01 	sts	0x01A2, r30	; 0x8001a2 <__brkval>
     fc2:	67 c0       	rjmp	.+206    	; 0x1092 <free+0x10c>
     fc4:	ed 01       	movw	r28, r26
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	ce 17       	cp	r28, r30
     fcc:	df 07       	cpc	r29, r31
     fce:	40 f4       	brcc	.+16     	; 0xfe0 <free+0x5a>
     fd0:	4a 81       	ldd	r20, Y+2	; 0x02
     fd2:	5b 81       	ldd	r21, Y+3	; 0x03
     fd4:	9e 01       	movw	r18, r28
     fd6:	41 15       	cp	r20, r1
     fd8:	51 05       	cpc	r21, r1
     fda:	f1 f0       	breq	.+60     	; 0x1018 <free+0x92>
     fdc:	ea 01       	movw	r28, r20
     fde:	f5 cf       	rjmp	.-22     	; 0xfca <free+0x44>
     fe0:	d3 83       	std	Z+3, r29	; 0x03
     fe2:	c2 83       	std	Z+2, r28	; 0x02
     fe4:	40 81       	ld	r20, Z
     fe6:	51 81       	ldd	r21, Z+1	; 0x01
     fe8:	84 0f       	add	r24, r20
     fea:	95 1f       	adc	r25, r21
     fec:	c8 17       	cp	r28, r24
     fee:	d9 07       	cpc	r29, r25
     ff0:	59 f4       	brne	.+22     	; 0x1008 <free+0x82>
     ff2:	88 81       	ld	r24, Y
     ff4:	99 81       	ldd	r25, Y+1	; 0x01
     ff6:	84 0f       	add	r24, r20
     ff8:	95 1f       	adc	r25, r21
     ffa:	02 96       	adiw	r24, 0x02	; 2
     ffc:	91 83       	std	Z+1, r25	; 0x01
     ffe:	80 83       	st	Z, r24
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	9b 81       	ldd	r25, Y+3	; 0x03
    1004:	93 83       	std	Z+3, r25	; 0x03
    1006:	82 83       	std	Z+2, r24	; 0x02
    1008:	21 15       	cp	r18, r1
    100a:	31 05       	cpc	r19, r1
    100c:	29 f4       	brne	.+10     	; 0x1018 <free+0x92>
    100e:	f0 93 a5 01 	sts	0x01A5, r31	; 0x8001a5 <__flp+0x1>
    1012:	e0 93 a4 01 	sts	0x01A4, r30	; 0x8001a4 <__flp>
    1016:	3d c0       	rjmp	.+122    	; 0x1092 <free+0x10c>
    1018:	e9 01       	movw	r28, r18
    101a:	fb 83       	std	Y+3, r31	; 0x03
    101c:	ea 83       	std	Y+2, r30	; 0x02
    101e:	49 91       	ld	r20, Y+
    1020:	59 91       	ld	r21, Y+
    1022:	c4 0f       	add	r28, r20
    1024:	d5 1f       	adc	r29, r21
    1026:	ec 17       	cp	r30, r28
    1028:	fd 07       	cpc	r31, r29
    102a:	61 f4       	brne	.+24     	; 0x1044 <free+0xbe>
    102c:	80 81       	ld	r24, Z
    102e:	91 81       	ldd	r25, Z+1	; 0x01
    1030:	84 0f       	add	r24, r20
    1032:	95 1f       	adc	r25, r21
    1034:	02 96       	adiw	r24, 0x02	; 2
    1036:	e9 01       	movw	r28, r18
    1038:	99 83       	std	Y+1, r25	; 0x01
    103a:	88 83       	st	Y, r24
    103c:	82 81       	ldd	r24, Z+2	; 0x02
    103e:	93 81       	ldd	r25, Z+3	; 0x03
    1040:	9b 83       	std	Y+3, r25	; 0x03
    1042:	8a 83       	std	Y+2, r24	; 0x02
    1044:	e0 e0       	ldi	r30, 0x00	; 0
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	12 96       	adiw	r26, 0x02	; 2
    104a:	8d 91       	ld	r24, X+
    104c:	9c 91       	ld	r25, X
    104e:	13 97       	sbiw	r26, 0x03	; 3
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	19 f0       	breq	.+6      	; 0x105a <free+0xd4>
    1054:	fd 01       	movw	r30, r26
    1056:	dc 01       	movw	r26, r24
    1058:	f7 cf       	rjmp	.-18     	; 0x1048 <free+0xc2>
    105a:	8d 91       	ld	r24, X+
    105c:	9c 91       	ld	r25, X
    105e:	11 97       	sbiw	r26, 0x01	; 1
    1060:	9d 01       	movw	r18, r26
    1062:	2e 5f       	subi	r18, 0xFE	; 254
    1064:	3f 4f       	sbci	r19, 0xFF	; 255
    1066:	82 0f       	add	r24, r18
    1068:	93 1f       	adc	r25, r19
    106a:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <__brkval>
    106e:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <__brkval+0x1>
    1072:	28 17       	cp	r18, r24
    1074:	39 07       	cpc	r19, r25
    1076:	69 f4       	brne	.+26     	; 0x1092 <free+0x10c>
    1078:	30 97       	sbiw	r30, 0x00	; 0
    107a:	29 f4       	brne	.+10     	; 0x1086 <free+0x100>
    107c:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <__flp+0x1>
    1080:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <__flp>
    1084:	02 c0       	rjmp	.+4      	; 0x108a <free+0x104>
    1086:	13 82       	std	Z+3, r1	; 0x03
    1088:	12 82       	std	Z+2, r1	; 0x02
    108a:	b0 93 a3 01 	sts	0x01A3, r27	; 0x8001a3 <__brkval+0x1>
    108e:	a0 93 a2 01 	sts	0x01A2, r26	; 0x8001a2 <__brkval>
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	08 95       	ret

00001098 <realloc>:
    1098:	a0 e0       	ldi	r26, 0x00	; 0
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e2 e5       	ldi	r30, 0x52	; 82
    109e:	f8 e0       	ldi	r31, 0x08	; 8
    10a0:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__prologue_saves__+0x8>
    10a4:	ec 01       	movw	r28, r24
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	21 f4       	brne	.+8      	; 0x10b2 <realloc+0x1a>
    10aa:	cb 01       	movw	r24, r22
    10ac:	0e 94 2b 07 	call	0xe56	; 0xe56 <malloc>
    10b0:	b4 c0       	rjmp	.+360    	; 0x121a <realloc+0x182>
    10b2:	fc 01       	movw	r30, r24
    10b4:	e6 0f       	add	r30, r22
    10b6:	f7 1f       	adc	r31, r23
    10b8:	9c 01       	movw	r18, r24
    10ba:	22 50       	subi	r18, 0x02	; 2
    10bc:	31 09       	sbc	r19, r1
    10be:	e2 17       	cp	r30, r18
    10c0:	f3 07       	cpc	r31, r19
    10c2:	08 f4       	brcc	.+2      	; 0x10c6 <realloc+0x2e>
    10c4:	a8 c0       	rjmp	.+336    	; 0x1216 <realloc+0x17e>
    10c6:	d9 01       	movw	r26, r18
    10c8:	0d 91       	ld	r16, X+
    10ca:	1c 91       	ld	r17, X
    10cc:	11 97       	sbiw	r26, 0x01	; 1
    10ce:	06 17       	cp	r16, r22
    10d0:	17 07       	cpc	r17, r23
    10d2:	b0 f0       	brcs	.+44     	; 0x1100 <realloc+0x68>
    10d4:	05 30       	cpi	r16, 0x05	; 5
    10d6:	11 05       	cpc	r17, r1
    10d8:	08 f4       	brcc	.+2      	; 0x10dc <realloc+0x44>
    10da:	9b c0       	rjmp	.+310    	; 0x1212 <realloc+0x17a>
    10dc:	c8 01       	movw	r24, r16
    10de:	04 97       	sbiw	r24, 0x04	; 4
    10e0:	86 17       	cp	r24, r22
    10e2:	97 07       	cpc	r25, r23
    10e4:	08 f4       	brcc	.+2      	; 0x10e8 <realloc+0x50>
    10e6:	95 c0       	rjmp	.+298    	; 0x1212 <realloc+0x17a>
    10e8:	02 50       	subi	r16, 0x02	; 2
    10ea:	11 09       	sbc	r17, r1
    10ec:	06 1b       	sub	r16, r22
    10ee:	17 0b       	sbc	r17, r23
    10f0:	01 93       	st	Z+, r16
    10f2:	11 93       	st	Z+, r17
    10f4:	6d 93       	st	X+, r22
    10f6:	7c 93       	st	X, r23
    10f8:	cf 01       	movw	r24, r30
    10fa:	0e 94 c3 07 	call	0xf86	; 0xf86 <free>
    10fe:	89 c0       	rjmp	.+274    	; 0x1212 <realloc+0x17a>
    1100:	5b 01       	movw	r10, r22
    1102:	a0 1a       	sub	r10, r16
    1104:	b1 0a       	sbc	r11, r17
    1106:	4c 01       	movw	r8, r24
    1108:	80 0e       	add	r8, r16
    110a:	91 1e       	adc	r9, r17
    110c:	a0 91 a4 01 	lds	r26, 0x01A4	; 0x8001a4 <__flp>
    1110:	b0 91 a5 01 	lds	r27, 0x01A5	; 0x8001a5 <__flp+0x1>
    1114:	61 2c       	mov	r6, r1
    1116:	71 2c       	mov	r7, r1
    1118:	e1 2c       	mov	r14, r1
    111a:	f1 2c       	mov	r15, r1
    111c:	10 97       	sbiw	r26, 0x00	; 0
    111e:	09 f4       	brne	.+2      	; 0x1122 <realloc+0x8a>
    1120:	46 c0       	rjmp	.+140    	; 0x11ae <realloc+0x116>
    1122:	8d 91       	ld	r24, X+
    1124:	9c 91       	ld	r25, X
    1126:	11 97       	sbiw	r26, 0x01	; 1
    1128:	a8 15       	cp	r26, r8
    112a:	b9 05       	cpc	r27, r9
    112c:	b1 f5       	brne	.+108    	; 0x119a <realloc+0x102>
    112e:	6c 01       	movw	r12, r24
    1130:	42 e0       	ldi	r20, 0x02	; 2
    1132:	c4 0e       	add	r12, r20
    1134:	d1 1c       	adc	r13, r1
    1136:	ca 14       	cp	r12, r10
    1138:	db 04       	cpc	r13, r11
    113a:	78 f1       	brcs	.+94     	; 0x119a <realloc+0x102>
    113c:	4c 01       	movw	r8, r24
    113e:	8a 18       	sub	r8, r10
    1140:	9b 08       	sbc	r9, r11
    1142:	64 01       	movw	r12, r8
    1144:	42 e0       	ldi	r20, 0x02	; 2
    1146:	c4 0e       	add	r12, r20
    1148:	d1 1c       	adc	r13, r1
    114a:	12 96       	adiw	r26, 0x02	; 2
    114c:	bc 90       	ld	r11, X
    114e:	12 97       	sbiw	r26, 0x02	; 2
    1150:	13 96       	adiw	r26, 0x03	; 3
    1152:	ac 91       	ld	r26, X
    1154:	b5 e0       	ldi	r27, 0x05	; 5
    1156:	cb 16       	cp	r12, r27
    1158:	d1 04       	cpc	r13, r1
    115a:	40 f0       	brcs	.+16     	; 0x116c <realloc+0xd4>
    115c:	b2 82       	std	Z+2, r11	; 0x02
    115e:	a3 83       	std	Z+3, r26	; 0x03
    1160:	91 82       	std	Z+1, r9	; 0x01
    1162:	80 82       	st	Z, r8
    1164:	d9 01       	movw	r26, r18
    1166:	6d 93       	st	X+, r22
    1168:	7c 93       	st	X, r23
    116a:	09 c0       	rjmp	.+18     	; 0x117e <realloc+0xe6>
    116c:	0e 5f       	subi	r16, 0xFE	; 254
    116e:	1f 4f       	sbci	r17, 0xFF	; 255
    1170:	80 0f       	add	r24, r16
    1172:	91 1f       	adc	r25, r17
    1174:	f9 01       	movw	r30, r18
    1176:	91 83       	std	Z+1, r25	; 0x01
    1178:	80 83       	st	Z, r24
    117a:	eb 2d       	mov	r30, r11
    117c:	fa 2f       	mov	r31, r26
    117e:	e1 14       	cp	r14, r1
    1180:	f1 04       	cpc	r15, r1
    1182:	31 f0       	breq	.+12     	; 0x1190 <realloc+0xf8>
    1184:	d7 01       	movw	r26, r14
    1186:	13 96       	adiw	r26, 0x03	; 3
    1188:	fc 93       	st	X, r31
    118a:	ee 93       	st	-X, r30
    118c:	12 97       	sbiw	r26, 0x02	; 2
    118e:	41 c0       	rjmp	.+130    	; 0x1212 <realloc+0x17a>
    1190:	f0 93 a5 01 	sts	0x01A5, r31	; 0x8001a5 <__flp+0x1>
    1194:	e0 93 a4 01 	sts	0x01A4, r30	; 0x8001a4 <__flp>
    1198:	3c c0       	rjmp	.+120    	; 0x1212 <realloc+0x17a>
    119a:	68 16       	cp	r6, r24
    119c:	79 06       	cpc	r7, r25
    119e:	08 f4       	brcc	.+2      	; 0x11a2 <realloc+0x10a>
    11a0:	3c 01       	movw	r6, r24
    11a2:	7d 01       	movw	r14, r26
    11a4:	12 96       	adiw	r26, 0x02	; 2
    11a6:	0d 90       	ld	r0, X+
    11a8:	bc 91       	ld	r27, X
    11aa:	a0 2d       	mov	r26, r0
    11ac:	b7 cf       	rjmp	.-146    	; 0x111c <realloc+0x84>
    11ae:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__brkval>
    11b2:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <__brkval+0x1>
    11b6:	88 16       	cp	r8, r24
    11b8:	99 06       	cpc	r9, r25
    11ba:	e1 f4       	brne	.+56     	; 0x11f4 <realloc+0x15c>
    11bc:	66 16       	cp	r6, r22
    11be:	77 06       	cpc	r7, r23
    11c0:	c8 f4       	brcc	.+50     	; 0x11f4 <realloc+0x15c>
    11c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    11c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	41 f4       	brne	.+16     	; 0x11de <realloc+0x146>
    11ce:	8d b7       	in	r24, 0x3d	; 61
    11d0:	9e b7       	in	r25, 0x3e	; 62
    11d2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    11d6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    11da:	84 1b       	sub	r24, r20
    11dc:	95 0b       	sbc	r25, r21
    11de:	e8 17       	cp	r30, r24
    11e0:	f9 07       	cpc	r31, r25
    11e2:	c8 f4       	brcc	.+50     	; 0x1216 <realloc+0x17e>
    11e4:	f0 93 a3 01 	sts	0x01A3, r31	; 0x8001a3 <__brkval+0x1>
    11e8:	e0 93 a2 01 	sts	0x01A2, r30	; 0x8001a2 <__brkval>
    11ec:	f9 01       	movw	r30, r18
    11ee:	71 83       	std	Z+1, r23	; 0x01
    11f0:	60 83       	st	Z, r22
    11f2:	0f c0       	rjmp	.+30     	; 0x1212 <realloc+0x17a>
    11f4:	cb 01       	movw	r24, r22
    11f6:	0e 94 2b 07 	call	0xe56	; 0xe56 <malloc>
    11fa:	7c 01       	movw	r14, r24
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	59 f0       	breq	.+22     	; 0x1216 <realloc+0x17e>
    1200:	a8 01       	movw	r20, r16
    1202:	be 01       	movw	r22, r28
    1204:	0e 94 12 09 	call	0x1224	; 0x1224 <memcpy>
    1208:	ce 01       	movw	r24, r28
    120a:	0e 94 c3 07 	call	0xf86	; 0xf86 <free>
    120e:	c7 01       	movw	r24, r14
    1210:	04 c0       	rjmp	.+8      	; 0x121a <realloc+0x182>
    1212:	ce 01       	movw	r24, r28
    1214:	02 c0       	rjmp	.+4      	; 0x121a <realloc+0x182>
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	ee e0       	ldi	r30, 0x0E	; 14
    1220:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__epilogue_restores__+0x8>

00001224 <memcpy>:
    1224:	fb 01       	movw	r30, r22
    1226:	dc 01       	movw	r26, r24
    1228:	02 c0       	rjmp	.+4      	; 0x122e <memcpy+0xa>
    122a:	01 90       	ld	r0, Z+
    122c:	0d 92       	st	X+, r0
    122e:	41 50       	subi	r20, 0x01	; 1
    1230:	50 40       	sbci	r21, 0x00	; 0
    1232:	d8 f7       	brcc	.-10     	; 0x122a <memcpy+0x6>
    1234:	08 95       	ret

00001236 <__prologue_saves__>:
    1236:	2f 92       	push	r2
    1238:	3f 92       	push	r3
    123a:	4f 92       	push	r4
    123c:	5f 92       	push	r5
    123e:	6f 92       	push	r6
    1240:	7f 92       	push	r7
    1242:	8f 92       	push	r8
    1244:	9f 92       	push	r9
    1246:	af 92       	push	r10
    1248:	bf 92       	push	r11
    124a:	cf 92       	push	r12
    124c:	df 92       	push	r13
    124e:	ef 92       	push	r14
    1250:	ff 92       	push	r15
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	ca 1b       	sub	r28, r26
    1260:	db 0b       	sbc	r29, r27
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	de bf       	out	0x3e, r29	; 62
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	cd bf       	out	0x3d, r28	; 61
    126c:	09 94       	ijmp

0000126e <__epilogue_restores__>:
    126e:	2a 88       	ldd	r2, Y+18	; 0x12
    1270:	39 88       	ldd	r3, Y+17	; 0x11
    1272:	48 88       	ldd	r4, Y+16	; 0x10
    1274:	5f 84       	ldd	r5, Y+15	; 0x0f
    1276:	6e 84       	ldd	r6, Y+14	; 0x0e
    1278:	7d 84       	ldd	r7, Y+13	; 0x0d
    127a:	8c 84       	ldd	r8, Y+12	; 0x0c
    127c:	9b 84       	ldd	r9, Y+11	; 0x0b
    127e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1280:	b9 84       	ldd	r11, Y+9	; 0x09
    1282:	c8 84       	ldd	r12, Y+8	; 0x08
    1284:	df 80       	ldd	r13, Y+7	; 0x07
    1286:	ee 80       	ldd	r14, Y+6	; 0x06
    1288:	fd 80       	ldd	r15, Y+5	; 0x05
    128a:	0c 81       	ldd	r16, Y+4	; 0x04
    128c:	1b 81       	ldd	r17, Y+3	; 0x03
    128e:	aa 81       	ldd	r26, Y+2	; 0x02
    1290:	b9 81       	ldd	r27, Y+1	; 0x01
    1292:	ce 0f       	add	r28, r30
    1294:	d1 1d       	adc	r29, r1
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	ed 01       	movw	r28, r26
    12a2:	08 95       	ret

000012a4 <_exit>:
    12a4:	f8 94       	cli

000012a6 <__stop_program>:
    12a6:	ff cf       	rjmp	.-2      	; 0x12a6 <__stop_program>
