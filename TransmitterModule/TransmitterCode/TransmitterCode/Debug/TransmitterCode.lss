
TransmitterCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002b6  0000034a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  00800102  00800102  0000034c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fd6  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a88  00000000  00000000  000014ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a71  00000000  00000000  00001f42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  000029b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b8  00000000  00000000  00002c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c0c  00000000  00000000  0000324c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003e58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_17>
  48:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 eb       	ldi	r30, 0xB6	; 182
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 38       	cpi	r26, 0x88	; 136
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main(void)
{
	uint8_t data = 'A';
	
	UartInit(9600, 0);
  a6:	40 e0       	ldi	r20, 0x00	; 0
  a8:	60 e8       	ldi	r22, 0x80	; 128
  aa:	75 e2       	ldi	r23, 0x25	; 37
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <UartInit>
	
	sei();
  b4:	78 94       	sei
#include "uart.h"
#include <avr/interrupt.h>

int main(void)
{
	uint8_t data = 'A';
  b6:	c1 e4       	ldi	r28, 0x41	; 65
	
	sei();

    while (1) 
    {
		UartByteSend(data);
  b8:	8c 2f       	mov	r24, r28
  ba:	0e 94 14 01 	call	0x228	; 0x228 <UartByteSend>
		data++;
  be:	cf 5f       	subi	r28, 0xFF	; 255
		if(data == 'Z')
  c0:	ca 35       	cpi	r28, 0x5A	; 90
  c2:	09 f4       	brne	.+2      	; 0xc6 <main+0x20>
		{
			data = 'A';
  c4:	c1 e4       	ldi	r28, 0x41	; 65
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	89 e6       	ldi	r24, 0x69	; 105
  ca:	98 e1       	ldi	r25, 0x18	; 24
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x26>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x30>
  d6:	00 00       	nop
  d8:	ef cf       	rjmp	.-34     	; 0xb8 <main+0x12>

000000da <__vector_17>:

volatile uint8_t spiRxData = 0;
volatile uint8_t spiTxRxDone = 0;

ISR(SPI_STC_vect)
{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
	if(SPSR & (1<<SPIF))
  e6:	0d b4       	in	r0, 0x2d	; 45
  e8:	07 fe       	sbrs	r0, 7
  ea:	09 c0       	rjmp	.+18     	; 0xfe <__vector_17+0x24>
	{
		spiRxData = SPDR;
  ec:	8e b5       	in	r24, 0x2e	; 46
  ee:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <spiRxData>
		spiRxData = 0;
  f2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <spiRxData>
		spiTxRxDone = 1;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
  fc:	06 c0       	rjmp	.+12     	; 0x10a <__vector_17+0x30>
	}
	else
	{
		spiRxData = SPDR;
  fe:	8e b5       	in	r24, 0x2e	; 46
 100:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <spiRxData>
		spiTxRxDone = 1;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	}
}
 10a:	8f 91       	pop	r24
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__vector_24>:
#include <avr/interrupt.h>

volatile uint8_t status = TWI_NONE;

ISR(TWI_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	8f 93       	push	r24
	status = (TWSR & TWI_NONE);
 122:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 126:	88 7f       	andi	r24, 0xF8	; 248
 128:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 12c:	8f 91       	pop	r24
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <__vector_18>:
volatile static uint8_t rxBuffer[RXBUFFERSIZE] = {0};
volatile static uint16_t rxCount = 0;
volatile static uint8_t uartTxBusy = 1;

ISR(USART_RX_vect)
{
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	8f 93       	push	r24
 144:	9f 93       	push	r25
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
	volatile static uint16_t rxWritePos = 0;
	
	rxBuffer[rxWritePos] = UDR0;
 14a:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <rxWritePos.1621>
 14e:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <rxWritePos.1621+0x1>
 152:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 156:	e8 5f       	subi	r30, 0xF8	; 248
 158:	fe 4f       	sbci	r31, 0xFE	; 254
 15a:	80 83       	st	Z, r24
	rxCount++;
 15c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <rxCount>
 160:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <rxCount+0x1>
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <rxCount+0x1>
 16a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <rxCount>
	rxWritePos++;
 16e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rxWritePos.1621>
 172:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <rxWritePos.1621+0x1>
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <rxWritePos.1621+0x1>
 17c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <rxWritePos.1621>
	if(rxWritePos >= RXBUFFERSIZE)
 180:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rxWritePos.1621>
 184:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <rxWritePos.1621+0x1>
 188:	80 38       	cpi	r24, 0x80	; 128
 18a:	91 05       	cpc	r25, r1
 18c:	20 f0       	brcs	.+8      	; 0x196 <__vector_18+0x5e>
	{
		rxWritePos = 0;
 18e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <rxWritePos.1621+0x1>
 192:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <rxWritePos.1621>
	}
}
 196:	ff 91       	pop	r31
 198:	ef 91       	pop	r30
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <__vector_20>:

ISR(USART_TX_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	8f 93       	push	r24
	uartTxBusy = 1;
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <uartTxBusy>
}
 1ba:	8f 91       	pop	r24
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <UartInit>:

void UartInit(uint32_t baud, uint8_t highSpeed)
{
	uint8_t speed = 16;
	
	if(highSpeed != 0)
 1c6:	44 23       	and	r20, r20
 1c8:	39 f0       	breq	.+14     	; 0x1d8 <UartInit+0x12>
	{
		speed = 8;
		UCSR0A |= 1 << U2X0;
 1ca:	e0 ec       	ldi	r30, 0xC0	; 192
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	20 81       	ld	r18, Z
 1d0:	22 60       	ori	r18, 0x02	; 2
 1d2:	20 83       	st	Z, r18
{
	uint8_t speed = 16;
	
	if(highSpeed != 0)
	{
		speed = 8;
 1d4:	a8 e0       	ldi	r26, 0x08	; 8
 1d6:	01 c0       	rjmp	.+2      	; 0x1da <UartInit+0x14>
	uartTxBusy = 1;
}

void UartInit(uint32_t baud, uint8_t highSpeed)
{
	uint8_t speed = 16;
 1d8:	a0 e1       	ldi	r26, 0x10	; 16
	{
		speed = 8;
		UCSR0A |= 1 << U2X0;
	}
	
	baud = (F_CPU/(speed*baud)) - 1;
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	9b 01       	movw	r18, r22
 1de:	ac 01       	movw	r20, r24
 1e0:	0e 94 3f 01 	call	0x27e	; 0x27e <__muluhisi3>
 1e4:	9b 01       	movw	r18, r22
 1e6:	ac 01       	movw	r20, r24
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	74 e2       	ldi	r23, 0x24	; 36
 1ec:	84 ef       	ldi	r24, 0xF4	; 244
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 1d 01 	call	0x23a	; 0x23a <__udivmodsi4>
 1f4:	ba 01       	movw	r22, r20
 1f6:	a9 01       	movw	r20, r18
 1f8:	41 50       	subi	r20, 0x01	; 1
 1fa:	51 09       	sbc	r21, r1
 1fc:	61 09       	sbc	r22, r1
 1fe:	71 09       	sbc	r23, r1
	
	UBRR0H = (baud & 0xF00) >> 8;
 200:	db 01       	movw	r26, r22
 202:	ca 01       	movw	r24, r20
 204:	88 27       	eor	r24, r24
 206:	9f 70       	andi	r25, 0x0F	; 15
 208:	aa 27       	eor	r26, r26
 20a:	bb 27       	eor	r27, r27
 20c:	89 2f       	mov	r24, r25
 20e:	9a 2f       	mov	r25, r26
 210:	ab 2f       	mov	r26, r27
 212:	bb 27       	eor	r27, r27
 214:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (baud & 0x00FF);
 218:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0) | (1 << TXCIE0);	
 21c:	e1 ec       	ldi	r30, 0xC1	; 193
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	88 6d       	ori	r24, 0xD8	; 216
 224:	80 83       	st	Z, r24
 226:	08 95       	ret

00000228 <UartByteSend>:
}

void UartByteSend(uint8_t byte)
{
	while(uartTxBusy == 0);
 228:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <uartTxBusy>
 22c:	99 23       	and	r25, r25
 22e:	e1 f3       	breq	.-8      	; 0x228 <UartByteSend>
	uartTxBusy = 0;
 230:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <uartTxBusy>
	UDR0 = byte;
 234:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 238:	08 95       	ret

0000023a <__udivmodsi4>:
 23a:	a1 e2       	ldi	r26, 0x21	; 33
 23c:	1a 2e       	mov	r1, r26
 23e:	aa 1b       	sub	r26, r26
 240:	bb 1b       	sub	r27, r27
 242:	fd 01       	movw	r30, r26
 244:	0d c0       	rjmp	.+26     	; 0x260 <__udivmodsi4_ep>

00000246 <__udivmodsi4_loop>:
 246:	aa 1f       	adc	r26, r26
 248:	bb 1f       	adc	r27, r27
 24a:	ee 1f       	adc	r30, r30
 24c:	ff 1f       	adc	r31, r31
 24e:	a2 17       	cp	r26, r18
 250:	b3 07       	cpc	r27, r19
 252:	e4 07       	cpc	r30, r20
 254:	f5 07       	cpc	r31, r21
 256:	20 f0       	brcs	.+8      	; 0x260 <__udivmodsi4_ep>
 258:	a2 1b       	sub	r26, r18
 25a:	b3 0b       	sbc	r27, r19
 25c:	e4 0b       	sbc	r30, r20
 25e:	f5 0b       	sbc	r31, r21

00000260 <__udivmodsi4_ep>:
 260:	66 1f       	adc	r22, r22
 262:	77 1f       	adc	r23, r23
 264:	88 1f       	adc	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	1a 94       	dec	r1
 26a:	69 f7       	brne	.-38     	; 0x246 <__udivmodsi4_loop>
 26c:	60 95       	com	r22
 26e:	70 95       	com	r23
 270:	80 95       	com	r24
 272:	90 95       	com	r25
 274:	9b 01       	movw	r18, r22
 276:	ac 01       	movw	r20, r24
 278:	bd 01       	movw	r22, r26
 27a:	cf 01       	movw	r24, r30
 27c:	08 95       	ret

0000027e <__muluhisi3>:
 27e:	0e 94 4a 01 	call	0x294	; 0x294 <__umulhisi3>
 282:	a5 9f       	mul	r26, r21
 284:	90 0d       	add	r25, r0
 286:	b4 9f       	mul	r27, r20
 288:	90 0d       	add	r25, r0
 28a:	a4 9f       	mul	r26, r20
 28c:	80 0d       	add	r24, r0
 28e:	91 1d       	adc	r25, r1
 290:	11 24       	eor	r1, r1
 292:	08 95       	ret

00000294 <__umulhisi3>:
 294:	a2 9f       	mul	r26, r18
 296:	b0 01       	movw	r22, r0
 298:	b3 9f       	mul	r27, r19
 29a:	c0 01       	movw	r24, r0
 29c:	a3 9f       	mul	r26, r19
 29e:	70 0d       	add	r23, r0
 2a0:	81 1d       	adc	r24, r1
 2a2:	11 24       	eor	r1, r1
 2a4:	91 1d       	adc	r25, r1
 2a6:	b2 9f       	mul	r27, r18
 2a8:	70 0d       	add	r23, r0
 2aa:	81 1d       	adc	r24, r1
 2ac:	11 24       	eor	r1, r1
 2ae:	91 1d       	adc	r25, r1
 2b0:	08 95       	ret

000002b2 <_exit>:
 2b2:	f8 94       	cli

000002b4 <__stop_program>:
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <__stop_program>
