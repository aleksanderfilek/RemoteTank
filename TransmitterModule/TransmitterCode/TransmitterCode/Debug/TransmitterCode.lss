
TransmitterCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000004f2  00000586  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000094  00800102  00800102  00000588  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001160  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b2d  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008cf  00000000  00000000  000023a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  00002c74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071f  00000000  00000000  00002f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007a6  00000000  00000000  00003673  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003e19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_14>
  3c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 1b 01 	jmp	0x236	; 0x236 <__vector_17>
  48:	0c 94 39 01 	jmp	0x272	; 0x272 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ef       	ldi	r30, 0xF2	; 242
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 39       	cpi	r26, 0x96	; 150
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <AudioInit>:
#include <avr/io.h>
#include <util/delay.h>

void AudioInit()
{
	DDRC |= (1<<DDC4);
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	80 61       	ori	r24, 0x10	; 16
  aa:	87 b9       	out	0x07, r24	; 7
	PORTC = 0;
  ac:	18 b8       	out	0x08, r1	; 8
  ae:	08 95       	ret

000000b0 <AudioBeep>:
}

void AudioBeep(int times)
{
  b0:	ac 01       	movw	r20, r24
	for(int i = 0; i < times; i++)
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	18 c0       	rjmp	.+48     	; 0xe8 <AudioBeep+0x38>
	{
		PORTC |= (1<<DDC4);
  b8:	98 b1       	in	r25, 0x08	; 8
  ba:	90 61       	ori	r25, 0x10	; 16
  bc:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	6f ef       	ldi	r22, 0xFF	; 255
  c0:	83 ec       	ldi	r24, 0xC3	; 195
  c2:	99 e0       	ldi	r25, 0x09	; 9
  c4:	61 50       	subi	r22, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <AudioBeep+0x14>
  cc:	00 c0       	rjmp	.+0      	; 0xce <AudioBeep+0x1e>
  ce:	00 00       	nop
		_delay_ms(200);
		PORTC = 0;
  d0:	18 b8       	out	0x08, r1	; 8
  d2:	6f ef       	ldi	r22, 0xFF	; 255
  d4:	81 ee       	ldi	r24, 0xE1	; 225
  d6:	94 e0       	ldi	r25, 0x04	; 4
  d8:	61 50       	subi	r22, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <AudioBeep+0x28>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <AudioBeep+0x32>
  e2:	00 00       	nop
	PORTC = 0;
}

void AudioBeep(int times)
{
	for(int i = 0; i < times; i++)
  e4:	2f 5f       	subi	r18, 0xFF	; 255
  e6:	3f 4f       	sbci	r19, 0xFF	; 255
  e8:	24 17       	cp	r18, r20
  ea:	35 07       	cpc	r19, r21
  ec:	2c f3       	brlt	.-54     	; 0xb8 <AudioBeep+0x8>
		PORTC |= (1<<DDC4);
		_delay_ms(200);
		PORTC = 0;
		_delay_ms(100);
	}
  ee:	08 95       	ret

000000f0 <main>:
int main(void)
{		
	//radio = (Nrf24Radio*)malloc(sizeof(Nrf24Radio));
	//Nrf24Init(radio);
	//
	UartInit(9600, 0);
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	60 e8       	ldi	r22, 0x80	; 128
  f4:	75 e2       	ldi	r23, 0x25	; 37
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <UartInit>
	//UartCallbackSet(CallbackUart, COMMAND_LENGTH);
	//
	//SpiMasterInit();
	sei();
  fe:	78 94       	sei
		//UartByteSend(ERR_RADIO_NOT_STARTED); // jakies zbieranie errrorowy by sie przydalo
		//return 0;
	//}
	//
	//Nrf24OpenWritingPipe(radio, pipe);
	AudioInit();
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <AudioInit>
	
    while (1) 
    {
		if(UartCountRead() > 0)
 104:	0e 94 0d 02 	call	0x41a	; 0x41a <UartCountRead>
 108:	89 2b       	or	r24, r25
 10a:	e1 f3       	breq	.-8      	; 0x104 <main+0x14>
		{
			char msg = UartRead();
 10c:	0e 94 12 02 	call	0x424	; 0x424 <UartRead>
			AudioBeep(2);
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 58 00 	call	0xb0	; 0xb0 <AudioBeep>
 118:	f5 cf       	rjmp	.-22     	; 0x104 <main+0x14>

0000011a <__vector_15>:
#include <avr/io.h>

volatile static int factor;
volatile static int nextFactor;
ISR (TIMER0_COMPB_vect)
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	3f 93       	push	r19
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
	static int counter = 0;
	counter++;
 12c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <counter.1611>
 130:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <counter.1611+0x1>
 134:	2f 5f       	subi	r18, 0xFF	; 255
 136:	3f 4f       	sbci	r19, 0xFF	; 255
 138:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <counter.1611+0x1>
 13c:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <counter.1611>

	uint8_t high = PORTD & (1<<DDD5);
	
	uint8_t realFactor = (high) ? factor : 256 -  factor;
 140:	5d 99       	sbic	0x0b, 5	; 11
 142:	06 c0       	rjmp	.+12     	; 0x150 <__vector_15+0x36>
 144:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <factor>
 148:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <factor+0x1>
 14c:	81 95       	neg	r24
 14e:	04 c0       	rjmp	.+8      	; 0x158 <__vector_15+0x3e>
 150:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <factor>
 154:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <factor+0x1>
	if(counter == realFactor)
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	28 17       	cp	r18, r24
 15c:	39 07       	cpc	r19, r25
 15e:	d9 f4       	brne	.+54     	; 0x196 <__vector_15+0x7c>
	{
		if(factor != nextFactor)
 160:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <factor>
 164:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <factor+0x1>
 168:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <nextFactor>
 16c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <nextFactor+0x1>
 170:	28 17       	cp	r18, r24
 172:	39 07       	cpc	r19, r25
 174:	41 f0       	breq	.+16     	; 0x186 <__vector_15+0x6c>
		{
			factor = nextFactor;
 176:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <nextFactor>
 17a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <nextFactor+0x1>
 17e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <factor+0x1>
 182:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <factor>
		}
		PORTD ^= (1<<DDD5);
 186:	9b b1       	in	r25, 0x0b	; 11
 188:	80 e2       	ldi	r24, 0x20	; 32
 18a:	89 27       	eor	r24, r25
 18c:	8b b9       	out	0x0b, r24	; 11
		counter = 0;
 18e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <counter.1611+0x1>
 192:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <counter.1611>
	}
}
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	3f 91       	pop	r19
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <__vector_14>:
ISR (TIMER0_COMPA_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
	static int counter = 0;
	counter++;
 1ba:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 1be:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
 1c2:	2f 5f       	subi	r18, 0xFF	; 255
 1c4:	3f 4f       	sbci	r19, 0xFF	; 255
 1c6:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <__data_end+0x1>
 1ca:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__data_end>

	uint8_t high = PORTD & (1<<DDD6);
	
	uint8_t realFactor = (high) ? factor : 256 -  factor;
 1ce:	5e 99       	sbic	0x0b, 6	; 11
 1d0:	06 c0       	rjmp	.+12     	; 0x1de <__vector_14+0x36>
 1d2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <factor>
 1d6:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <factor+0x1>
 1da:	81 95       	neg	r24
 1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <__vector_14+0x3e>
 1de:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <factor>
 1e2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <factor+0x1>
	if(counter == realFactor)
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	28 17       	cp	r18, r24
 1ea:	39 07       	cpc	r19, r25
 1ec:	d9 f4       	brne	.+54     	; 0x224 <__vector_14+0x7c>
	{
		if(factor != nextFactor)
 1ee:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <factor>
 1f2:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <factor+0x1>
 1f6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <nextFactor>
 1fa:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <nextFactor+0x1>
 1fe:	28 17       	cp	r18, r24
 200:	39 07       	cpc	r19, r25
 202:	41 f0       	breq	.+16     	; 0x214 <__vector_14+0x6c>
		{
			factor = nextFactor;
 204:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <nextFactor>
 208:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <nextFactor+0x1>
 20c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <factor+0x1>
 210:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <factor>
		}
		PORTD ^= (1<<DDD6);
 214:	9b b1       	in	r25, 0x0b	; 11
 216:	80 e4       	ldi	r24, 0x40	; 64
 218:	89 27       	eor	r24, r25
 21a:	8b b9       	out	0x0b, r24	; 11
		counter = 0;
 21c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 220:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	}
}
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	3f 91       	pop	r19
 22a:	2f 91       	pop	r18
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <__vector_17>:

volatile uint8_t spiRxData = 0;
volatile uint8_t spiTxRxDone = 0;

ISR(SPI_STC_vect)
{
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
 240:	8f 93       	push	r24
	if(SPSR & (1<<SPIF))
 242:	0d b4       	in	r0, 0x2d	; 45
 244:	07 fe       	sbrs	r0, 7
 246:	09 c0       	rjmp	.+18     	; 0x25a <__vector_17+0x24>
	{
		spiRxData = SPDR;
 248:	8e b5       	in	r24, 0x2e	; 46
 24a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <spiRxData>
		spiRxData = 0;
 24e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <spiRxData>
		spiTxRxDone = 1;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <spiTxRxDone>
 258:	06 c0       	rjmp	.+12     	; 0x266 <__vector_17+0x30>
	}
	else
	{
		spiRxData = SPDR;
 25a:	8e b5       	in	r24, 0x2e	; 46
 25c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <spiRxData>
		spiTxRxDone = 1;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <spiTxRxDone>
	}
}
 266:	8f 91       	pop	r24
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

00000272 <__vector_18>:
	{
		UartByteSend(str[i]);
		i++;
	} while (str[i] != '\0');
	UartByteSend(str[i]);
}
 272:	1f 92       	push	r1
 274:	0f 92       	push	r0
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	0f 92       	push	r0
 27a:	11 24       	eor	r1, r1
 27c:	af 92       	push	r10
 27e:	bf 92       	push	r11
 280:	cf 92       	push	r12
 282:	df 92       	push	r13
 284:	ef 92       	push	r14
 286:	ff 92       	push	r15
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	2f 93       	push	r18
 28e:	3f 93       	push	r19
 290:	4f 93       	push	r20
 292:	5f 93       	push	r21
 294:	6f 93       	push	r22
 296:	7f 93       	push	r23
 298:	8f 93       	push	r24
 29a:	9f 93       	push	r25
 29c:	af 93       	push	r26
 29e:	bf 93       	push	r27
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	de b7       	in	r29, 0x3e	; 62
 2ac:	0d b7       	in	r16, 0x3d	; 61
 2ae:	1e b7       	in	r17, 0x3e	; 62
 2b0:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <rxWritePos.1762>
 2b4:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <rxWritePos.1762+0x1>
 2b8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2bc:	ea 5e       	subi	r30, 0xEA	; 234
 2be:	fe 4f       	sbci	r31, 0xFE	; 254
 2c0:	80 83       	st	Z, r24
 2c2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <rxCount>
 2c6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <rxCount+0x1>
 2ca:	01 96       	adiw	r24, 0x01	; 1
 2cc:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <rxCount+0x1>
 2d0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <rxCount>
 2d4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <rxWritePos.1762>
 2d8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <rxWritePos.1762+0x1>
 2dc:	01 96       	adiw	r24, 0x01	; 1
 2de:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <rxWritePos.1762+0x1>
 2e2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <rxWritePos.1762>
 2e6:	e0 90 12 01 	lds	r14, 0x0112	; 0x800112 <desiredLength>
 2ea:	f0 90 13 01 	lds	r15, 0x0113	; 0x800113 <desiredLength+0x1>
 2ee:	e1 14       	cp	r14, r1
 2f0:	f1 04       	cpc	r15, r1
 2f2:	41 f1       	breq	.+80     	; 0x344 <__vector_18+0xd2>
 2f4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <rxCount>
 2f8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <rxCount+0x1>
 2fc:	e8 16       	cp	r14, r24
 2fe:	f9 06       	cpc	r15, r25
 300:	09 f5       	brne	.+66     	; 0x344 <__vector_18+0xd2>
 302:	8d b7       	in	r24, 0x3d	; 61
 304:	9e b7       	in	r25, 0x3e	; 62
 306:	8e 19       	sub	r24, r14
 308:	9f 09       	sbc	r25, r15
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	f8 94       	cli
 30e:	9e bf       	out	0x3e, r25	; 62
 310:	0f be       	out	0x3f, r0	; 63
 312:	8d bf       	out	0x3d, r24	; 61
 314:	01 96       	adiw	r24, 0x01	; 1
 316:	6c 01       	movw	r12, r24
 318:	a7 01       	movw	r20, r14
 31a:	66 e1       	ldi	r22, 0x16	; 22
 31c:	71 e0       	ldi	r23, 0x01	; 1
 31e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <memcpy>
 322:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <callback>
 326:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <callback+0x1>
 32a:	b7 01       	movw	r22, r14
 32c:	c6 01       	movw	r24, r12
 32e:	09 95       	icall
 330:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <rxWritePos.1762+0x1>
 334:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <rxWritePos.1762>
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	f8 94       	cli
 33c:	1e bf       	out	0x3e, r17	; 62
 33e:	0f be       	out	0x3f, r0	; 63
 340:	0d bf       	out	0x3d, r16	; 61
 342:	0b c0       	rjmp	.+22     	; 0x35a <__vector_18+0xe8>
 344:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <rxWritePos.1762>
 348:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <rxWritePos.1762+0x1>
 34c:	80 38       	cpi	r24, 0x80	; 128
 34e:	91 05       	cpc	r25, r1
 350:	20 f0       	brcs	.+8      	; 0x35a <__vector_18+0xe8>
 352:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <rxWritePos.1762+0x1>
 356:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <rxWritePos.1762>
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	f8 94       	cli
 35e:	1e bf       	out	0x3e, r17	; 62
 360:	0f be       	out	0x3f, r0	; 63
 362:	0d bf       	out	0x3d, r16	; 61
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	ff 91       	pop	r31
 36a:	ef 91       	pop	r30
 36c:	bf 91       	pop	r27
 36e:	af 91       	pop	r26
 370:	9f 91       	pop	r25
 372:	8f 91       	pop	r24
 374:	7f 91       	pop	r23
 376:	6f 91       	pop	r22
 378:	5f 91       	pop	r21
 37a:	4f 91       	pop	r20
 37c:	3f 91       	pop	r19
 37e:	2f 91       	pop	r18
 380:	1f 91       	pop	r17
 382:	0f 91       	pop	r16
 384:	ff 90       	pop	r15
 386:	ef 90       	pop	r14
 388:	df 90       	pop	r13
 38a:	cf 90       	pop	r12
 38c:	bf 90       	pop	r11
 38e:	af 90       	pop	r10
 390:	0f 90       	pop	r0
 392:	0f be       	out	0x3f, r0	; 63
 394:	0f 90       	pop	r0
 396:	1f 90       	pop	r1
 398:	18 95       	reti

0000039a <__vector_20>:
 39a:	1f 92       	push	r1
 39c:	0f 92       	push	r0
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	0f 92       	push	r0
 3a2:	11 24       	eor	r1, r1
 3a4:	8f 93       	push	r24
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3ac:	8f 91       	pop	r24
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <UartInit>:
 3b8:	44 23       	and	r20, r20
 3ba:	39 f0       	breq	.+14     	; 0x3ca <UartInit+0x12>
 3bc:	e0 ec       	ldi	r30, 0xC0	; 192
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	20 81       	ld	r18, Z
 3c2:	22 60       	ori	r18, 0x02	; 2
 3c4:	20 83       	st	Z, r18
 3c6:	a8 e0       	ldi	r26, 0x08	; 8
 3c8:	01 c0       	rjmp	.+2      	; 0x3cc <UartInit+0x14>
 3ca:	a0 e1       	ldi	r26, 0x10	; 16
 3cc:	b0 e0       	ldi	r27, 0x00	; 0
 3ce:	9b 01       	movw	r18, r22
 3d0:	ac 01       	movw	r20, r24
 3d2:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__muluhisi3>
 3d6:	9b 01       	movw	r18, r22
 3d8:	ac 01       	movw	r20, r24
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	74 e2       	ldi	r23, 0x24	; 36
 3de:	84 ef       	ldi	r24, 0xF4	; 244
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 32 02 	call	0x464	; 0x464 <__udivmodsi4>
 3e6:	ba 01       	movw	r22, r20
 3e8:	a9 01       	movw	r20, r18
 3ea:	41 50       	subi	r20, 0x01	; 1
 3ec:	51 09       	sbc	r21, r1
 3ee:	61 09       	sbc	r22, r1
 3f0:	71 09       	sbc	r23, r1
 3f2:	db 01       	movw	r26, r22
 3f4:	ca 01       	movw	r24, r20
 3f6:	88 27       	eor	r24, r24
 3f8:	9f 70       	andi	r25, 0x0F	; 15
 3fa:	aa 27       	eor	r26, r26
 3fc:	bb 27       	eor	r27, r27
 3fe:	89 2f       	mov	r24, r25
 400:	9a 2f       	mov	r25, r26
 402:	ab 2f       	mov	r26, r27
 404:	bb 27       	eor	r27, r27
 406:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 40a:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 40e:	e1 ec       	ldi	r30, 0xC1	; 193
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	80 81       	ld	r24, Z
 414:	88 6d       	ori	r24, 0xD8	; 216
 416:	80 83       	st	Z, r24
 418:	08 95       	ret

0000041a <UartCountRead>:

uint16_t UartCountRead()
{
	return rxCount;
 41a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <rxCount>
 41e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <rxCount+0x1>
}
 422:	08 95       	ret

00000424 <UartRead>:
uint8_t UartRead()
{
	static uint16_t rxReadPos = 0;
	uint8_t data = 0;
	
	data = rxBuffer[rxReadPos];
 424:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <rxReadPos.1802>
 428:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <rxReadPos.1802+0x1>
 42c:	f9 01       	movw	r30, r18
 42e:	ea 5e       	subi	r30, 0xEA	; 234
 430:	fe 4f       	sbci	r31, 0xFE	; 254
 432:	80 81       	ld	r24, Z
	rxReadPos++;
 434:	2f 5f       	subi	r18, 0xFF	; 255
 436:	3f 4f       	sbci	r19, 0xFF	; 255
 438:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <rxReadPos.1802+0x1>
 43c:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <rxReadPos.1802>
	rxCount--;
 440:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <rxCount>
 444:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <rxCount+0x1>
 448:	41 50       	subi	r20, 0x01	; 1
 44a:	51 09       	sbc	r21, r1
 44c:	50 93 15 01 	sts	0x0115, r21	; 0x800115 <rxCount+0x1>
 450:	40 93 14 01 	sts	0x0114, r20	; 0x800114 <rxCount>
	if(rxReadPos >= RXBUFFERSIZE)
 454:	20 38       	cpi	r18, 0x80	; 128
 456:	31 05       	cpc	r19, r1
 458:	20 f0       	brcs	.+8      	; 0x462 <UartRead+0x3e>
	{
		rxReadPos = 0;
 45a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <rxReadPos.1802+0x1>
 45e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <rxReadPos.1802>
	}
	
	return data;
 462:	08 95       	ret

00000464 <__udivmodsi4>:
 464:	a1 e2       	ldi	r26, 0x21	; 33
 466:	1a 2e       	mov	r1, r26
 468:	aa 1b       	sub	r26, r26
 46a:	bb 1b       	sub	r27, r27
 46c:	fd 01       	movw	r30, r26
 46e:	0d c0       	rjmp	.+26     	; 0x48a <__udivmodsi4_ep>

00000470 <__udivmodsi4_loop>:
 470:	aa 1f       	adc	r26, r26
 472:	bb 1f       	adc	r27, r27
 474:	ee 1f       	adc	r30, r30
 476:	ff 1f       	adc	r31, r31
 478:	a2 17       	cp	r26, r18
 47a:	b3 07       	cpc	r27, r19
 47c:	e4 07       	cpc	r30, r20
 47e:	f5 07       	cpc	r31, r21
 480:	20 f0       	brcs	.+8      	; 0x48a <__udivmodsi4_ep>
 482:	a2 1b       	sub	r26, r18
 484:	b3 0b       	sbc	r27, r19
 486:	e4 0b       	sbc	r30, r20
 488:	f5 0b       	sbc	r31, r21

0000048a <__udivmodsi4_ep>:
 48a:	66 1f       	adc	r22, r22
 48c:	77 1f       	adc	r23, r23
 48e:	88 1f       	adc	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	1a 94       	dec	r1
 494:	69 f7       	brne	.-38     	; 0x470 <__udivmodsi4_loop>
 496:	60 95       	com	r22
 498:	70 95       	com	r23
 49a:	80 95       	com	r24
 49c:	90 95       	com	r25
 49e:	9b 01       	movw	r18, r22
 4a0:	ac 01       	movw	r20, r24
 4a2:	bd 01       	movw	r22, r26
 4a4:	cf 01       	movw	r24, r30
 4a6:	08 95       	ret

000004a8 <__muluhisi3>:
 4a8:	0e 94 5f 02 	call	0x4be	; 0x4be <__umulhisi3>
 4ac:	a5 9f       	mul	r26, r21
 4ae:	90 0d       	add	r25, r0
 4b0:	b4 9f       	mul	r27, r20
 4b2:	90 0d       	add	r25, r0
 4b4:	a4 9f       	mul	r26, r20
 4b6:	80 0d       	add	r24, r0
 4b8:	91 1d       	adc	r25, r1
 4ba:	11 24       	eor	r1, r1
 4bc:	08 95       	ret

000004be <__umulhisi3>:
 4be:	a2 9f       	mul	r26, r18
 4c0:	b0 01       	movw	r22, r0
 4c2:	b3 9f       	mul	r27, r19
 4c4:	c0 01       	movw	r24, r0
 4c6:	a3 9f       	mul	r26, r19
 4c8:	70 0d       	add	r23, r0
 4ca:	81 1d       	adc	r24, r1
 4cc:	11 24       	eor	r1, r1
 4ce:	91 1d       	adc	r25, r1
 4d0:	b2 9f       	mul	r27, r18
 4d2:	70 0d       	add	r23, r0
 4d4:	81 1d       	adc	r24, r1
 4d6:	11 24       	eor	r1, r1
 4d8:	91 1d       	adc	r25, r1
 4da:	08 95       	ret

000004dc <memcpy>:
 4dc:	fb 01       	movw	r30, r22
 4de:	dc 01       	movw	r26, r24
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <memcpy+0xa>
 4e2:	01 90       	ld	r0, Z+
 4e4:	0d 92       	st	X+, r0
 4e6:	41 50       	subi	r20, 0x01	; 1
 4e8:	50 40       	sbci	r21, 0x00	; 0
 4ea:	d8 f7       	brcc	.-10     	; 0x4e2 <memcpy+0x6>
 4ec:	08 95       	ret

000004ee <_exit>:
 4ee:	f8 94       	cli

000004f0 <__stop_program>:
 4f0:	ff cf       	rjmp	.-2      	; 0x4f0 <__stop_program>
