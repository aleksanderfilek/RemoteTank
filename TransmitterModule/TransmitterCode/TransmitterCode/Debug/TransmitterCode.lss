
TransmitterCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000e4e  00000ee2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000098  00800108  00800108  00000eea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002528  00000000  00000000  0000118c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e89  00000000  00000000  000036b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012b3  00000000  00000000  0000453d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006a0  00000000  00000000  000057f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ec  00000000  00000000  00005e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ce3  00000000  00000000  0000677c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  0000845f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 37 04 	jmp	0x86e	; 0x86e <__vector_14>
  3c:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 7e 04 	jmp	0x8fc	; 0x8fc <__vector_17>
  48:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 ac 04 	jmp	0x958	; 0x958 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e4       	ldi	r30, 0x4E	; 78
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 3a       	cpi	r26, 0xA0	; 160
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  9e:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CallbackUart>:

const uint64_t pipe = 0xE8E8F0F0E1LL;
Nrf24Radio* radio;

void CallbackUart(uint8_t* data, uint16_t length)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	a0 97       	sbiw	r28, 0x20	; 32
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	f8 94       	cli
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	cd bf       	out	0x3d, r28	; 61
  be:	8c 01       	movw	r16, r24
  c0:	46 2f       	mov	r20, r22
	Nrf24Write(radio, data, length);
  c2:	bc 01       	movw	r22, r24
  c4:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <radio>
  c8:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <radio+0x1>
  cc:	0e 94 26 03 	call	0x64c	; 0x64c <Nrf24Write>
	
	uint8_t waitForResponse = data[1];
  d0:	f8 01       	movw	r30, r16
  d2:	81 81       	ldd	r24, Z+1	; 0x01
	if(waitForResponse == 0)
  d4:	88 23       	and	r24, r24
  d6:	09 f4       	brne	.+2      	; 0xda <CallbackUart+0x34>
  d8:	40 c0       	rjmp	.+128    	; 0x15a <CallbackUart+0xb4>
		return;
		
	Nrf24OpenReadingPipe(radio, pipe);
  da:	01 ee       	ldi	r16, 0xE1	; 225
  dc:	10 ef       	ldi	r17, 0xF0	; 240
  de:	20 ef       	ldi	r18, 0xF0	; 240
  e0:	38 ee       	ldi	r19, 0xE8	; 232
  e2:	48 ee       	ldi	r20, 0xE8	; 232
  e4:	50 e0       	ldi	r21, 0x00	; 0
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <radio>
  ee:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <radio+0x1>
  f2:	0e 94 9a 02 	call	0x534	; 0x534 <Nrf24OpenReadingPipe>
	Nrf24StartListening(radio);
  f6:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <radio>
  fa:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <radio+0x1>
  fe:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Nrf24StartListening>
	
	while(Nrf24Available(radio) == 0){}
 102:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <radio>
 106:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <radio+0x1>
 10a:	0e 94 e6 03 	call	0x7cc	; 0x7cc <Nrf24Available>
 10e:	88 23       	and	r24, r24
 110:	c1 f3       	breq	.-16     	; 0x102 <CallbackUart+0x5c>
		
	uint8_t buffer[32];
	Nrf24Read(radio, buffer, 32);
 112:	40 e2       	ldi	r20, 0x20	; 32
 114:	be 01       	movw	r22, r28
 116:	6f 5f       	subi	r22, 0xFF	; 255
 118:	7f 4f       	sbci	r23, 0xFF	; 255
 11a:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <radio>
 11e:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <radio+0x1>
 122:	0e 94 95 03 	call	0x72a	; 0x72a <Nrf24Read>
	UartArraySend(buffer, 32);
 126:	60 e2       	ldi	r22, 0x20	; 32
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	ce 01       	movw	r24, r28
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	0e 94 a3 05 	call	0xb46	; 0xb46 <UartArraySend>
	
	Nrf24StopListening(radio);
 132:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <radio>
 136:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <radio+0x1>
 13a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Nrf24StopListening>
	Nrf24OpenWritingPipe(radio, pipe);
 13e:	01 ee       	ldi	r16, 0xE1	; 225
 140:	10 ef       	ldi	r17, 0xF0	; 240
 142:	20 ef       	ldi	r18, 0xF0	; 240
 144:	38 ee       	ldi	r19, 0xE8	; 232
 146:	48 ee       	ldi	r20, 0xE8	; 232
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <radio>
 152:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <radio+0x1>
 156:	0e 94 65 02 	call	0x4ca	; 0x4ca <Nrf24OpenWritingPipe>
}
 15a:	a0 96       	adiw	r28, 0x20	; 32
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	f8 94       	cli
 160:	de bf       	out	0x3e, r29	; 62
 162:	0f be       	out	0x3f, r0	; 63
 164:	cd bf       	out	0x3d, r28	; 61
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	08 95       	ret

00000170 <main>:

int main(void)
{		
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
	radio = (Nrf24Radio*)malloc(sizeof(Nrf24Radio));
 174:	83 e1       	ldi	r24, 0x13	; 19
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <malloc>
 17c:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <radio+0x1>
 180:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <radio>
	Nrf24Init(radio);
 184:	0e 94 b7 01 	call	0x36e	; 0x36e <Nrf24Init>
	
	UartInit(9600, 0);
 188:	40 e0       	ldi	r20, 0x00	; 0
 18a:	60 e8       	ldi	r22, 0x80	; 128
 18c:	75 e2       	ldi	r23, 0x25	; 37
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 60 05 	call	0xac0	; 0xac0 <UartInit>
	UartCallbackSet(CallbackUart, COMMAND_LENGTH);
 196:	60 e2       	ldi	r22, 0x20	; 32
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	83 e5       	ldi	r24, 0x53	; 83
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 91 05 	call	0xb22	; 0xb22 <UartCallbackSet>
	
	SpiMasterInit();
 1a2:	0e 94 9c 04 	call	0x938	; 0x938 <SpiMasterInit>
	sei();
 1a6:	78 94       	sei
	
	if(Nrf24Begin(radio) == 0)
 1a8:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <radio>
 1ac:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <radio+0x1>
 1b0:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <Nrf24Begin>
 1b4:	88 23       	and	r24, r24
 1b6:	79 f0       	breq	.+30     	; 0x1d6 <main+0x66>
	{
		UartByteSend(ERR_RADIO_NOT_STARTED);
		return 0;
	}
	
	Nrf24OpenWritingPipe(radio, pipe);
 1b8:	01 ee       	ldi	r16, 0xE1	; 225
 1ba:	10 ef       	ldi	r17, 0xF0	; 240
 1bc:	20 ef       	ldi	r18, 0xF0	; 240
 1be:	38 ee       	ldi	r19, 0xE8	; 232
 1c0:	48 ee       	ldi	r20, 0xE8	; 232
 1c2:	50 e0       	ldi	r21, 0x00	; 0
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <radio>
 1cc:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <radio+0x1>
 1d0:	0e 94 65 02 	call	0x4ca	; 0x4ca <Nrf24OpenWritingPipe>
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <main+0x64>
	SpiMasterInit();
	sei();
	
	if(Nrf24Begin(radio) == 0)
	{
		UartByteSend(ERR_RADIO_NOT_STARTED);
 1d6:	85 e0       	ldi	r24, 0x05	; 5
 1d8:	0e 94 9a 05 	call	0xb34	; 0xb34 <UartByteSend>
    {

    }
	
	free(radio);
}
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	1f 91       	pop	r17
 1e2:	0f 91       	pop	r16
 1e4:	08 95       	ret

000001e6 <PinSet>:
	for(uint8_t i = 0; i < length; i++)
	{
		value[i] = SpiSend(NOP_CMD);
	}
	PinSet(Radio->csnPin, HIGH);
}
 1e6:	61 11       	cpse	r22, r1
 1e8:	0e c0       	rjmp	.+28     	; 0x206 <PinSet+0x20>
 1ea:	45 b1       	in	r20, 0x05	; 5
 1ec:	21 e0       	ldi	r18, 0x01	; 1
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	b9 01       	movw	r22, r18
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <PinSet+0x12>
 1f4:	66 0f       	add	r22, r22
 1f6:	77 1f       	adc	r23, r23
 1f8:	8a 95       	dec	r24
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <PinSet+0xe>
 1fc:	cb 01       	movw	r24, r22
 1fe:	80 95       	com	r24
 200:	84 23       	and	r24, r20
 202:	85 b9       	out	0x05, r24	; 5
 204:	08 95       	ret
 206:	45 b1       	in	r20, 0x05	; 5
 208:	21 e0       	ldi	r18, 0x01	; 1
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	b9 01       	movw	r22, r18
 20e:	02 c0       	rjmp	.+4      	; 0x214 <PinSet+0x2e>
 210:	66 0f       	add	r22, r22
 212:	77 1f       	adc	r23, r23
 214:	8a 95       	dec	r24
 216:	e2 f7       	brpl	.-8      	; 0x210 <PinSet+0x2a>
 218:	cb 01       	movw	r24, r22
 21a:	84 2b       	or	r24, r20
 21c:	85 b9       	out	0x05, r24	; 5
 21e:	08 95       	ret

00000220 <ToggleFeatures>:
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	ec 01       	movw	r28, r24
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PinSet>
 22e:	80 e5       	ldi	r24, 0x50	; 80
 230:	0e 94 a2 04 	call	0x944	; 0x944 <SpiSend>
 234:	83 e7       	ldi	r24, 0x73	; 115
 236:	0e 94 a2 04 	call	0x944	; 0x944 <SpiSend>
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	89 81       	ldd	r24, Y+1	; 0x01
 23e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PinSet>
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <WriteCommand>:
 248:	1f 93       	push	r17
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	ec 01       	movw	r28, r24
 250:	16 2f       	mov	r17, r22
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PinSet>
 25a:	81 2f       	mov	r24, r17
 25c:	80 62       	ori	r24, 0x20	; 32
 25e:	0e 94 a2 04 	call	0x944	; 0x944 <SpiSend>
 262:	18 2f       	mov	r17, r24
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	89 81       	ldd	r24, Y+1	; 0x01
 268:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PinSet>
 26c:	81 2f       	mov	r24, r17
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	08 95       	ret

00000276 <TxFlush>:
 276:	61 ee       	ldi	r22, 0xE1	; 225
 278:	0e 94 24 01 	call	0x248	; 0x248 <WriteCommand>
 27c:	08 95       	ret

0000027e <RxFlush>:
 27e:	62 ee       	ldi	r22, 0xE2	; 226
 280:	0e 94 24 01 	call	0x248	; 0x248 <WriteCommand>
 284:	08 95       	ret

00000286 <GetStatus>:
 286:	6f ef       	ldi	r22, 0xFF	; 255
 288:	0e 94 24 01 	call	0x248	; 0x248 <WriteCommand>
 28c:	08 95       	ret

0000028e <WriteRegister>:
 28e:	0f 93       	push	r16
 290:	1f 93       	push	r17
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	ec 01       	movw	r28, r24
 298:	16 2f       	mov	r17, r22
 29a:	04 2f       	mov	r16, r20
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PinSet>
 2a4:	81 2f       	mov	r24, r17
 2a6:	80 62       	ori	r24, 0x20	; 32
 2a8:	0e 94 a2 04 	call	0x944	; 0x944 <SpiSend>
 2ac:	18 2f       	mov	r17, r24
 2ae:	80 2f       	mov	r24, r16
 2b0:	0e 94 a2 04 	call	0x944	; 0x944 <SpiSend>
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	89 81       	ldd	r24, Y+1	; 0x01
 2b8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PinSet>
 2bc:	81 2f       	mov	r24, r17
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	1f 91       	pop	r17
 2c4:	0f 91       	pop	r16
 2c6:	08 95       	ret

000002c8 <ReadRegister>:
 2c8:	1f 93       	push	r17
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	ec 01       	movw	r28, r24
 2d0:	16 2f       	mov	r17, r22
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
 2d6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PinSet>
 2da:	81 2f       	mov	r24, r17
 2dc:	0e 94 a2 04 	call	0x944	; 0x944 <SpiSend>
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	0e 94 a2 04 	call	0x944	; 0x944 <SpiSend>
 2e6:	18 2f       	mov	r17, r24
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	89 81       	ldd	r24, Y+1	; 0x01
 2ec:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PinSet>
 2f0:	81 2f       	mov	r24, r17
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	1f 91       	pop	r17
 2f8:	08 95       	ret

000002fa <Write>:
 2fa:	ef 92       	push	r14
 2fc:	ff 92       	push	r15
 2fe:	0f 93       	push	r16
 300:	1f 93       	push	r17
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	7c 01       	movw	r14, r24
 308:	c6 2f       	mov	r28, r22
 30a:	8a 01       	movw	r16, r20
 30c:	d2 2f       	mov	r29, r18
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	fc 01       	movw	r30, r24
 312:	81 81       	ldd	r24, Z+1	; 0x01
 314:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PinSet>
 318:	8c 2f       	mov	r24, r28
 31a:	80 62       	ori	r24, 0x20	; 32
 31c:	0e 94 a2 04 	call	0x944	; 0x944 <SpiSend>
 320:	c0 e0       	ldi	r28, 0x00	; 0
 322:	07 c0       	rjmp	.+14     	; 0x332 <Write+0x38>
 324:	f8 01       	movw	r30, r16
 326:	ec 0f       	add	r30, r28
 328:	f1 1d       	adc	r31, r1
 32a:	80 81       	ld	r24, Z
 32c:	0e 94 a2 04 	call	0x944	; 0x944 <SpiSend>
 330:	cf 5f       	subi	r28, 0xFF	; 255
 332:	cd 17       	cp	r28, r29
 334:	b8 f3       	brcs	.-18     	; 0x324 <Write+0x2a>
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	f7 01       	movw	r30, r14
 33a:	81 81       	ldd	r24, Z+1	; 0x01
 33c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PinSet>
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	ff 90       	pop	r15
 34a:	ef 90       	pop	r14
 34c:	08 95       	ret

0000034e <PowerUp>:
 34e:	fc 01       	movw	r30, r24
 350:	42 89       	ldd	r20, Z+18	; 0x12
 352:	41 fd       	sbrc	r20, 1
 354:	0b c0       	rjmp	.+22     	; 0x36c <PowerUp+0x1e>
 356:	42 60       	ori	r20, 0x02	; 2
 358:	42 8b       	std	Z+18, r20	; 0x12
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	0e 94 47 01 	call	0x28e	; 0x28e <WriteRegister>
 360:	8f e1       	ldi	r24, 0x1F	; 31
 362:	9e e4       	ldi	r25, 0x4E	; 78
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <PowerUp+0x16>
 368:	00 c0       	rjmp	.+0      	; 0x36a <PowerUp+0x1c>
 36a:	00 00       	nop
 36c:	08 95       	ret

0000036e <Nrf24Init>:
{
	WriteCommand(Radio, FLUSH_RX);
}

void Nrf24Init(Nrf24Radio* Radio)
{
 36e:	fc 01       	movw	r30, r24
	Radio->cePin = DDB1;
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	90 83       	st	Z, r25
	Radio->csnPin = DDB2;
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	81 83       	std	Z+1, r24	; 0x01
	
	DDRB |= (1<<DDB1) | (1<<DDB2);
 378:	84 b1       	in	r24, 0x04	; 4
 37a:	86 60       	ori	r24, 0x06	; 6
 37c:	84 b9       	out	0x04, r24	; 4
	
	Radio->speed = 10000000;
 37e:	40 e8       	ldi	r20, 0x80	; 128
 380:	56 e9       	ldi	r21, 0x96	; 150
 382:	68 e9       	ldi	r22, 0x98	; 152
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	42 83       	std	Z+2, r20	; 0x02
 388:	53 83       	std	Z+3, r21	; 0x03
 38a:	64 83       	std	Z+4, r22	; 0x04
 38c:	75 83       	std	Z+5, r23	; 0x05
	Radio->payloadSize = 32;
 38e:	80 e2       	ldi	r24, 0x20	; 32
 390:	86 83       	std	Z+6, r24	; 0x06
	Radio->isPVariant = 0;
 392:	17 82       	std	Z+7, r1	; 0x07
	Radio->isP0Rx = 0;
 394:	10 86       	std	Z+8, r1	; 0x08
	Radio->addrWidth = 5;
 396:	85 e0       	ldi	r24, 0x05	; 5
 398:	81 87       	std	Z+9, r24	; 0x09
	Radio->dynamicPayloadsEnabled = 1;
 39a:	92 87       	std	Z+10, r25	; 0x0a
	Radio->csDelay = 5;
 39c:	83 87       	std	Z+11, r24	; 0x0b
	Radio->pipe0ReadingAddress[0] = 0;
 39e:	14 86       	std	Z+12, r1	; 0x0c
	
	DDRB &= ~(1<<DDB0);
 3a0:	84 b1       	in	r24, 0x04	; 4
 3a2:	8e 7f       	andi	r24, 0xFE	; 254
 3a4:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<DDB0);
 3a6:	85 b1       	in	r24, 0x05	; 5
 3a8:	81 60       	ori	r24, 0x01	; 1
 3aa:	85 b9       	out	0x05, r24	; 5
	PCMSK0 |= (1<<DDB0);
 3ac:	eb e6       	ldi	r30, 0x6B	; 107
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
 3b2:	81 60       	ori	r24, 0x01	; 1
 3b4:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE0);
 3b6:	e8 e6       	ldi	r30, 0x68	; 104
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	81 60       	ori	r24, 0x01	; 1
 3be:	80 83       	st	Z, r24
 3c0:	08 95       	ret

000003c2 <Nrf24Begin>:
}

uint8_t Nrf24Begin(Nrf24Radio* Radio)
{
 3c2:	1f 93       	push	r17
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	ec 01       	movw	r28, r24
	PinSet(Radio->cePin, LOW);
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	88 81       	ld	r24, Y
 3ce:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PinSet>
	PinSet(Radio->csnPin, HIGH);
 3d2:	61 e0       	ldi	r22, 0x01	; 1
 3d4:	89 81       	ldd	r24, Y+1	; 0x01
 3d6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PinSet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3da:	8f e1       	ldi	r24, 0x1F	; 31
 3dc:	9e e4       	ldi	r25, 0x4E	; 78
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <Nrf24Begin+0x1c>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <Nrf24Begin+0x22>
 3e4:	00 00       	nop
	
	_delay_ms(5);
	
	// setup retransmition
	WriteRegister(Radio, SETUP_RETR_ADDRESS, (5 << ARD_0) | 15);
 3e6:	4f e5       	ldi	r20, 0x5F	; 95
 3e8:	64 e0       	ldi	r22, 0x04	; 4
 3ea:	ce 01       	movw	r24, r28
 3ec:	0e 94 47 01 	call	0x28e	; 0x28e <WriteRegister>
	
	// setup rf
	uint8_t dataRate = ReadRegister(Radio, RF_SETUP_ADDRESS);
 3f0:	66 e0       	ldi	r22, 0x06	; 6
 3f2:	ce 01       	movw	r24, r28
 3f4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <ReadRegister>
	dataRate = dataRate & ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
 3f8:	48 2f       	mov	r20, r24
 3fa:	47 7d       	andi	r20, 0xD7	; 215
	WriteRegister(Radio, RF_SETUP_ADDRESS, dataRate);
 3fc:	66 e0       	ldi	r22, 0x06	; 6
 3fe:	ce 01       	movw	r24, r28
 400:	0e 94 47 01 	call	0x28e	; 0x28e <WriteRegister>
	
	// toggle features command
	uint8_t beforeToggle = ReadRegister(Radio, FEATURE_ADDRESS);
 404:	6d e1       	ldi	r22, 0x1D	; 29
 406:	ce 01       	movw	r24, r28
 408:	0e 94 64 01 	call	0x2c8	; 0x2c8 <ReadRegister>
 40c:	18 2f       	mov	r17, r24
	ToggleFeatures(Radio);
 40e:	ce 01       	movw	r24, r28
 410:	0e 94 10 01 	call	0x220	; 0x220 <ToggleFeatures>
	uint8_t afterToggle = ReadRegister(Radio, FEATURE_ADDRESS);
 414:	6d e1       	ldi	r22, 0x1D	; 29
 416:	ce 01       	movw	r24, r28
 418:	0e 94 64 01 	call	0x2c8	; 0x2c8 <ReadRegister>
	Radio->isPVariant = beforeToggle == afterToggle;
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	18 13       	cpse	r17, r24
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	9f 83       	std	Y+7, r25	; 0x07
	if(afterToggle)
 424:	88 23       	and	r24, r24
 426:	51 f0       	breq	.+20     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
	{
		if(Radio->isPVariant)
 428:	99 23       	and	r25, r25
 42a:	19 f0       	breq	.+6      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
		{
			ToggleFeatures(Radio);
 42c:	ce 01       	movw	r24, r28
 42e:	0e 94 10 01 	call	0x220	; 0x220 <ToggleFeatures>
		}
		
		WriteRegister(Radio, FEATURE_ADDRESS, 0);
 432:	40 e0       	ldi	r20, 0x00	; 0
 434:	6d e1       	ldi	r22, 0x1D	; 29
 436:	ce 01       	movw	r24, r28
 438:	0e 94 47 01 	call	0x28e	; 0x28e <WriteRegister>
	}
	
	Radio->ackPayloadsEnabled = 0;
 43c:	19 8a       	std	Y+17, r1	; 0x11
	WriteRegister(Radio, DYNPD_ADDRESS, 0);
 43e:	40 e0       	ldi	r20, 0x00	; 0
 440:	6c e1       	ldi	r22, 0x1C	; 28
 442:	ce 01       	movw	r24, r28
 444:	0e 94 47 01 	call	0x28e	; 0x28e <WriteRegister>
	
	Radio->dynamicPayloadsEnabled = 0;
 448:	1a 86       	std	Y+10, r1	; 0x0a
	WriteRegister(Radio, EN_AA_ADDRESS, 0x3F);
 44a:	4f e3       	ldi	r20, 0x3F	; 63
 44c:	61 e0       	ldi	r22, 0x01	; 1
 44e:	ce 01       	movw	r24, r28
 450:	0e 94 47 01 	call	0x28e	; 0x28e <WriteRegister>
	WriteRegister(Radio, EN_RXADDR_ADDRESS, 3);
 454:	43 e0       	ldi	r20, 0x03	; 3
 456:	62 e0       	ldi	r22, 0x02	; 2
 458:	ce 01       	movw	r24, r28
 45a:	0e 94 47 01 	call	0x28e	; 0x28e <WriteRegister>

	for (uint8_t i = 0; i < 6; ++i) {
 45e:	10 e0       	ldi	r17, 0x00	; 0
 460:	07 c0       	rjmp	.+14     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
		WriteRegister(Radio, RX_PW_P0_ADDRESS + i, Radio->payloadSize);
 462:	61 e1       	ldi	r22, 0x11	; 17
 464:	61 0f       	add	r22, r17
 466:	4e 81       	ldd	r20, Y+6	; 0x06
 468:	ce 01       	movw	r24, r28
 46a:	0e 94 47 01 	call	0x28e	; 0x28e <WriteRegister>
	
	Radio->dynamicPayloadsEnabled = 0;
	WriteRegister(Radio, EN_AA_ADDRESS, 0x3F);
	WriteRegister(Radio, EN_RXADDR_ADDRESS, 3);

	for (uint8_t i = 0; i < 6; ++i) {
 46e:	1f 5f       	subi	r17, 0xFF	; 255
 470:	16 30       	cpi	r17, 0x06	; 6
 472:	b8 f3       	brcs	.-18     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
		WriteRegister(Radio, RX_PW_P0_ADDRESS + i, Radio->payloadSize);
	}
	
	WriteRegister(Radio, SETUP_AW_ADDRESS, 3);
 474:	43 e0       	ldi	r20, 0x03	; 3
 476:	63 e0       	ldi	r22, 0x03	; 3
 478:	ce 01       	movw	r24, r28
 47a:	0e 94 47 01 	call	0x28e	; 0x28e <WriteRegister>

	WriteRegister(Radio, RF_CH_ADDRESS, 101);
 47e:	45 e6       	ldi	r20, 0x65	; 101
 480:	65 e0       	ldi	r22, 0x05	; 5
 482:	ce 01       	movw	r24, r28
 484:	0e 94 47 01 	call	0x28e	; 0x28e <WriteRegister>

	WriteRegister(Radio, STATUS_ADDRESS, (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT));
 488:	40 e7       	ldi	r20, 0x70	; 112
 48a:	67 e0       	ldi	r22, 0x07	; 7
 48c:	ce 01       	movw	r24, r28
 48e:	0e 94 47 01 	call	0x28e	; 0x28e <WriteRegister>

	TxFlush(Radio);
 492:	ce 01       	movw	r24, r28
 494:	0e 94 3b 01 	call	0x276	; 0x276 <TxFlush>
	RxFlush(Radio);
 498:	ce 01       	movw	r24, r28
 49a:	0e 94 3f 01 	call	0x27e	; 0x27e <RxFlush>
	
	WriteRegister(Radio, CONFIG_ADDRESS, (1<<EN_CRC) | (1<<CRCO));
 49e:	4c e0       	ldi	r20, 0x0C	; 12
 4a0:	60 e0       	ldi	r22, 0x00	; 0
 4a2:	ce 01       	movw	r24, r28
 4a4:	0e 94 47 01 	call	0x28e	; 0x28e <WriteRegister>
	Radio->configReg = ReadRegister(Radio, CONFIG_ADDRESS);
 4a8:	60 e0       	ldi	r22, 0x00	; 0
 4aa:	ce 01       	movw	r24, r28
 4ac:	0e 94 64 01 	call	0x2c8	; 0x2c8 <ReadRegister>
 4b0:	8a 8b       	std	Y+18, r24	; 0x12
	
	PowerUp(Radio);
 4b2:	ce 01       	movw	r24, r28
 4b4:	0e 94 a7 01 	call	0x34e	; 0x34e <PowerUp>
	
	return Radio->configReg == ((1<<EN_CRC) | (1<<CRCO) | (1<<PWR_UP))?1:0;
 4b8:	9a 89       	ldd	r25, Y+18	; 0x12
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	9e 30       	cpi	r25, 0x0E	; 14
 4be:	09 f0       	breq	.+2      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4c0:	80 e0       	ldi	r24, 0x00	; 0
}
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	1f 91       	pop	r17
 4c8:	08 95       	ret

000004ca <Nrf24OpenWritingPipe>:

void Nrf24OpenWritingPipe(Nrf24Radio* Radio, uint64_t Pipe)
{
 4ca:	ef 92       	push	r14
 4cc:	ff 92       	push	r15
 4ce:	0f 93       	push	r16
 4d0:	1f 93       	push	r17
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	cd b7       	in	r28, 0x3d	; 61
 4d8:	de b7       	in	r29, 0x3e	; 62
 4da:	28 97       	sbiw	r28, 0x08	; 8
 4dc:	0f b6       	in	r0, 0x3f	; 63
 4de:	f8 94       	cli
 4e0:	de bf       	out	0x3e, r29	; 62
 4e2:	0f be       	out	0x3f, r0	; 63
 4e4:	cd bf       	out	0x3d, r28	; 61
 4e6:	7c 01       	movw	r14, r24
 4e8:	09 83       	std	Y+1, r16	; 0x01
 4ea:	1a 83       	std	Y+2, r17	; 0x02
 4ec:	2b 83       	std	Y+3, r18	; 0x03
 4ee:	3c 83       	std	Y+4, r19	; 0x04
 4f0:	4d 83       	std	Y+5, r20	; 0x05
 4f2:	5e 83       	std	Y+6, r21	; 0x06
 4f4:	6f 83       	std	Y+7, r22	; 0x07
 4f6:	78 87       	std	Y+8, r23	; 0x08
	Write(Radio, RX_ADDR_P0_ADDRESS, (uint8_t*)&Pipe, Radio->addrWidth);
 4f8:	fc 01       	movw	r30, r24
 4fa:	21 85       	ldd	r18, Z+9	; 0x09
 4fc:	ae 01       	movw	r20, r28
 4fe:	4f 5f       	subi	r20, 0xFF	; 255
 500:	5f 4f       	sbci	r21, 0xFF	; 255
 502:	6a e0       	ldi	r22, 0x0A	; 10
 504:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Write>
	Write(Radio, TX_ADDR_ADDRESS, (uint8_t*)&Pipe, Radio->addrWidth);
 508:	f7 01       	movw	r30, r14
 50a:	21 85       	ldd	r18, Z+9	; 0x09
 50c:	ae 01       	movw	r20, r28
 50e:	4f 5f       	subi	r20, 0xFF	; 255
 510:	5f 4f       	sbci	r21, 0xFF	; 255
 512:	60 e1       	ldi	r22, 0x10	; 16
 514:	c7 01       	movw	r24, r14
 516:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Write>
}
 51a:	28 96       	adiw	r28, 0x08	; 8
 51c:	0f b6       	in	r0, 0x3f	; 63
 51e:	f8 94       	cli
 520:	de bf       	out	0x3e, r29	; 62
 522:	0f be       	out	0x3f, r0	; 63
 524:	cd bf       	out	0x3d, r28	; 61
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	1f 91       	pop	r17
 52c:	0f 91       	pop	r16
 52e:	ff 90       	pop	r15
 530:	ef 90       	pop	r14
 532:	08 95       	ret

00000534 <Nrf24OpenReadingPipe>:

void Nrf24OpenReadingPipe(Nrf24Radio* Radio, uint64_t Pipe)
{
 534:	ef 92       	push	r14
 536:	ff 92       	push	r15
 538:	0f 93       	push	r16
 53a:	1f 93       	push	r17
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
 540:	cd b7       	in	r28, 0x3d	; 61
 542:	de b7       	in	r29, 0x3e	; 62
 544:	28 97       	sbiw	r28, 0x08	; 8
 546:	0f b6       	in	r0, 0x3f	; 63
 548:	f8 94       	cli
 54a:	de bf       	out	0x3e, r29	; 62
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	cd bf       	out	0x3d, r28	; 61
 550:	7c 01       	movw	r14, r24
 552:	09 83       	std	Y+1, r16	; 0x01
 554:	1a 83       	std	Y+2, r17	; 0x02
 556:	2b 83       	std	Y+3, r18	; 0x03
 558:	3c 83       	std	Y+4, r19	; 0x04
 55a:	4d 83       	std	Y+5, r20	; 0x05
 55c:	5e 83       	std	Y+6, r21	; 0x06
 55e:	6f 83       	std	Y+7, r22	; 0x07
 560:	78 87       	std	Y+8, r23	; 0x08
	Write(Radio, RX_ADDR_P1_ADDRESS, (uint8_t*)&Pipe, Radio->addrWidth);
 562:	fc 01       	movw	r30, r24
 564:	21 85       	ldd	r18, Z+9	; 0x09
 566:	ae 01       	movw	r20, r28
 568:	4f 5f       	subi	r20, 0xFF	; 255
 56a:	5f 4f       	sbci	r21, 0xFF	; 255
 56c:	6b e0       	ldi	r22, 0x0B	; 11
 56e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Write>
	
	uint8_t enrx = ReadRegister(Radio, EN_RXADDR_ADDRESS);
 572:	62 e0       	ldi	r22, 0x02	; 2
 574:	c7 01       	movw	r24, r14
 576:	0e 94 64 01 	call	0x2c8	; 0x2c8 <ReadRegister>
	enrx |= (1<<ERX_P1);
 57a:	48 2f       	mov	r20, r24
 57c:	42 60       	ori	r20, 0x02	; 2
	WriteRegister(Radio, EN_RXADDR_ADDRESS, enrx);
 57e:	62 e0       	ldi	r22, 0x02	; 2
 580:	c7 01       	movw	r24, r14
 582:	0e 94 47 01 	call	0x28e	; 0x28e <WriteRegister>
}
 586:	28 96       	adiw	r28, 0x08	; 8
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	f8 94       	cli
 58c:	de bf       	out	0x3e, r29	; 62
 58e:	0f be       	out	0x3f, r0	; 63
 590:	cd bf       	out	0x3d, r28	; 61
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	1f 91       	pop	r17
 598:	0f 91       	pop	r16
 59a:	ff 90       	pop	r15
 59c:	ef 90       	pop	r14
 59e:	08 95       	ret

000005a0 <Nrf24StartListening>:

void Nrf24StartListening(Nrf24Radio* Radio)
{
 5a0:	cf 93       	push	r28
 5a2:	df 93       	push	r29
 5a4:	ec 01       	movw	r28, r24
	PowerUp(Radio);
 5a6:	0e 94 a7 01 	call	0x34e	; 0x34e <PowerUp>
	
	Radio->configReg |= (1<<PRIM_RX);
 5aa:	4a 89       	ldd	r20, Y+18	; 0x12
 5ac:	41 60       	ori	r20, 0x01	; 1
 5ae:	4a 8b       	std	Y+18, r20	; 0x12
	WriteRegister(Radio, CONFIG_ADDRESS, Radio->configReg);
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	ce 01       	movw	r24, r28
 5b4:	0e 94 47 01 	call	0x28e	; 0x28e <WriteRegister>
	
	WriteRegister(Radio, STATUS_ADDRESS, (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT));
 5b8:	40 e7       	ldi	r20, 0x70	; 112
 5ba:	67 e0       	ldi	r22, 0x07	; 7
 5bc:	ce 01       	movw	r24, r28
 5be:	0e 94 47 01 	call	0x28e	; 0x28e <WriteRegister>
	
	PinSet(Radio->cePin, HIGH);
 5c2:	61 e0       	ldi	r22, 0x01	; 1
 5c4:	88 81       	ld	r24, Y
 5c6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PinSet>
	
	if(Radio->isP0Rx)
 5ca:	88 85       	ldd	r24, Y+8	; 0x08
 5cc:	88 23       	and	r24, r24
 5ce:	49 f0       	breq	.+18     	; 0x5e2 <Nrf24StartListening+0x42>
	{
		Write(Radio, RX_ADDR_P0_ADDRESS, Radio->pipe0ReadingAddress, Radio->addrWidth);
 5d0:	ae 01       	movw	r20, r28
 5d2:	44 5f       	subi	r20, 0xF4	; 244
 5d4:	5f 4f       	sbci	r21, 0xFF	; 255
 5d6:	29 85       	ldd	r18, Y+9	; 0x09
 5d8:	6a e0       	ldi	r22, 0x0A	; 10
 5da:	ce 01       	movw	r24, r28
 5dc:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Write>
 5e0:	0b c0       	rjmp	.+22     	; 0x5f8 <Nrf24StartListening+0x58>
	}
	else
	{
		uint8_t enrx = ReadRegister(Radio, EN_RXADDR_ADDRESS);
 5e2:	62 e0       	ldi	r22, 0x02	; 2
 5e4:	ce 01       	movw	r24, r28
 5e6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <ReadRegister>
		enrx &= ~(1<<ERX_P0);
 5ea:	48 2f       	mov	r20, r24
 5ec:	4e 7f       	andi	r20, 0xFE	; 254
		WriteRegister(Radio, EN_RXADDR_ADDRESS, enrx);
 5ee:	62 e0       	ldi	r22, 0x02	; 2
 5f0:	ce 01       	movw	r24, r28
 5f2:	0e 94 47 01 	call	0x28e	; 0x28e <WriteRegister>
		Radio->isP0Rx = 0;
 5f6:	18 86       	std	Y+8, r1	; 0x08
	}
}
 5f8:	df 91       	pop	r29
 5fa:	cf 91       	pop	r28
 5fc:	08 95       	ret

000005fe <Nrf24StopListening>:

void Nrf24StopListening(Nrf24Radio* Radio)
{
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
 602:	ec 01       	movw	r28, r24
	PinSet(Radio->cePin, LOW);
 604:	60 e0       	ldi	r22, 0x00	; 0
 606:	88 81       	ld	r24, Y
 608:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PinSet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 60c:	83 e5       	ldi	r24, 0x53	; 83
 60e:	91 e0       	ldi	r25, 0x01	; 1
 610:	01 97       	sbiw	r24, 0x01	; 1
 612:	f1 f7       	brne	.-4      	; 0x610 <Nrf24StopListening+0x12>
 614:	00 c0       	rjmp	.+0      	; 0x616 <Nrf24StopListening+0x18>
 616:	00 00       	nop
	
	_delay_us(TX_DELAY);
	if(Radio->ackPayloadsEnabled)
 618:	89 89       	ldd	r24, Y+17	; 0x11
 61a:	88 23       	and	r24, r24
 61c:	19 f0       	breq	.+6      	; 0x624 <Nrf24StopListening+0x26>
	{
		TxFlush(Radio);
 61e:	ce 01       	movw	r24, r28
 620:	0e 94 3b 01 	call	0x276	; 0x276 <TxFlush>
	}
	
	Radio->configReg = Radio->configReg & ~(1<<PRIM_RX);
 624:	4a 89       	ldd	r20, Y+18	; 0x12
 626:	4e 7f       	andi	r20, 0xFE	; 254
 628:	4a 8b       	std	Y+18, r20	; 0x12
	WriteRegister(Radio, CONFIG_ADDRESS, Radio->configReg);
 62a:	60 e0       	ldi	r22, 0x00	; 0
 62c:	ce 01       	movw	r24, r28
 62e:	0e 94 47 01 	call	0x28e	; 0x28e <WriteRegister>
	
	WriteRegister(Radio, EN_RXADDR_ADDRESS, ReadRegister(Radio, EN_RXADDR_ADDRESS )| (1<<ERX_P0));
 632:	62 e0       	ldi	r22, 0x02	; 2
 634:	ce 01       	movw	r24, r28
 636:	0e 94 64 01 	call	0x2c8	; 0x2c8 <ReadRegister>
 63a:	48 2f       	mov	r20, r24
 63c:	41 60       	ori	r20, 0x01	; 1
 63e:	62 e0       	ldi	r22, 0x02	; 2
 640:	ce 01       	movw	r24, r28
 642:	0e 94 47 01 	call	0x28e	; 0x28e <WriteRegister>
}
 646:	df 91       	pop	r29
 648:	cf 91       	pop	r28
 64a:	08 95       	ret

0000064c <Nrf24Write>:
{
	return WriteCommand(Radio, NOP_CMD);
}

uint8_t Nrf24Write(Nrf24Radio* Radio, const uint8_t* data, uint8_t length)
{
 64c:	af 92       	push	r10
 64e:	bf 92       	push	r11
 650:	df 92       	push	r13
 652:	ef 92       	push	r14
 654:	ff 92       	push	r15
 656:	0f 93       	push	r16
 658:	1f 93       	push	r17
 65a:	cf 93       	push	r28
 65c:	df 93       	push	r29
 65e:	7c 01       	movw	r14, r24
 660:	8b 01       	movw	r16, r22
	uint8_t blankLen = !length ? 1 : 0;
 662:	d1 e0       	ldi	r29, 0x01	; 1
 664:	41 11       	cpse	r20, r1
 666:	d0 e0       	ldi	r29, 0x00	; 0
	if(Radio->dynamicPayloadsEnabled == 0)
 668:	f7 01       	movw	r30, r14
 66a:	82 85       	ldd	r24, Z+10	; 0x0a
 66c:	81 11       	cpse	r24, r1
 66e:	07 c0       	rjmp	.+14     	; 0x67e <Nrf24Write+0x32>
	{
		length = min(length, Radio->payloadSize);
 670:	d6 81       	ldd	r29, Z+6	; 0x06
 672:	c4 2f       	mov	r28, r20
 674:	d4 17       	cp	r29, r20
 676:	08 f4       	brcc	.+2      	; 0x67a <Nrf24Write+0x2e>
 678:	cd 2f       	mov	r28, r29
		blankLen = Radio->payloadSize - length;
 67a:	dc 1b       	sub	r29, r28
 67c:	04 c0       	rjmp	.+8      	; 0x686 <Nrf24Write+0x3a>
	}
	else
	{
		length = min(length, 32);
 67e:	c4 2f       	mov	r28, r20
 680:	41 32       	cpi	r20, 0x21	; 33
 682:	08 f0       	brcs	.+2      	; 0x686 <Nrf24Write+0x3a>
 684:	c0 e2       	ldi	r28, 0x20	; 32
	}
	
	PinSet(Radio->csnPin, LOW);
 686:	60 e0       	ldi	r22, 0x00	; 0
 688:	f7 01       	movw	r30, r14
 68a:	81 81       	ldd	r24, Z+1	; 0x01
 68c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PinSet>
	SpiSend(W_TX_PAYLOAD);
 690:	80 ea       	ldi	r24, 0xA0	; 160
 692:	0e 94 a2 04 	call	0x944	; 0x944 <SpiSend>
	while (length--) {
 696:	0a c0       	rjmp	.+20     	; 0x6ac <Nrf24Write+0x60>
		SpiSend(*data++);
 698:	58 01       	movw	r10, r16
 69a:	ff ef       	ldi	r31, 0xFF	; 255
 69c:	af 1a       	sub	r10, r31
 69e:	bf 0a       	sbc	r11, r31
 6a0:	f8 01       	movw	r30, r16
 6a2:	80 81       	ld	r24, Z
 6a4:	0e 94 a2 04 	call	0x944	; 0x944 <SpiSend>
		length = min(length, 32);
	}
	
	PinSet(Radio->csnPin, LOW);
	SpiSend(W_TX_PAYLOAD);
	while (length--) {
 6a8:	cd 2d       	mov	r28, r13
		SpiSend(*data++);
 6aa:	85 01       	movw	r16, r10
		length = min(length, 32);
	}
	
	PinSet(Radio->csnPin, LOW);
	SpiSend(W_TX_PAYLOAD);
	while (length--) {
 6ac:	dd 24       	eor	r13, r13
 6ae:	da 94       	dec	r13
 6b0:	dc 0e       	add	r13, r28
 6b2:	c1 11       	cpse	r28, r1
 6b4:	f1 cf       	rjmp	.-30     	; 0x698 <Nrf24Write+0x4c>
 6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <Nrf24Write+0x74>
		SpiSend(*data++);
	}

	while (blankLen--) {
		SpiSend(0);
 6b8:	80 e0       	ldi	r24, 0x00	; 0
 6ba:	0e 94 a2 04 	call	0x944	; 0x944 <SpiSend>
	SpiSend(W_TX_PAYLOAD);
	while (length--) {
		SpiSend(*data++);
	}

	while (blankLen--) {
 6be:	dc 2f       	mov	r29, r28
 6c0:	cf ef       	ldi	r28, 0xFF	; 255
 6c2:	cd 0f       	add	r28, r29
 6c4:	d1 11       	cpse	r29, r1
 6c6:	f8 cf       	rjmp	.-16     	; 0x6b8 <Nrf24Write+0x6c>
		SpiSend(0);
	}
	PinSet(Radio->csnPin, HIGH);
 6c8:	61 e0       	ldi	r22, 0x01	; 1
 6ca:	f7 01       	movw	r30, r14
 6cc:	81 81       	ldd	r24, Z+1	; 0x01
 6ce:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PinSet>
	
	PinSet(Radio->cePin, HIGH);
 6d2:	61 e0       	ldi	r22, 0x01	; 1
 6d4:	f7 01       	movw	r30, r14
 6d6:	80 81       	ld	r24, Z
 6d8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PinSet>
	PORTC |= (1 << DDC1);
 6dc:	88 b1       	in	r24, 0x08	; 8
 6de:	82 60       	ori	r24, 0x02	; 2
 6e0:	88 b9       	out	0x08, r24	; 8
	while(!(GetStatus(Radio) & ((1<<TX_DS) | (1<<MAX_RT)))){}
 6e2:	c7 01       	movw	r24, r14
 6e4:	0e 94 43 01 	call	0x286	; 0x286 <GetStatus>
 6e8:	80 73       	andi	r24, 0x30	; 48
 6ea:	d9 f3       	breq	.-10     	; 0x6e2 <Nrf24Write+0x96>
	PORTC &= ~(1 << DDC1);
 6ec:	88 b1       	in	r24, 0x08	; 8
 6ee:	8d 7f       	andi	r24, 0xFD	; 253
 6f0:	88 b9       	out	0x08, r24	; 8
	PinSet(Radio->cePin, LOW);
 6f2:	60 e0       	ldi	r22, 0x00	; 0
 6f4:	f7 01       	movw	r30, r14
 6f6:	80 81       	ld	r24, Z
 6f8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PinSet>
	
	uint8_t status = WriteRegister(Radio, STATUS_ADDRESS, (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT));
 6fc:	40 e7       	ldi	r20, 0x70	; 112
 6fe:	67 e0       	ldi	r22, 0x07	; 7
 700:	c7 01       	movw	r24, r14
 702:	0e 94 47 01 	call	0x28e	; 0x28e <WriteRegister>

	if(status & (1<<MAX_RT))
 706:	84 ff       	sbrs	r24, 4
 708:	05 c0       	rjmp	.+10     	; 0x714 <Nrf24Write+0xc8>
	{
		TxFlush(Radio);
 70a:	c7 01       	movw	r24, r14
 70c:	0e 94 3b 01 	call	0x276	; 0x276 <TxFlush>
		return 0;
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	01 c0       	rjmp	.+2      	; 0x716 <Nrf24Write+0xca>
	}
	
	return 1;
 714:	81 e0       	ldi	r24, 0x01	; 1
}
 716:	df 91       	pop	r29
 718:	cf 91       	pop	r28
 71a:	1f 91       	pop	r17
 71c:	0f 91       	pop	r16
 71e:	ff 90       	pop	r15
 720:	ef 90       	pop	r14
 722:	df 90       	pop	r13
 724:	bf 90       	pop	r11
 726:	af 90       	pop	r10
 728:	08 95       	ret

0000072a <Nrf24Read>:

void Nrf24Read(Nrf24Radio* Radio, uint8_t* data, uint8_t length)
{
 72a:	af 92       	push	r10
 72c:	bf 92       	push	r11
 72e:	cf 92       	push	r12
 730:	df 92       	push	r13
 732:	ff 92       	push	r15
 734:	0f 93       	push	r16
 736:	1f 93       	push	r17
 738:	cf 93       	push	r28
 73a:	df 93       	push	r29
 73c:	6c 01       	movw	r12, r24
 73e:	8b 01       	movw	r16, r22
	uint8_t blankLen = 0;
	if(Radio->dynamicPayloadsEnabled == 0)
 740:	fc 01       	movw	r30, r24
 742:	82 85       	ldd	r24, Z+10	; 0x0a
 744:	81 11       	cpse	r24, r1
 746:	07 c0       	rjmp	.+14     	; 0x756 <Nrf24Read+0x2c>
	{
		length = min(length, Radio->payloadSize);
 748:	c6 81       	ldd	r28, Z+6	; 0x06
 74a:	dc 2f       	mov	r29, r28
 74c:	4c 17       	cp	r20, r28
 74e:	08 f4       	brcc	.+2      	; 0x752 <Nrf24Read+0x28>
 750:	d4 2f       	mov	r29, r20
		blankLen = Radio->payloadSize - length;
 752:	cd 1b       	sub	r28, r29
 754:	05 c0       	rjmp	.+10     	; 0x760 <Nrf24Read+0x36>
	}
	else
	{
		length = min(length, 32);
 756:	d4 2f       	mov	r29, r20
 758:	41 32       	cpi	r20, 0x21	; 33
 75a:	08 f0       	brcs	.+2      	; 0x75e <Nrf24Read+0x34>
 75c:	d0 e2       	ldi	r29, 0x20	; 32
	return 1;
}

void Nrf24Read(Nrf24Radio* Radio, uint8_t* data, uint8_t length)
{
	uint8_t blankLen = 0;
 75e:	c0 e0       	ldi	r28, 0x00	; 0
	else
	{
		length = min(length, 32);
	}
	
	PinSet(Radio->csnPin, LOW);
 760:	60 e0       	ldi	r22, 0x00	; 0
 762:	f6 01       	movw	r30, r12
 764:	81 81       	ldd	r24, Z+1	; 0x01
 766:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PinSet>
	
	SpiSend(R_RX_PAYLOAD);
 76a:	81 e6       	ldi	r24, 0x61	; 97
 76c:	0e 94 a2 04 	call	0x944	; 0x944 <SpiSend>
	while(length--)
 770:	0b c0       	rjmp	.+22     	; 0x788 <Nrf24Read+0x5e>
	{
		*data++ = SpiSend(NOP_CMD);
 772:	58 01       	movw	r10, r16
 774:	ff ef       	ldi	r31, 0xFF	; 255
 776:	af 1a       	sub	r10, r31
 778:	bf 0a       	sbc	r11, r31
 77a:	8f ef       	ldi	r24, 0xFF	; 255
 77c:	0e 94 a2 04 	call	0x944	; 0x944 <SpiSend>
 780:	f8 01       	movw	r30, r16
 782:	80 83       	st	Z, r24
	}
	
	PinSet(Radio->csnPin, LOW);
	
	SpiSend(R_RX_PAYLOAD);
	while(length--)
 784:	df 2d       	mov	r29, r15
	{
		*data++ = SpiSend(NOP_CMD);
 786:	85 01       	movw	r16, r10
	}
	
	PinSet(Radio->csnPin, LOW);
	
	SpiSend(R_RX_PAYLOAD);
	while(length--)
 788:	ff 24       	eor	r15, r15
 78a:	fa 94       	dec	r15
 78c:	fd 0e       	add	r15, r29
 78e:	d1 11       	cpse	r29, r1
 790:	f0 cf       	rjmp	.-32     	; 0x772 <Nrf24Read+0x48>
 792:	04 c0       	rjmp	.+8      	; 0x79c <Nrf24Read+0x72>
		*data++ = SpiSend(NOP_CMD);
	}
	
	while(blankLen--)
	{
		SpiSend(NOP_CMD);
 794:	8f ef       	ldi	r24, 0xFF	; 255
 796:	0e 94 a2 04 	call	0x944	; 0x944 <SpiSend>
	while(length--)
	{
		*data++ = SpiSend(NOP_CMD);
	}
	
	while(blankLen--)
 79a:	cd 2f       	mov	r28, r29
 79c:	df ef       	ldi	r29, 0xFF	; 255
 79e:	dc 0f       	add	r29, r28
 7a0:	c1 11       	cpse	r28, r1
 7a2:	f8 cf       	rjmp	.-16     	; 0x794 <Nrf24Read+0x6a>
	{
		SpiSend(NOP_CMD);
	}
	
	PinSet(Radio->csnPin, HIGH);
 7a4:	61 e0       	ldi	r22, 0x01	; 1
 7a6:	f6 01       	movw	r30, r12
 7a8:	81 81       	ldd	r24, Z+1	; 0x01
 7aa:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PinSet>
	
	WriteRegister(Radio, STATUS_ADDRESS, (1<<RX_DR));
 7ae:	40 e4       	ldi	r20, 0x40	; 64
 7b0:	67 e0       	ldi	r22, 0x07	; 7
 7b2:	c6 01       	movw	r24, r12
 7b4:	0e 94 47 01 	call	0x28e	; 0x28e <WriteRegister>
}
 7b8:	df 91       	pop	r29
 7ba:	cf 91       	pop	r28
 7bc:	1f 91       	pop	r17
 7be:	0f 91       	pop	r16
 7c0:	ff 90       	pop	r15
 7c2:	df 90       	pop	r13
 7c4:	cf 90       	pop	r12
 7c6:	bf 90       	pop	r11
 7c8:	af 90       	pop	r10
 7ca:	08 95       	ret

000007cc <Nrf24Available>:

uint8_t Nrf24Available(Nrf24Radio* Radio)
{
	uint8_t pipe = (GetStatus(Radio) >> RX_P_NO_0) & 0x07;
 7cc:	0e 94 43 01 	call	0x286	; 0x286 <GetStatus>
 7d0:	86 95       	lsr	r24
 7d2:	98 2f       	mov	r25, r24
 7d4:	97 70       	andi	r25, 0x07	; 7
	return (pipe > 5)? 0 : 1;
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	96 30       	cpi	r25, 0x06	; 6
 7da:	08 f0       	brcs	.+2      	; 0x7de <Nrf24Available+0x12>
 7dc:	80 e0       	ldi	r24, 0x00	; 0
}
 7de:	08 95       	ret

000007e0 <__vector_15>:
#include <avr/io.h>

volatile static int factor;
volatile static int nextFactor;
ISR (TIMER0_COMPB_vect)
{
 7e0:	1f 92       	push	r1
 7e2:	0f 92       	push	r0
 7e4:	0f b6       	in	r0, 0x3f	; 63
 7e6:	0f 92       	push	r0
 7e8:	11 24       	eor	r1, r1
 7ea:	2f 93       	push	r18
 7ec:	3f 93       	push	r19
 7ee:	8f 93       	push	r24
 7f0:	9f 93       	push	r25
	static int counter = 0;
	counter++;
 7f2:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <counter.1611>
 7f6:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <counter.1611+0x1>
 7fa:	2f 5f       	subi	r18, 0xFF	; 255
 7fc:	3f 4f       	sbci	r19, 0xFF	; 255
 7fe:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <counter.1611+0x1>
 802:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <counter.1611>

	uint8_t high = PORTD & (1<<DDD5);
	
	uint8_t realFactor = (high) ? factor : 256 -  factor;
 806:	5d 99       	sbic	0x0b, 5	; 11
 808:	06 c0       	rjmp	.+12     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 80a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <factor>
 80e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <factor+0x1>
 812:	81 95       	neg	r24
 814:	04 c0       	rjmp	.+8      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 816:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <factor>
 81a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <factor+0x1>
	if(counter == realFactor)
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	28 17       	cp	r18, r24
 822:	39 07       	cpc	r19, r25
 824:	d9 f4       	brne	.+54     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
	{
		if(factor != nextFactor)
 826:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <factor>
 82a:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <factor+0x1>
 82e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <nextFactor>
 832:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <nextFactor+0x1>
 836:	28 17       	cp	r18, r24
 838:	39 07       	cpc	r19, r25
 83a:	41 f0       	breq	.+16     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
		{
			factor = nextFactor;
 83c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <nextFactor>
 840:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <nextFactor+0x1>
 844:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <factor+0x1>
 848:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <factor>
		}
		PORTD ^= (1<<DDD5);
 84c:	9b b1       	in	r25, 0x0b	; 11
 84e:	80 e2       	ldi	r24, 0x20	; 32
 850:	89 27       	eor	r24, r25
 852:	8b b9       	out	0x0b, r24	; 11
		counter = 0;
 854:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <counter.1611+0x1>
 858:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <counter.1611>
	}
}
 85c:	9f 91       	pop	r25
 85e:	8f 91       	pop	r24
 860:	3f 91       	pop	r19
 862:	2f 91       	pop	r18
 864:	0f 90       	pop	r0
 866:	0f be       	out	0x3f, r0	; 63
 868:	0f 90       	pop	r0
 86a:	1f 90       	pop	r1
 86c:	18 95       	reti

0000086e <__vector_14>:
ISR (TIMER0_COMPA_vect)
{
 86e:	1f 92       	push	r1
 870:	0f 92       	push	r0
 872:	0f b6       	in	r0, 0x3f	; 63
 874:	0f 92       	push	r0
 876:	11 24       	eor	r1, r1
 878:	2f 93       	push	r18
 87a:	3f 93       	push	r19
 87c:	8f 93       	push	r24
 87e:	9f 93       	push	r25
	static int counter = 0;
	counter++;
 880:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
 884:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
 888:	2f 5f       	subi	r18, 0xFF	; 255
 88a:	3f 4f       	sbci	r19, 0xFF	; 255
 88c:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <__data_end+0x1>
 890:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__data_end>

	uint8_t high = PORTD & (1<<DDD6);
	
	uint8_t realFactor = (high) ? factor : 256 -  factor;
 894:	5e 99       	sbic	0x0b, 6	; 11
 896:	06 c0       	rjmp	.+12     	; 0x8a4 <__vector_14+0x36>
 898:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <factor>
 89c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <factor+0x1>
 8a0:	81 95       	neg	r24
 8a2:	04 c0       	rjmp	.+8      	; 0x8ac <__vector_14+0x3e>
 8a4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <factor>
 8a8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <factor+0x1>
	if(counter == realFactor)
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	28 17       	cp	r18, r24
 8b0:	39 07       	cpc	r19, r25
 8b2:	d9 f4       	brne	.+54     	; 0x8ea <__vector_14+0x7c>
	{
		if(factor != nextFactor)
 8b4:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <factor>
 8b8:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <factor+0x1>
 8bc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <nextFactor>
 8c0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <nextFactor+0x1>
 8c4:	28 17       	cp	r18, r24
 8c6:	39 07       	cpc	r19, r25
 8c8:	41 f0       	breq	.+16     	; 0x8da <__vector_14+0x6c>
		{
			factor = nextFactor;
 8ca:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <nextFactor>
 8ce:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <nextFactor+0x1>
 8d2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <factor+0x1>
 8d6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <factor>
		}
		PORTD ^= (1<<DDD6);
 8da:	9b b1       	in	r25, 0x0b	; 11
 8dc:	80 e4       	ldi	r24, 0x40	; 64
 8de:	89 27       	eor	r24, r25
 8e0:	8b b9       	out	0x0b, r24	; 11
		counter = 0;
 8e2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
 8e6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
	}
}
 8ea:	9f 91       	pop	r25
 8ec:	8f 91       	pop	r24
 8ee:	3f 91       	pop	r19
 8f0:	2f 91       	pop	r18
 8f2:	0f 90       	pop	r0
 8f4:	0f be       	out	0x3f, r0	; 63
 8f6:	0f 90       	pop	r0
 8f8:	1f 90       	pop	r1
 8fa:	18 95       	reti

000008fc <__vector_17>:

volatile uint8_t spiRxData = 0;
volatile uint8_t spiTxRxDone = 0;

ISR(SPI_STC_vect)
{
 8fc:	1f 92       	push	r1
 8fe:	0f 92       	push	r0
 900:	0f b6       	in	r0, 0x3f	; 63
 902:	0f 92       	push	r0
 904:	11 24       	eor	r1, r1
 906:	8f 93       	push	r24
	if(SPSR & (1<<SPIF))
 908:	0d b4       	in	r0, 0x2d	; 45
 90a:	07 fe       	sbrs	r0, 7
 90c:	09 c0       	rjmp	.+18     	; 0x920 <__stack+0x21>
	{
		spiRxData = SPDR;
 90e:	8e b5       	in	r24, 0x2e	; 46
 910:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <spiRxData>
		spiRxData = 0;
 914:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <spiRxData>
		spiTxRxDone = 1;
 918:	81 e0       	ldi	r24, 0x01	; 1
 91a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <spiTxRxDone>
 91e:	06 c0       	rjmp	.+12     	; 0x92c <__stack+0x2d>
	}
	else
	{
		spiRxData = SPDR;
 920:	8e b5       	in	r24, 0x2e	; 46
 922:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <spiRxData>
		spiTxRxDone = 1;
 926:	81 e0       	ldi	r24, 0x01	; 1
 928:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <spiTxRxDone>
	}
}
 92c:	8f 91       	pop	r24
 92e:	0f 90       	pop	r0
 930:	0f be       	out	0x3f, r0	; 63
 932:	0f 90       	pop	r0
 934:	1f 90       	pop	r1
 936:	18 95       	reti

00000938 <SpiMasterInit>:

void SpiMasterInit(void)
{
	DDRB |= (1 << DDB5) | (1 << DDB3);
 938:	84 b1       	in	r24, 0x04	; 4
 93a:	88 62       	ori	r24, 0x28	; 40
 93c:	84 b9       	out	0x04, r24	; 4
	
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0) | (1<<SPIE);
 93e:	81 ed       	ldi	r24, 0xD1	; 209
 940:	8c bd       	out	0x2c, r24	; 44
 942:	08 95       	ret

00000944 <SpiSend>:
}

uint8_t SpiSend(uint8_t data)
{
	spiTxRxDone = 0;
 944:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <spiTxRxDone>
	SPDR = data;
 948:	8e bd       	out	0x2e, r24	; 46
	
	while(spiTxRxDone == 0);
 94a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <spiTxRxDone>
 94e:	88 23       	and	r24, r24
 950:	e1 f3       	breq	.-8      	; 0x94a <SpiSend+0x6>
	
	return spiRxData;
 952:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <spiRxData>
}
 956:	08 95       	ret

00000958 <__vector_24>:
#include <avr/interrupt.h>

volatile uint8_t status = TWI_NONE;

ISR(TWI_vect)
{
 958:	1f 92       	push	r1
 95a:	0f 92       	push	r0
 95c:	0f b6       	in	r0, 0x3f	; 63
 95e:	0f 92       	push	r0
 960:	11 24       	eor	r1, r1
 962:	8f 93       	push	r24
	status = (TWSR & TWI_NONE);
 964:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 968:	88 7f       	andi	r24, 0xF8	; 248
 96a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <status>
}
 96e:	8f 91       	pop	r24
 970:	0f 90       	pop	r0
 972:	0f be       	out	0x3f, r0	; 63
 974:	0f 90       	pop	r0
 976:	1f 90       	pop	r1
 978:	18 95       	reti

0000097a <__vector_18>:
volatile static uint8_t uartTxBusy = 1;
static uint16_t desiredLength = 0;
static UartCallback callback;

ISR(USART_RX_vect)
{
 97a:	1f 92       	push	r1
 97c:	0f 92       	push	r0
 97e:	0f b6       	in	r0, 0x3f	; 63
 980:	0f 92       	push	r0
 982:	11 24       	eor	r1, r1
 984:	af 92       	push	r10
 986:	bf 92       	push	r11
 988:	cf 92       	push	r12
 98a:	df 92       	push	r13
 98c:	ef 92       	push	r14
 98e:	ff 92       	push	r15
 990:	0f 93       	push	r16
 992:	1f 93       	push	r17
 994:	2f 93       	push	r18
 996:	3f 93       	push	r19
 998:	4f 93       	push	r20
 99a:	5f 93       	push	r21
 99c:	6f 93       	push	r22
 99e:	7f 93       	push	r23
 9a0:	8f 93       	push	r24
 9a2:	9f 93       	push	r25
 9a4:	af 93       	push	r26
 9a6:	bf 93       	push	r27
 9a8:	ef 93       	push	r30
 9aa:	ff 93       	push	r31
 9ac:	cf 93       	push	r28
 9ae:	df 93       	push	r29
 9b0:	cd b7       	in	r28, 0x3d	; 61
 9b2:	de b7       	in	r29, 0x3e	; 62
	
	if(rxWritePos >= RXBUFFERSIZE)
	{
		rxWritePos = 0;
	}
}
 9b4:	0d b7       	in	r16, 0x3d	; 61
 9b6:	1e b7       	in	r17, 0x3e	; 62

ISR(USART_RX_vect)
{
	volatile static uint16_t rxWritePos = 0;
	
	rxBuffer[rxWritePos] = UDR0;
 9b8:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <rxWritePos.1762>
 9bc:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <rxWritePos.1762+0x1>
 9c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 9c4:	e6 5e       	subi	r30, 0xE6	; 230
 9c6:	fe 4f       	sbci	r31, 0xFE	; 254
 9c8:	80 83       	st	Z, r24
	rxCount++;
 9ca:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <rxCount>
 9ce:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <rxCount+0x1>
 9d2:	01 96       	adiw	r24, 0x01	; 1
 9d4:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <rxCount+0x1>
 9d8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <rxCount>
	rxWritePos++;
 9dc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rxWritePos.1762>
 9e0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rxWritePos.1762+0x1>
 9e4:	01 96       	adiw	r24, 0x01	; 1
 9e6:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <rxWritePos.1762+0x1>
 9ea:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <rxWritePos.1762>
	
	if(desiredLength > 0 && rxCount == desiredLength)
 9ee:	e0 90 16 01 	lds	r14, 0x0116	; 0x800116 <desiredLength>
 9f2:	f0 90 17 01 	lds	r15, 0x0117	; 0x800117 <desiredLength+0x1>
 9f6:	e1 14       	cp	r14, r1
 9f8:	f1 04       	cpc	r15, r1
 9fa:	41 f1       	breq	.+80     	; 0xa4c <__vector_18+0xd2>
 9fc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <rxCount>
 a00:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <rxCount+0x1>
 a04:	e8 16       	cp	r14, r24
 a06:	f9 06       	cpc	r15, r25
 a08:	09 f5       	brne	.+66     	; 0xa4c <__vector_18+0xd2>
	{
		uint8_t message[desiredLength];
 a0a:	8d b7       	in	r24, 0x3d	; 61
 a0c:	9e b7       	in	r25, 0x3e	; 62
 a0e:	8e 19       	sub	r24, r14
 a10:	9f 09       	sbc	r25, r15
 a12:	0f b6       	in	r0, 0x3f	; 63
 a14:	f8 94       	cli
 a16:	9e bf       	out	0x3e, r25	; 62
 a18:	0f be       	out	0x3f, r0	; 63
 a1a:	8d bf       	out	0x3d, r24	; 61
 a1c:	01 96       	adiw	r24, 0x01	; 1
 a1e:	6c 01       	movw	r12, r24
		memcpy(message, rxBuffer, desiredLength);
 a20:	a7 01       	movw	r20, r14
 a22:	6a e1       	ldi	r22, 0x1A	; 26
 a24:	71 e0       	ldi	r23, 0x01	; 1
 a26:	0e 94 1c 07 	call	0xe38	; 0xe38 <memcpy>
		callback(message, desiredLength);
 a2a:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <callback>
 a2e:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <callback+0x1>
 a32:	b7 01       	movw	r22, r14
 a34:	c6 01       	movw	r24, r12
 a36:	09 95       	icall
		rxWritePos = 0;
 a38:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <rxWritePos.1762+0x1>
 a3c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rxWritePos.1762>
 a40:	0f b6       	in	r0, 0x3f	; 63
 a42:	f8 94       	cli
 a44:	1e bf       	out	0x3e, r17	; 62
 a46:	0f be       	out	0x3f, r0	; 63
 a48:	0d bf       	out	0x3d, r16	; 61
 a4a:	0b c0       	rjmp	.+22     	; 0xa62 <__vector_18+0xe8>
		return;
	}
	
	if(rxWritePos >= RXBUFFERSIZE)
 a4c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rxWritePos.1762>
 a50:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rxWritePos.1762+0x1>
 a54:	80 38       	cpi	r24, 0x80	; 128
 a56:	91 05       	cpc	r25, r1
 a58:	20 f0       	brcs	.+8      	; 0xa62 <__vector_18+0xe8>
	{
		rxWritePos = 0;
 a5a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <rxWritePos.1762+0x1>
 a5e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rxWritePos.1762>
	}
}
 a62:	0f b6       	in	r0, 0x3f	; 63
 a64:	f8 94       	cli
 a66:	1e bf       	out	0x3e, r17	; 62
 a68:	0f be       	out	0x3f, r0	; 63
 a6a:	0d bf       	out	0x3d, r16	; 61
 a6c:	df 91       	pop	r29
 a6e:	cf 91       	pop	r28
 a70:	ff 91       	pop	r31
 a72:	ef 91       	pop	r30
 a74:	bf 91       	pop	r27
 a76:	af 91       	pop	r26
 a78:	9f 91       	pop	r25
 a7a:	8f 91       	pop	r24
 a7c:	7f 91       	pop	r23
 a7e:	6f 91       	pop	r22
 a80:	5f 91       	pop	r21
 a82:	4f 91       	pop	r20
 a84:	3f 91       	pop	r19
 a86:	2f 91       	pop	r18
 a88:	1f 91       	pop	r17
 a8a:	0f 91       	pop	r16
 a8c:	ff 90       	pop	r15
 a8e:	ef 90       	pop	r14
 a90:	df 90       	pop	r13
 a92:	cf 90       	pop	r12
 a94:	bf 90       	pop	r11
 a96:	af 90       	pop	r10
 a98:	0f 90       	pop	r0
 a9a:	0f be       	out	0x3f, r0	; 63
 a9c:	0f 90       	pop	r0
 a9e:	1f 90       	pop	r1
 aa0:	18 95       	reti

00000aa2 <__vector_20>:

ISR(USART_TX_vect)
{
 aa2:	1f 92       	push	r1
 aa4:	0f 92       	push	r0
 aa6:	0f b6       	in	r0, 0x3f	; 63
 aa8:	0f 92       	push	r0
 aaa:	11 24       	eor	r1, r1
 aac:	8f 93       	push	r24
	uartTxBusy = 1;
 aae:	81 e0       	ldi	r24, 0x01	; 1
 ab0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <uartTxBusy>
}
 ab4:	8f 91       	pop	r24
 ab6:	0f 90       	pop	r0
 ab8:	0f be       	out	0x3f, r0	; 63
 aba:	0f 90       	pop	r0
 abc:	1f 90       	pop	r1
 abe:	18 95       	reti

00000ac0 <UartInit>:

void UartInit(uint32_t baud, uint8_t highSpeed)
{
	uint8_t speed = 16;
	
	if(highSpeed != 0)
 ac0:	44 23       	and	r20, r20
 ac2:	39 f0       	breq	.+14     	; 0xad2 <UartInit+0x12>
	{
		speed = 8;
		UCSR0A |= 1 << U2X0;
 ac4:	e0 ec       	ldi	r30, 0xC0	; 192
 ac6:	f0 e0       	ldi	r31, 0x00	; 0
 ac8:	20 81       	ld	r18, Z
 aca:	22 60       	ori	r18, 0x02	; 2
 acc:	20 83       	st	Z, r18
{
	uint8_t speed = 16;
	
	if(highSpeed != 0)
	{
		speed = 8;
 ace:	a8 e0       	ldi	r26, 0x08	; 8
 ad0:	01 c0       	rjmp	.+2      	; 0xad4 <UartInit+0x14>
	uartTxBusy = 1;
}

void UartInit(uint32_t baud, uint8_t highSpeed)
{
	uint8_t speed = 16;
 ad2:	a0 e1       	ldi	r26, 0x10	; 16
	{
		speed = 8;
		UCSR0A |= 1 << U2X0;
	}
	
	baud = (F_CPU/(speed*baud)) - 1;
 ad4:	b0 e0       	ldi	r27, 0x00	; 0
 ad6:	9b 01       	movw	r18, r22
 ad8:	ac 01       	movw	r20, r24
 ada:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__muluhisi3>
 ade:	9b 01       	movw	r18, r22
 ae0:	ac 01       	movw	r20, r24
 ae2:	60 e0       	ldi	r22, 0x00	; 0
 ae4:	74 e2       	ldi	r23, 0x24	; 36
 ae6:	84 ef       	ldi	r24, 0xF4	; 244
 ae8:	90 e0       	ldi	r25, 0x00	; 0
 aea:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__udivmodsi4>
 aee:	ba 01       	movw	r22, r20
 af0:	a9 01       	movw	r20, r18
 af2:	41 50       	subi	r20, 0x01	; 1
 af4:	51 09       	sbc	r21, r1
 af6:	61 09       	sbc	r22, r1
 af8:	71 09       	sbc	r23, r1
	
	UBRR0H = (baud & 0xF00) >> 8;
 afa:	db 01       	movw	r26, r22
 afc:	ca 01       	movw	r24, r20
 afe:	88 27       	eor	r24, r24
 b00:	9f 70       	andi	r25, 0x0F	; 15
 b02:	aa 27       	eor	r26, r26
 b04:	bb 27       	eor	r27, r27
 b06:	89 2f       	mov	r24, r25
 b08:	9a 2f       	mov	r25, r26
 b0a:	ab 2f       	mov	r26, r27
 b0c:	bb 27       	eor	r27, r27
 b0e:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (baud & 0x00FF);
 b12:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0) | (1 << TXCIE0);	
 b16:	e1 ec       	ldi	r30, 0xC1	; 193
 b18:	f0 e0       	ldi	r31, 0x00	; 0
 b1a:	80 81       	ld	r24, Z
 b1c:	88 6d       	ori	r24, 0xD8	; 216
 b1e:	80 83       	st	Z, r24
 b20:	08 95       	ret

00000b22 <UartCallbackSet>:
}

void UartCallbackSet(UartCallback CallbackFunc, uint16_t DesiredLength)
{
	callback = CallbackFunc;
 b22:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <callback+0x1>
 b26:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <callback>
	desiredLength = DesiredLength;
 b2a:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <desiredLength+0x1>
 b2e:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <desiredLength>
 b32:	08 95       	ret

00000b34 <UartByteSend>:
}

void UartByteSend(uint8_t byte)
{
	while(uartTxBusy == 0);
 b34:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <uartTxBusy>
 b38:	99 23       	and	r25, r25
 b3a:	e1 f3       	breq	.-8      	; 0xb34 <UartByteSend>
	uartTxBusy = 0;
 b3c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <uartTxBusy>
	UDR0 = byte;
 b40:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 b44:	08 95       	ret

00000b46 <UartArraySend>:
}

void UartArraySend(uint8_t* byteArray, uint16_t length)
{
 b46:	ef 92       	push	r14
 b48:	ff 92       	push	r15
 b4a:	0f 93       	push	r16
 b4c:	1f 93       	push	r17
 b4e:	cf 93       	push	r28
 b50:	df 93       	push	r29
 b52:	7c 01       	movw	r14, r24
 b54:	8b 01       	movw	r16, r22
	for(uint16_t i = 0; i < length; i++)
 b56:	c0 e0       	ldi	r28, 0x00	; 0
 b58:	d0 e0       	ldi	r29, 0x00	; 0
 b5a:	07 c0       	rjmp	.+14     	; 0xb6a <UartArraySend+0x24>
	{
		UartByteSend(byteArray[i]);
 b5c:	f7 01       	movw	r30, r14
 b5e:	ec 0f       	add	r30, r28
 b60:	fd 1f       	adc	r31, r29
 b62:	80 81       	ld	r24, Z
 b64:	0e 94 9a 05 	call	0xb34	; 0xb34 <UartByteSend>
	UDR0 = byte;
}

void UartArraySend(uint8_t* byteArray, uint16_t length)
{
	for(uint16_t i = 0; i < length; i++)
 b68:	21 96       	adiw	r28, 0x01	; 1
 b6a:	c0 17       	cp	r28, r16
 b6c:	d1 07       	cpc	r29, r17
 b6e:	b0 f3       	brcs	.-20     	; 0xb5c <UartArraySend+0x16>
	{
		UartByteSend(byteArray[i]);
	}
}
 b70:	df 91       	pop	r29
 b72:	cf 91       	pop	r28
 b74:	1f 91       	pop	r17
 b76:	0f 91       	pop	r16
 b78:	ff 90       	pop	r15
 b7a:	ef 90       	pop	r14
 b7c:	08 95       	ret

00000b7e <__udivmodsi4>:
 b7e:	a1 e2       	ldi	r26, 0x21	; 33
 b80:	1a 2e       	mov	r1, r26
 b82:	aa 1b       	sub	r26, r26
 b84:	bb 1b       	sub	r27, r27
 b86:	fd 01       	movw	r30, r26
 b88:	0d c0       	rjmp	.+26     	; 0xba4 <__udivmodsi4_ep>

00000b8a <__udivmodsi4_loop>:
 b8a:	aa 1f       	adc	r26, r26
 b8c:	bb 1f       	adc	r27, r27
 b8e:	ee 1f       	adc	r30, r30
 b90:	ff 1f       	adc	r31, r31
 b92:	a2 17       	cp	r26, r18
 b94:	b3 07       	cpc	r27, r19
 b96:	e4 07       	cpc	r30, r20
 b98:	f5 07       	cpc	r31, r21
 b9a:	20 f0       	brcs	.+8      	; 0xba4 <__udivmodsi4_ep>
 b9c:	a2 1b       	sub	r26, r18
 b9e:	b3 0b       	sbc	r27, r19
 ba0:	e4 0b       	sbc	r30, r20
 ba2:	f5 0b       	sbc	r31, r21

00000ba4 <__udivmodsi4_ep>:
 ba4:	66 1f       	adc	r22, r22
 ba6:	77 1f       	adc	r23, r23
 ba8:	88 1f       	adc	r24, r24
 baa:	99 1f       	adc	r25, r25
 bac:	1a 94       	dec	r1
 bae:	69 f7       	brne	.-38     	; 0xb8a <__udivmodsi4_loop>
 bb0:	60 95       	com	r22
 bb2:	70 95       	com	r23
 bb4:	80 95       	com	r24
 bb6:	90 95       	com	r25
 bb8:	9b 01       	movw	r18, r22
 bba:	ac 01       	movw	r20, r24
 bbc:	bd 01       	movw	r22, r26
 bbe:	cf 01       	movw	r24, r30
 bc0:	08 95       	ret

00000bc2 <__muluhisi3>:
 bc2:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__umulhisi3>
 bc6:	a5 9f       	mul	r26, r21
 bc8:	90 0d       	add	r25, r0
 bca:	b4 9f       	mul	r27, r20
 bcc:	90 0d       	add	r25, r0
 bce:	a4 9f       	mul	r26, r20
 bd0:	80 0d       	add	r24, r0
 bd2:	91 1d       	adc	r25, r1
 bd4:	11 24       	eor	r1, r1
 bd6:	08 95       	ret

00000bd8 <__umulhisi3>:
 bd8:	a2 9f       	mul	r26, r18
 bda:	b0 01       	movw	r22, r0
 bdc:	b3 9f       	mul	r27, r19
 bde:	c0 01       	movw	r24, r0
 be0:	a3 9f       	mul	r26, r19
 be2:	70 0d       	add	r23, r0
 be4:	81 1d       	adc	r24, r1
 be6:	11 24       	eor	r1, r1
 be8:	91 1d       	adc	r25, r1
 bea:	b2 9f       	mul	r27, r18
 bec:	70 0d       	add	r23, r0
 bee:	81 1d       	adc	r24, r1
 bf0:	11 24       	eor	r1, r1
 bf2:	91 1d       	adc	r25, r1
 bf4:	08 95       	ret

00000bf6 <malloc>:
 bf6:	0f 93       	push	r16
 bf8:	1f 93       	push	r17
 bfa:	cf 93       	push	r28
 bfc:	df 93       	push	r29
 bfe:	82 30       	cpi	r24, 0x02	; 2
 c00:	91 05       	cpc	r25, r1
 c02:	10 f4       	brcc	.+4      	; 0xc08 <malloc+0x12>
 c04:	82 e0       	ldi	r24, 0x02	; 2
 c06:	90 e0       	ldi	r25, 0x00	; 0
 c08:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <__flp>
 c0c:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <__flp+0x1>
 c10:	20 e0       	ldi	r18, 0x00	; 0
 c12:	30 e0       	ldi	r19, 0x00	; 0
 c14:	a0 e0       	ldi	r26, 0x00	; 0
 c16:	b0 e0       	ldi	r27, 0x00	; 0
 c18:	30 97       	sbiw	r30, 0x00	; 0
 c1a:	19 f1       	breq	.+70     	; 0xc62 <malloc+0x6c>
 c1c:	40 81       	ld	r20, Z
 c1e:	51 81       	ldd	r21, Z+1	; 0x01
 c20:	02 81       	ldd	r16, Z+2	; 0x02
 c22:	13 81       	ldd	r17, Z+3	; 0x03
 c24:	48 17       	cp	r20, r24
 c26:	59 07       	cpc	r21, r25
 c28:	c8 f0       	brcs	.+50     	; 0xc5c <malloc+0x66>
 c2a:	84 17       	cp	r24, r20
 c2c:	95 07       	cpc	r25, r21
 c2e:	69 f4       	brne	.+26     	; 0xc4a <malloc+0x54>
 c30:	10 97       	sbiw	r26, 0x00	; 0
 c32:	31 f0       	breq	.+12     	; 0xc40 <malloc+0x4a>
 c34:	12 96       	adiw	r26, 0x02	; 2
 c36:	0c 93       	st	X, r16
 c38:	12 97       	sbiw	r26, 0x02	; 2
 c3a:	13 96       	adiw	r26, 0x03	; 3
 c3c:	1c 93       	st	X, r17
 c3e:	27 c0       	rjmp	.+78     	; 0xc8e <malloc+0x98>
 c40:	00 93 9e 01 	sts	0x019E, r16	; 0x80019e <__flp>
 c44:	10 93 9f 01 	sts	0x019F, r17	; 0x80019f <__flp+0x1>
 c48:	22 c0       	rjmp	.+68     	; 0xc8e <malloc+0x98>
 c4a:	21 15       	cp	r18, r1
 c4c:	31 05       	cpc	r19, r1
 c4e:	19 f0       	breq	.+6      	; 0xc56 <malloc+0x60>
 c50:	42 17       	cp	r20, r18
 c52:	53 07       	cpc	r21, r19
 c54:	18 f4       	brcc	.+6      	; 0xc5c <malloc+0x66>
 c56:	9a 01       	movw	r18, r20
 c58:	bd 01       	movw	r22, r26
 c5a:	ef 01       	movw	r28, r30
 c5c:	df 01       	movw	r26, r30
 c5e:	f8 01       	movw	r30, r16
 c60:	db cf       	rjmp	.-74     	; 0xc18 <malloc+0x22>
 c62:	21 15       	cp	r18, r1
 c64:	31 05       	cpc	r19, r1
 c66:	f9 f0       	breq	.+62     	; 0xca6 <malloc+0xb0>
 c68:	28 1b       	sub	r18, r24
 c6a:	39 0b       	sbc	r19, r25
 c6c:	24 30       	cpi	r18, 0x04	; 4
 c6e:	31 05       	cpc	r19, r1
 c70:	80 f4       	brcc	.+32     	; 0xc92 <malloc+0x9c>
 c72:	8a 81       	ldd	r24, Y+2	; 0x02
 c74:	9b 81       	ldd	r25, Y+3	; 0x03
 c76:	61 15       	cp	r22, r1
 c78:	71 05       	cpc	r23, r1
 c7a:	21 f0       	breq	.+8      	; 0xc84 <malloc+0x8e>
 c7c:	fb 01       	movw	r30, r22
 c7e:	93 83       	std	Z+3, r25	; 0x03
 c80:	82 83       	std	Z+2, r24	; 0x02
 c82:	04 c0       	rjmp	.+8      	; 0xc8c <malloc+0x96>
 c84:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <__flp+0x1>
 c88:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <__flp>
 c8c:	fe 01       	movw	r30, r28
 c8e:	32 96       	adiw	r30, 0x02	; 2
 c90:	44 c0       	rjmp	.+136    	; 0xd1a <malloc+0x124>
 c92:	fe 01       	movw	r30, r28
 c94:	e2 0f       	add	r30, r18
 c96:	f3 1f       	adc	r31, r19
 c98:	81 93       	st	Z+, r24
 c9a:	91 93       	st	Z+, r25
 c9c:	22 50       	subi	r18, 0x02	; 2
 c9e:	31 09       	sbc	r19, r1
 ca0:	39 83       	std	Y+1, r19	; 0x01
 ca2:	28 83       	st	Y, r18
 ca4:	3a c0       	rjmp	.+116    	; 0xd1a <malloc+0x124>
 ca6:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <__brkval>
 caa:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <__brkval+0x1>
 cae:	23 2b       	or	r18, r19
 cb0:	41 f4       	brne	.+16     	; 0xcc2 <malloc+0xcc>
 cb2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 cb6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 cba:	30 93 9d 01 	sts	0x019D, r19	; 0x80019d <__brkval+0x1>
 cbe:	20 93 9c 01 	sts	0x019C, r18	; 0x80019c <__brkval>
 cc2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 cc6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 cca:	21 15       	cp	r18, r1
 ccc:	31 05       	cpc	r19, r1
 cce:	41 f4       	brne	.+16     	; 0xce0 <malloc+0xea>
 cd0:	2d b7       	in	r18, 0x3d	; 61
 cd2:	3e b7       	in	r19, 0x3e	; 62
 cd4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 cd8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 cdc:	24 1b       	sub	r18, r20
 cde:	35 0b       	sbc	r19, r21
 ce0:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <__brkval>
 ce4:	f0 91 9d 01 	lds	r31, 0x019D	; 0x80019d <__brkval+0x1>
 ce8:	e2 17       	cp	r30, r18
 cea:	f3 07       	cpc	r31, r19
 cec:	a0 f4       	brcc	.+40     	; 0xd16 <malloc+0x120>
 cee:	2e 1b       	sub	r18, r30
 cf0:	3f 0b       	sbc	r19, r31
 cf2:	28 17       	cp	r18, r24
 cf4:	39 07       	cpc	r19, r25
 cf6:	78 f0       	brcs	.+30     	; 0xd16 <malloc+0x120>
 cf8:	ac 01       	movw	r20, r24
 cfa:	4e 5f       	subi	r20, 0xFE	; 254
 cfc:	5f 4f       	sbci	r21, 0xFF	; 255
 cfe:	24 17       	cp	r18, r20
 d00:	35 07       	cpc	r19, r21
 d02:	48 f0       	brcs	.+18     	; 0xd16 <malloc+0x120>
 d04:	4e 0f       	add	r20, r30
 d06:	5f 1f       	adc	r21, r31
 d08:	50 93 9d 01 	sts	0x019D, r21	; 0x80019d <__brkval+0x1>
 d0c:	40 93 9c 01 	sts	0x019C, r20	; 0x80019c <__brkval>
 d10:	81 93       	st	Z+, r24
 d12:	91 93       	st	Z+, r25
 d14:	02 c0       	rjmp	.+4      	; 0xd1a <malloc+0x124>
 d16:	e0 e0       	ldi	r30, 0x00	; 0
 d18:	f0 e0       	ldi	r31, 0x00	; 0
 d1a:	cf 01       	movw	r24, r30
 d1c:	df 91       	pop	r29
 d1e:	cf 91       	pop	r28
 d20:	1f 91       	pop	r17
 d22:	0f 91       	pop	r16
 d24:	08 95       	ret

00000d26 <free>:
 d26:	cf 93       	push	r28
 d28:	df 93       	push	r29
 d2a:	00 97       	sbiw	r24, 0x00	; 0
 d2c:	09 f4       	brne	.+2      	; 0xd30 <free+0xa>
 d2e:	81 c0       	rjmp	.+258    	; 0xe32 <free+0x10c>
 d30:	fc 01       	movw	r30, r24
 d32:	32 97       	sbiw	r30, 0x02	; 2
 d34:	13 82       	std	Z+3, r1	; 0x03
 d36:	12 82       	std	Z+2, r1	; 0x02
 d38:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <__flp>
 d3c:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <__flp+0x1>
 d40:	10 97       	sbiw	r26, 0x00	; 0
 d42:	81 f4       	brne	.+32     	; 0xd64 <free+0x3e>
 d44:	20 81       	ld	r18, Z
 d46:	31 81       	ldd	r19, Z+1	; 0x01
 d48:	82 0f       	add	r24, r18
 d4a:	93 1f       	adc	r25, r19
 d4c:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <__brkval>
 d50:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <__brkval+0x1>
 d54:	28 17       	cp	r18, r24
 d56:	39 07       	cpc	r19, r25
 d58:	51 f5       	brne	.+84     	; 0xdae <free+0x88>
 d5a:	f0 93 9d 01 	sts	0x019D, r31	; 0x80019d <__brkval+0x1>
 d5e:	e0 93 9c 01 	sts	0x019C, r30	; 0x80019c <__brkval>
 d62:	67 c0       	rjmp	.+206    	; 0xe32 <free+0x10c>
 d64:	ed 01       	movw	r28, r26
 d66:	20 e0       	ldi	r18, 0x00	; 0
 d68:	30 e0       	ldi	r19, 0x00	; 0
 d6a:	ce 17       	cp	r28, r30
 d6c:	df 07       	cpc	r29, r31
 d6e:	40 f4       	brcc	.+16     	; 0xd80 <free+0x5a>
 d70:	4a 81       	ldd	r20, Y+2	; 0x02
 d72:	5b 81       	ldd	r21, Y+3	; 0x03
 d74:	9e 01       	movw	r18, r28
 d76:	41 15       	cp	r20, r1
 d78:	51 05       	cpc	r21, r1
 d7a:	f1 f0       	breq	.+60     	; 0xdb8 <free+0x92>
 d7c:	ea 01       	movw	r28, r20
 d7e:	f5 cf       	rjmp	.-22     	; 0xd6a <free+0x44>
 d80:	d3 83       	std	Z+3, r29	; 0x03
 d82:	c2 83       	std	Z+2, r28	; 0x02
 d84:	40 81       	ld	r20, Z
 d86:	51 81       	ldd	r21, Z+1	; 0x01
 d88:	84 0f       	add	r24, r20
 d8a:	95 1f       	adc	r25, r21
 d8c:	c8 17       	cp	r28, r24
 d8e:	d9 07       	cpc	r29, r25
 d90:	59 f4       	brne	.+22     	; 0xda8 <free+0x82>
 d92:	88 81       	ld	r24, Y
 d94:	99 81       	ldd	r25, Y+1	; 0x01
 d96:	84 0f       	add	r24, r20
 d98:	95 1f       	adc	r25, r21
 d9a:	02 96       	adiw	r24, 0x02	; 2
 d9c:	91 83       	std	Z+1, r25	; 0x01
 d9e:	80 83       	st	Z, r24
 da0:	8a 81       	ldd	r24, Y+2	; 0x02
 da2:	9b 81       	ldd	r25, Y+3	; 0x03
 da4:	93 83       	std	Z+3, r25	; 0x03
 da6:	82 83       	std	Z+2, r24	; 0x02
 da8:	21 15       	cp	r18, r1
 daa:	31 05       	cpc	r19, r1
 dac:	29 f4       	brne	.+10     	; 0xdb8 <free+0x92>
 dae:	f0 93 9f 01 	sts	0x019F, r31	; 0x80019f <__flp+0x1>
 db2:	e0 93 9e 01 	sts	0x019E, r30	; 0x80019e <__flp>
 db6:	3d c0       	rjmp	.+122    	; 0xe32 <free+0x10c>
 db8:	e9 01       	movw	r28, r18
 dba:	fb 83       	std	Y+3, r31	; 0x03
 dbc:	ea 83       	std	Y+2, r30	; 0x02
 dbe:	49 91       	ld	r20, Y+
 dc0:	59 91       	ld	r21, Y+
 dc2:	c4 0f       	add	r28, r20
 dc4:	d5 1f       	adc	r29, r21
 dc6:	ec 17       	cp	r30, r28
 dc8:	fd 07       	cpc	r31, r29
 dca:	61 f4       	brne	.+24     	; 0xde4 <free+0xbe>
 dcc:	80 81       	ld	r24, Z
 dce:	91 81       	ldd	r25, Z+1	; 0x01
 dd0:	84 0f       	add	r24, r20
 dd2:	95 1f       	adc	r25, r21
 dd4:	02 96       	adiw	r24, 0x02	; 2
 dd6:	e9 01       	movw	r28, r18
 dd8:	99 83       	std	Y+1, r25	; 0x01
 dda:	88 83       	st	Y, r24
 ddc:	82 81       	ldd	r24, Z+2	; 0x02
 dde:	93 81       	ldd	r25, Z+3	; 0x03
 de0:	9b 83       	std	Y+3, r25	; 0x03
 de2:	8a 83       	std	Y+2, r24	; 0x02
 de4:	e0 e0       	ldi	r30, 0x00	; 0
 de6:	f0 e0       	ldi	r31, 0x00	; 0
 de8:	12 96       	adiw	r26, 0x02	; 2
 dea:	8d 91       	ld	r24, X+
 dec:	9c 91       	ld	r25, X
 dee:	13 97       	sbiw	r26, 0x03	; 3
 df0:	00 97       	sbiw	r24, 0x00	; 0
 df2:	19 f0       	breq	.+6      	; 0xdfa <free+0xd4>
 df4:	fd 01       	movw	r30, r26
 df6:	dc 01       	movw	r26, r24
 df8:	f7 cf       	rjmp	.-18     	; 0xde8 <free+0xc2>
 dfa:	8d 91       	ld	r24, X+
 dfc:	9c 91       	ld	r25, X
 dfe:	11 97       	sbiw	r26, 0x01	; 1
 e00:	9d 01       	movw	r18, r26
 e02:	2e 5f       	subi	r18, 0xFE	; 254
 e04:	3f 4f       	sbci	r19, 0xFF	; 255
 e06:	82 0f       	add	r24, r18
 e08:	93 1f       	adc	r25, r19
 e0a:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <__brkval>
 e0e:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <__brkval+0x1>
 e12:	28 17       	cp	r18, r24
 e14:	39 07       	cpc	r19, r25
 e16:	69 f4       	brne	.+26     	; 0xe32 <free+0x10c>
 e18:	30 97       	sbiw	r30, 0x00	; 0
 e1a:	29 f4       	brne	.+10     	; 0xe26 <free+0x100>
 e1c:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <__flp+0x1>
 e20:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <__flp>
 e24:	02 c0       	rjmp	.+4      	; 0xe2a <free+0x104>
 e26:	13 82       	std	Z+3, r1	; 0x03
 e28:	12 82       	std	Z+2, r1	; 0x02
 e2a:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <__brkval+0x1>
 e2e:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <__brkval>
 e32:	df 91       	pop	r29
 e34:	cf 91       	pop	r28
 e36:	08 95       	ret

00000e38 <memcpy>:
 e38:	fb 01       	movw	r30, r22
 e3a:	dc 01       	movw	r26, r24
 e3c:	02 c0       	rjmp	.+4      	; 0xe42 <memcpy+0xa>
 e3e:	01 90       	ld	r0, Z+
 e40:	0d 92       	st	X+, r0
 e42:	41 50       	subi	r20, 0x01	; 1
 e44:	50 40       	sbci	r21, 0x00	; 0
 e46:	d8 f7       	brcc	.-10     	; 0xe3e <memcpy+0x6>
 e48:	08 95       	ret

00000e4a <_exit>:
 e4a:	f8 94       	cli

00000e4c <__stop_program>:
 e4c:	ff cf       	rjmp	.-2      	; 0xe4c <__stop_program>
